// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:494
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PHYSICAL = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SOME_EXISTENCE = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const POSTFIXOP = 57701
const UMINUS = 57702
const HELPTOKEN = 57703

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6939

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 730,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 579,
	-2, 0,
	-1, 54,
	97, 730,
	156, 730,
	331, 730,
	332, 730,
	-2, 0,
	-1, 64,
	1, 692,
	215, 692,
	261, 692,
	376, 692,
	378, 692,
	380, 692,
	381, 692,
	-2, 705,
	-1, 97,
	4, 732,
	20, 732,
	21, 732,
	24, 732,
	29, 732,
	34, 732,
	35, 732,
	36, 732,
	37, 732,
	38, 732,
	39, 732,
	40, 732,
	41, 732,
	42, 732,
	43, 732,
	45, 732,
	46, 732,
	47, 732,
	48, 732,
	49, 732,
	52, 732,
	53, 732,
	54, 732,
	56, 732,
	57, 732,
	61, 732,
	62, 732,
	63, 732,
	65, 732,
	66, 732,
	67, 732,
	68, 732,
	70, 732,
	72, 732,
	73, 732,
	76, 732,
	77, 732,
	78, 732,
	86, 732,
	87, 732,
	88, 732,
	89, 732,
	90, 732,
	91, 732,
	92, 732,
	93, 732,
	95, 732,
	97, 732,
	99, 732,
	102, 732,
	103, 732,
	105, 732,
	109, 732,
	110, 732,
	111, 732,
	112, 732,
	113, 732,
	114, 732,
	115, 732,
	123, 732,
	124, 732,
	125, 732,
	126, 732,
	127, 732,
	129, 732,
	131, 732,
	136, 732,
	137, 732,
	139, 732,
	142, 732,
	143, 732,
	144, 732,
	145, 732,
	146, 732,
	147, 732,
	150, 732,
	151, 732,
	153, 732,
	156, 732,
	157, 732,
	158, 732,
	159, 732,
	160, 732,
	161, 732,
	162, 732,
	163, 732,
	165, 732,
	168, 732,
	169, 732,
	170, 732,
	172, 732,
	173, 732,
	174, 732,
	175, 732,
	176, 732,
	178, 732,
	179, 732,
	181, 732,
	183, 732,
	184, 732,
	187, 732,
	188, 732,
	191, 732,
	193, 732,
	195, 732,
	196, 732,
	197, 732,
	198, 732,
	199, 732,
	201, 732,
	202, 732,
	203, 732,
	204, 732,
	208, 732,
	209, 732,
	210, 732,
	211, 732,
	212, 732,
	214, 732,
	216, 732,
	217, 732,
	220, 732,
	221, 732,
	223, 732,
	225, 732,
	226, 732,
	227, 732,
	228, 732,
	229, 732,
	230, 732,
	231, 732,
	233, 732,
	234, 732,
	235, 732,
	236, 732,
	237, 732,
	239, 732,
	240, 732,
	241, 732,
	242, 732,
	243, 732,
	244, 732,
	245, 732,
	246, 732,
	248, 732,
	249, 732,
	250, 732,
	251, 732,
	252, 732,
	254, 732,
	255, 732,
	256, 732,
	257, 732,
	258, 732,
	259, 732,
	260, 732,
	262, 732,
	264, 732,
	265, 732,
	266, 732,
	267, 732,
	269, 732,
	270, 732,
	271, 732,
	272, 732,
	273, 732,
	275, 732,
	276, 732,
	277, 732,
	278, 732,
	279, 732,
	281, 732,
	282, 732,
	283, 732,
	284, 732,
	286, 732,
	287, 732,
	288, 732,
	289, 732,
	292, 732,
	293, 732,
	294, 732,
	295, 732,
	296, 732,
	297, 732,
	298, 732,
	299, 732,
	300, 732,
	301, 732,
	303, 732,
	305, 732,
	306, 732,
	307, 732,
	308, 732,
	309, 732,
	310, 732,
	311, 732,
	312, 732,
	314, 732,
	315, 732,
	316, 732,
	319, 732,
	320, 732,
	321, 732,
	322, 732,
	324, 732,
	325, 732,
	326, 732,
	327, 732,
	330, 732,
	331, 732,
	332, 732,
	333, 732,
	335, 732,
	337, 732,
	338, 732,
	339, 732,
	340, 732,
	341, 732,
	342, 732,
	345, 732,
	350, 732,
	351, 732,
	352, 732,
	353, 732,
	354, 732,
	-2, 0,
	-1, 115,
	1, 695,
	215, 695,
	261, 695,
	376, 695,
	378, 695,
	380, 695,
	381, 695,
	-2, 704,
	-1, 120,
	1, 630,
	168, 630,
	239, 630,
	243, 630,
	380, 630,
	381, 630,
	-2, 0,
	-1, 122,
	1, 630,
	380, 630,
	381, 630,
	-2, 0,
	-1, 123,
	1, 630,
	380, 630,
	381, 630,
	-2, 0,
	-1, 124,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 145,
	4, 738,
	5, 738,
	6, 738,
	7, 738,
	8, 738,
	9, 738,
	20, 738,
	21, 738,
	24, 738,
	29, 738,
	30, 738,
	34, 738,
	35, 738,
	36, 738,
	37, 738,
	38, 738,
	39, 738,
	40, 738,
	41, 738,
	42, 738,
	43, 738,
	45, 738,
	46, 738,
	47, 738,
	48, 738,
	49, 738,
	50, 738,
	51, 738,
	52, 738,
	53, 738,
	54, 738,
	56, 738,
	57, 738,
	59, 738,
	61, 738,
	62, 738,
	63, 738,
	65, 738,
	66, 738,
	67, 738,
	68, 738,
	70, 738,
	72, 738,
	73, 738,
	75, 738,
	76, 738,
	77, 738,
	78, 738,
	80, 738,
	81, 738,
	82, 738,
	84, 738,
	85, 738,
	86, 738,
	87, 738,
	88, 738,
	89, 738,
	90, 738,
	91, 738,
	92, 738,
	93, 738,
	94, 738,
	95, 738,
	97, 738,
	99, 738,
	102, 738,
	103, 738,
	105, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	116, 738,
	117, 738,
	123, 738,
	124, 738,
	125, 738,
	126, 738,
	127, 738,
	129, 738,
	131, 738,
	134, 738,
	136, 738,
	137, 738,
	139, 738,
	142, 738,
	143, 738,
	144, 738,
	145, 738,
	146, 738,
	147, 738,
	148, 738,
	150, 738,
	151, 738,
	153, 738,
	155, 738,
	156, 738,
	157, 738,
	158, 738,
	159, 738,
	160, 738,
	161, 738,
	162, 738,
	163, 738,
	165, 738,
	167, 738,
	168, 738,
	169, 738,
	170, 738,
	171, 738,
	172, 738,
	173, 738,
	174, 738,
	175, 738,
	176, 738,
	178, 738,
	179, 738,
	181, 738,
	182, 738,
	183, 738,
	184, 738,
	185, 738,
	187, 738,
	188, 738,
	191, 738,
	193, 738,
	194, 738,
	195, 738,
	196, 738,
	197, 738,
	198, 738,
	199, 738,
	200, 738,
	201, 738,
	202, 738,
	203, 738,
	204, 738,
	205, 738,
	207, 738,
	208, 738,
	209, 738,
	210, 738,
	211, 738,
	212, 738,
	214, 738,
	217, 738,
	220, 738,
	221, 738,
	222, 738,
	223, 738,
	224, 738,
	225, 738,
	226, 738,
	227, 738,
	228, 738,
	229, 738,
	230, 738,
	231, 738,
	233, 738,
	234, 738,
	235, 738,
	236, 738,
	237, 738,
	239, 738,
	240, 738,
	241, 738,
	242, 738,
	243, 738,
	244, 738,
	245, 738,
	246, 738,
	248, 738,
	249, 738,
	250, 738,
	251, 738,
	252, 738,
	254, 738,
	255, 738,
	256, 738,
	257, 738,
	258, 738,
	259, 738,
	260, 738,
	262, 738,
	263, 738,
	264, 738,
	265, 738,
	266, 738,
	267, 738,
	269, 738,
	270, 738,
	271, 738,
	272, 738,
	273, 738,
	275, 738,
	276, 738,
	277, 738,
	278, 738,
	279, 738,
	280, 738,
	281, 738,
	282, 738,
	283, 738,
	284, 738,
	285, 738,
	286, 738,
	287, 738,
	288, 738,
	289, 738,
	292, 738,
	293, 738,
	294, 738,
	295, 738,
	296, 738,
	297, 738,
	298, 738,
	299, 738,
	300, 738,
	301, 738,
	303, 738,
	305, 738,
	306, 738,
	307, 738,
	308, 738,
	309, 738,
	310, 738,
	311, 738,
	312, 738,
	314, 738,
	315, 738,
	316, 738,
	319, 738,
	320, 738,
	321, 738,
	322, 738,
	323, 738,
	324, 738,
	325, 738,
	326, 738,
	327, 738,
	330, 738,
	331, 738,
	332, 738,
	333, 738,
	334, 738,
	335, 738,
	337, 738,
	338, 738,
	339, 738,
	340, 738,
	341, 738,
	342, 738,
	345, 738,
	350, 738,
	351, 738,
	352, 738,
	353, 738,
	354, 738,
	355, 738,
	363, 738,
	368, 738,
	369, 738,
	370, 738,
	377, 738,
	383, 738,
	-2, 0,
	-1, 148,
	1, 54,
	381, 54,
	-2, 730,
	-1, 516,
	133, 1348,
	317, 1348,
	360, 1348,
	379, 1348,
	-2, 0,
	-1, 517,
	133, 1295,
	317, 1295,
	360, 1295,
	379, 1295,
	-2, 0,
	-1, 519,
	133, 1408,
	317, 1408,
	360, 1408,
	379, 1408,
	-2, 0,
	-1, 521,
	133, 1431,
	317, 1431,
	360, 1431,
	379, 1431,
	-2, 0,
	-1, 528,
	133, 1353,
	317, 1353,
	360, 1353,
	379, 1353,
	-2, 348,
	-1, 554,
	1, 426,
	376, 426,
	378, 426,
	380, 426,
	381, 426,
	-2, 0,
	-1, 555,
	1, 478,
	130, 478,
	376, 478,
	378, 478,
	380, 478,
	381, 478,
	-2, 0,
	-1, 561,
	1, 440,
	376, 440,
	378, 440,
	380, 440,
	381, 440,
	-2, 0,
	-1, 563,
	1, 444,
	376, 444,
	378, 444,
	380, 444,
	381, 444,
	-2, 0,
	-1, 566,
	1, 452,
	376, 452,
	378, 452,
	380, 452,
	381, 452,
	-2, 0,
	-1, 567,
	1, 457,
	376, 457,
	378, 457,
	380, 457,
	381, 457,
	-2, 0,
	-1, 570,
	1, 467,
	376, 467,
	378, 467,
	380, 467,
	381, 467,
	-2, 0,
	-1, 595,
	118, 740,
	130, 740,
	186, 740,
	213, 740,
	-2, 699,
	-1, 602,
	118, 739,
	130, 739,
	186, 739,
	213, 739,
	-2, 696,
	-1, 658,
	377, 1273,
	-2, 1266,
	-1, 659,
	377, 1274,
	-2, 1267,
	-1, 665,
	5, 924,
	377, 924,
	-2, 1483,
	-1, 690,
	5, 883,
	-2, 1452,
	-1, 691,
	5, 918,
	377, 918,
	-2, 1454,
	-1, 692,
	5, 893,
	-2, 1455,
	-1, 693,
	5, 892,
	-2, 1456,
	-1, 694,
	5, 918,
	377, 918,
	-2, 1459,
	-1, 695,
	5, 918,
	377, 918,
	-2, 1460,
	-1, 696,
	5, 919,
	-2, 1463,
	-1, 697,
	5, 875,
	-2, 1464,
	-1, 698,
	5, 875,
	-2, 1465,
	-1, 699,
	5, 900,
	-2, 1469,
	-1, 700,
	5, 885,
	-2, 1470,
	-1, 701,
	5, 886,
	-2, 1471,
	-1, 702,
	5, 876,
	-2, 1477,
	-1, 703,
	5, 877,
	-2, 1478,
	-1, 704,
	5, 878,
	-2, 1479,
	-1, 705,
	5, 879,
	-2, 1480,
	-1, 706,
	5, 880,
	-2, 1481,
	-1, 707,
	5, 881,
	-2, 1482,
	-1, 708,
	5, 875,
	-2, 1489,
	-1, 709,
	5, 884,
	-2, 1494,
	-1, 710,
	5, 882,
	-2, 1497,
	-1, 711,
	5, 916,
	377, 916,
	-2, 1499,
	-1, 712,
	5, 920,
	-2, 1502,
	-1, 713,
	5, 922,
	-2, 1503,
	-1, 714,
	5, 915,
	377, 915,
	-2, 1508,
	-1, 909,
	229, 728,
	-2, 572,
	-1, 914,
	215, 1270,
	-2, 0,
	-1, 950,
	1, 223,
	376, 223,
	378, 223,
	380, 223,
	381, 223,
	-2, 703,
	-1, 953,
	4, 1507,
	10, 1507,
	11, 1507,
	13, 1507,
	14, 1507,
	15, 1507,
	16, 1507,
	17, 1507,
	18, 1507,
	20, 1507,
	21, 1507,
	23, 1507,
	24, 1507,
	27, 1507,
	29, 1507,
	31, 1507,
	34, 1507,
	35, 1507,
	36, 1507,
	37, 1507,
	38, 1507,
	39, 1507,
	40, 1507,
	41, 1507,
	42, 1507,
	43, 1507,
	45, 1507,
	46, 1507,
	47, 1507,
	48, 1507,
	49, 1507,
	52, 1507,
	53, 1507,
	54, 1507,
	56, 1507,
	57, 1507,
	58, 1507,
	61, 1507,
	62, 1507,
	63, 1507,
	64, 1507,
	65, 1507,
	66, 1507,
	67, 1507,
	68, 1507,
	70, 1507,
	71, 1507,
	72, 1507,
	73, 1507,
	75, 1507,
	76, 1507,
	77, 1507,
	78, 1507,
	86, 1507,
	87, 1507,
	88, 1507,
	89, 1507,
	90, 1507,
	91, 1507,
	92, 1507,
	93, 1507,
	95, 1507,
	97, 1507,
	99, 1507,
	102, 1507,
	103, 1507,
	105, 1507,
	109, 1507,
	110, 1507,
	111, 1507,
	112, 1507,
	113, 1507,
	114, 1507,
	115, 1507,
	119, 1507,
	120, 1507,
	121, 1507,
	122, 1507,
	123, 1507,
	124, 1507,
	125, 1507,
	126, 1507,
	127, 1507,
	128, 1507,
	129, 1507,
	131, 1507,
	134, 1507,
	136, 1507,
	137, 1507,
	139, 1507,
	142, 1507,
	143, 1507,
	144, 1507,
	145, 1507,
	146, 1507,
	147, 1507,
	148, 1507,
	149, 1507,
	150, 1507,
	151, 1507,
	153, 1507,
	155, 1507,
	156, 1507,
	157, 1507,
	158, 1507,
	159, 1507,
	160, 1507,
	161, 1507,
	162, 1507,
	163, 1507,
	165, 1507,
	167, 1507,
	168, 1507,
	169, 1507,
	170, 1507,
	171, 1507,
	172, 1507,
	173, 1507,
	174, 1507,
	175, 1507,
	176, 1507,
	178, 1507,
	179, 1507,
	181, 1507,
	182, 1507,
	183, 1507,
	184, 1507,
	185, 1507,
	187, 1507,
	188, 1507,
	191, 1507,
	192, 1507,
	193, 1507,
	195, 1507,
	196, 1507,
	197, 1507,
	198, 1507,
	199, 1507,
	200, 1507,
	201, 1507,
	202, 1507,
	203, 1507,
	204, 1507,
	208, 1507,
	209, 1507,
	210, 1507,
	211, 1507,
	212, 1507,
	214, 1507,
	217, 1507,
	218, 1507,
	220, 1507,
	221, 1507,
	223, 1507,
	225, 1507,
	226, 1507,
	227, 1507,
	228, 1507,
	229, 1507,
	230, 1507,
	231, 1507,
	233, 1507,
	234, 1507,
	235, 1507,
	236, 1507,
	237, 1507,
	239, 1507,
	240, 1507,
	241, 1507,
	242, 1507,
	243, 1507,
	244, 1507,
	245, 1507,
	246, 1507,
	248, 1507,
	249, 1507,
	250, 1507,
	251, 1507,
	252, 1507,
	253, 1507,
	254, 1507,
	255, 1507,
	256, 1507,
	257, 1507,
	258, 1507,
	259, 1507,
	260, 1507,
	262, 1507,
	263, 1507,
	264, 1507,
	265, 1507,
	266, 1507,
	267, 1507,
	268, 1507,
	269, 1507,
	270, 1507,
	271, 1507,
	272, 1507,
	273, 1507,
	275, 1507,
	276, 1507,
	277, 1507,
	278, 1507,
	279, 1507,
	281, 1507,
	282, 1507,
	283, 1507,
	284, 1507,
	285, 1507,
	286, 1507,
	287, 1507,
	288, 1507,
	289, 1507,
	291, 1507,
	292, 1507,
	293, 1507,
	294, 1507,
	295, 1507,
	296, 1507,
	297, 1507,
	298, 1507,
	299, 1507,
	300, 1507,
	301, 1507,
	303, 1507,
	305, 1507,
	306, 1507,
	307, 1507,
	308, 1507,
	309, 1507,
	310, 1507,
	311, 1507,
	312, 1507,
	314, 1507,
	315, 1507,
	316, 1507,
	319, 1507,
	320, 1507,
	321, 1507,
	322, 1507,
	324, 1507,
	325, 1507,
	326, 1507,
	327, 1507,
	330, 1507,
	331, 1507,
	332, 1507,
	333, 1507,
	335, 1507,
	337, 1507,
	338, 1507,
	339, 1507,
	340, 1507,
	341, 1507,
	342, 1507,
	345, 1507,
	350, 1507,
	351, 1507,
	352, 1507,
	353, 1507,
	354, 1507,
	355, 1507,
	356, 1507,
	358, 1507,
	359, 1507,
	360, 1507,
	361, 1507,
	362, 1507,
	363, 1507,
	365, 1507,
	366, 1507,
	367, 1507,
	368, 1507,
	369, 1507,
	370, 1507,
	371, 1507,
	372, 1507,
	373, 1507,
	375, 1507,
	378, 1507,
	379, 1507,
	382, 1507,
	383, 1507,
	-2, 0,
	-1, 969,
	133, 1408,
	317, 1408,
	360, 1408,
	379, 1408,
	-2, 0,
	-1, 986,
	133, 1431,
	317, 1431,
	360, 1431,
	379, 1431,
	-2, 0,
	-1, 987,
	168, 642,
	239, 642,
	243, 642,
	-2, 336,
	-1, 1055,
	118, 739,
	130, 739,
	186, 739,
	213, 739,
	-2, 700,
	-1, 1136,
	108, 705,
	118, 705,
	130, 705,
	164, 705,
	186, 705,
	213, 705,
	219, 705,
	328, 705,
	-2, 1054,
	-1, 1146,
	377, 1250,
	-2, 1238,
	-1, 1164,
	378, 1167,
	-2, 0,
	-1, 1188,
	168, 642,
	239, 642,
	243, 642,
	-2, 637,
	-1, 1216,
	378, 1167,
	-2, 0,
	-1, 1220,
	108, 705,
	118, 705,
	130, 705,
	164, 705,
	186, 705,
	213, 705,
	219, 705,
	328, 705,
	-2, 806,
	-1, 1364,
	168, 642,
	239, 642,
	243, 642,
	-2, 338,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 959,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 960,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 961,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 962,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 963,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 964,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 965,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 966,
	-1, 1488,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 975,
	-1, 1489,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 976,
	-1, 1490,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 977,
	-1, 1493,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 982,
	-1, 1499,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 984,
	-1, 1501,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 988,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 989,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 990,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 991,
	-1, 1573,
	133, 1178,
	377, 1273,
	-2, 1266,
	-1, 1574,
	133, 1179,
	-2, 1448,
	-1, 1575,
	133, 1180,
	-2, 1352,
	-1, 1576,
	133, 1181,
	-2, 1313,
	-1, 1577,
	133, 1182,
	-2, 1330,
	-1, 1578,
	133, 1183,
	-2, 1351,
	-1, 1579,
	133, 1184,
	-2, 1405,
	-1, 1656,
	1, 807,
	75, 807,
	108, 807,
	118, 807,
	130, 807,
	134, 807,
	138, 807,
	140, 807,
	155, 807,
	164, 807,
	171, 807,
	182, 807,
	186, 807,
	200, 807,
	213, 807,
	215, 807,
	219, 807,
	261, 807,
	263, 807,
	328, 807,
	336, 807,
	347, 807,
	348, 807,
	357, 807,
	376, 807,
	378, 807,
	380, 807,
	381, 807,
	382, 807,
	-2, 806,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 983,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 985,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 986,
	-1, 1833,
	224, 1138,
	-2, 1140,
	-1, 2009,
	229, 728,
	-2, 572,
	-1, 2067,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 987,
	-1, 2072,
	167, 0,
	-2, 1003,
	-1, 2081,
	224, 1139,
	-2, 1141,
	-1, 2123,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1031,
	-1, 2124,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1032,
	-1, 2125,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1033,
	-1, 2129,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1037,
	-1, 2130,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1038,
	-1, 2131,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1039,
	-1, 2270,
	167, 0,
	-2, 1004,
	-1, 2273,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1007,
	-1, 2274,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1009,
	-1, 2400,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1008,
	-1, 2401,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1010,
	-1, 2408,
	167, 0,
	-2, 1040,
	-1, 2486,
	167, 0,
	-2, 1041,
	-1, 2569,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1451,
	-1, 2654,
	377, 1519,
	-2, 512,
}

const sqlPrivate = 57344

const sqlLast = 43898

var sqlAct = [...]int{

	659, 2366, 2637, 2651, 2365, 2652, 2568, 2618, 2635, 2577,
	2217, 2541, 2578, 1725, 2579, 2046, 2434, 2567, 1704, 1733,
	1262, 2100, 943, 2491, 2376, 2228, 786, 2338, 1270, 1305,
	2324, 2257, 1803, 2250, 2183, 2015, 603, 903, 2414, 185,
	1651, 2252, 2013, 1708, 185, 1703, 2021, 1722, 185, 657,
	1948, 656, 2244, 1214, 185, 1734, 1927, 946, 1899, 185,
	185, 2304, 1516, 185, 1265, 1935, 185, 1197, 2182, 1264,
	1707, 1660, 1669, 1446, 185, 2153, 635, 1451, 186, 452,
	1652, 1697, 1898, 611, 110, 1844, 1782, 1142, 1553, 1799,
	1528, 1389, 990, 649, 1258, 527, 1060, 1226, 1228, 1198,
	1529, 1513, 1385, 1537, 1602, 1429, 63, 1427, 449, 768,
	939, 989, 470, 26, 1547, 1178, 1218, 1174, 1705, 936,
	788, 801, 1711, 951, 1727, 1283, 929, 771, 1205, 751,
	1625, 627, 507, 1131, 1638, 115, 1569, 1061, 110, 651,
	185, 185, 116, 524, 1388, 1188, 1430, 176, 185, 1428,
	1223, 485, 520, 1277, 749, 926, 181, 1187, 2339, 1065,
	1832, 2167, 1285, 548, 2168, 1285, 2367, 2367, 1285, 1726,
	607, 185, 185, 791, 185, 185, 803, 607, 2667, 2666,
	185, 185, 2660, 2660, 2659, 2614, 2613, 2612, 2660, 1253,
	1253, 1253, 2594, 2589, 2588, 1215, 2337, 1632, 1632, 891,
	2065, 2585, 602, 1698, 2030, 1253, 2565, 499, 2564, 2536,
	1295, 617, 1295, 1759, 2531, 2530, 2529, 2525, 1253, 1253,
	2390, 1253, 2031, 2517, 608, 1076, 1077, 2337, 2156, 2488,
	784, 2465, 110, 1759, 2462, 2337, 2460, 2445, 1253, 2444,
	2337, 1253, 1627, 2337, 2422, 1249, 596, 2672, 1253, 1079,
	2658, 792, 2419, 595, 804, 2402, 1253, 1632, 2361, 1759,
	2537, 26, 1632, 2358, 1306, 2336, 2317, 1632, 2272, 2337,
	1253, 2243, 1759, 1078, 2238, 1702, 1295, 2394, 1702, 2163,
	776, 780, 612, 2164, 2076, 798, 2040, 2001, 1632, 1924,
	2002, 1253, 652, 1632, 755, 753, 756, 1923, 765, 1076,
	1077, 1253, 1106, 1107, 1108, 1116, 1117, 1118, 2390, 1916,
	1914, 1755, 1094, 1917, 1632, 1913, 1109, 1698, 2156, 1632,
	2668, 2648, 38, 1079, 1912, 1836, 1120, 1626, 1632, 2056,
	1769, 1837, 1758, 1632, 1632, 41, 1759, 1869, 1870, 610,
	1843, 1748, 1295, 1084, 1550, 1632, 1658, 1078, 1701, 1076,
	1077, 145, 1702, 1098, 1631, 1116, 1117, 1118, 1632, 1298,
	1095, 1756, 2136, 1299, 1076, 1077, 2078, 2002, 1802, 1780,
	1367, 1192, 1286, 1079, 1532, 1286, 1120, 1253, 1286, 889,
	971, 147, 148, 968, 967, 966, 145, 965, 1079, 964,
	1757, 963, 962, 961, 2340, 960, 1551, 1078, 959, 480,
	1386, 958, 957, 1098, 956, 955, 954, 1099, 1101, 1102,
	1103, 1104, 1078, 757, 754, 601, 147, 1084, 146, 600,
	599, 185, 791, 185, 598, 185, 139, 594, 185, 593,
	592, 56, 591, 140, 185, 1869, 1870, 1113, 1121, 590,
	587, 586, 585, 185, 185, 185, 185, 791, 1552, 1549,
	584, 580, 791, 146, 117, 1875, 1119, 895, 1101, 1102,
	1103, 1104, 579, 578, 546, 545, 544, 1084, 543, 1943,
	542, 2030, 541, 540, 1111, 1076, 1077, 539, 538, 909,
	185, 1099, 1084, 1100, 537, 536, 535, 1113, 1121, 117,
	534, 1626, 1869, 1870, 185, 1291, 1566, 533, 1284, 1079,
	792, 1420, 532, 531, 530, 1869, 1870, 1110, 515, 514,
	185, 513, 512, 511, 440, 418, 907, 57, 912, 1885,
	185, 1730, 411, 1078, 1111, 792, 1554, 410, 168, 167,
	792, 1099, 166, 165, 164, 163, 162, 161, 932, 932,
	160, 159, 1105, 928, 118, 59, 1099, 60, 158, 157,
	156, 791, 155, 1875, 154, 153, 152, 1100, 608, 1884,
	151, 145, 150, 149, 1392, 1002, 1564, 1562, 479, 1560,
	933, 93, 952, 2641, 1114, 902, 1219, 2639, 2584, 2636,
	1093, 2566, 185, 1080, 1081, 1082, 1083, 1085, 1086, 972,
	2551, 147, 1105, 1084, 2546, 1886, 2483, 2463, 1072, 1869,
	1870, 2303, 1887, 1888, 1889, 2383, 1548, 1100, 1005, 2397,
	1875, 145, 2302, 2395, 2298, 2297, 2269, 2290, 2289, 2288,
	1000, 2284, 1100, 1875, 1114, 2283, 1869, 1870, 146, 792,
	1764, 1302, 1056, 2282, 2281, 2275, 139, 2249, 2150, 2145,
	2144, 147, 2143, 140, 1112, 2086, 2000, 1090, 1091, 1097,
	1096, 1092, 1115, 1884, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 2004, 117, 764, 1955, 987, 1951, 1921,
	1918, 2299, 984, 1906, 1897, 1868, 1865, 1864, 146, 1862,
	1849, 1055, 1848, 1833, 1656, 1072, 139, 1885, 1524, 1150,
	1143, 1051, 1134, 140, 1112, 1871, 1872, 1873, 1874, 1876,
	1877, 145, 1115, 1071, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 1003, 117, 895, 2044, 1875, 2661, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 2657, 1217,
	2646, 147, 900, 2626, 2625, 1269, 1216, 2102, 1869, 1870,
	608, 1887, 1888, 1889, 1875, 2556, 2555, 596, 2554, 185,
	1057, 185, 2520, 1058, 595, 2268, 1890, 2512, 2511, 2502,
	2500, 1387, 1798, 1886, 2475, 1068, 1069, 2382, 146, 2474,
	1797, 1518, 2431, 185, 185, 2410, 139, 1073, 2391, 2370,
	2357, 1885, 2343, 140, 2295, 2226, 2223, 2222, 2220, 2191,
	2190, 2171, 1884, 1871, 1872, 1873, 1874, 1876, 1877, 1525,
	2159, 2071, 2494, 1146, 1729, 1990, 1982, 1968, 1885, 1967,
	1203, 1953, 1176, 1177, 1180, 1922, 1896, 1858, 1857, 1854,
	1829, 1824, 1076, 1077, 1183, 1179, 1182, 1201, 1643, 1614,
	1558, 1261, 1196, 1080, 1081, 1082, 1083, 1085, 1086, 2389,
	1941, 1195, 1698, 1186, 1172, 1171, 1079, 1170, 1169, 1168,
	1167, 110, 1873, 1874, 1876, 1877, 1875, 1886, 1166, 2277,
	1880, 1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877, 1165,
	1078, 1373, 1565, 1164, 1163, 1162, 1213, 1161, 1160, 608,
	1159, 1191, 1158, 1157, 1886, 1156, 1155, 1154, 1968, 791,
	185, 1147, 1135, 1134, 983, 1890, 803, 1189, 975, 948,
	1221, 2248, 185, 2166, 2162, 1193, 1835, 1377, 1376, 1644,
	1386, 1383, 1761, 1143, 2042, 185, 1132, 1076, 1077, 1217,
	1885, 185, 1236, 185, 999, 185, 1768, 1054, 2016, 185,
	619, 2393, 2392, 1268, 1303, 2386, 2169, 2032, 1869, 1870,
	1260, 1079, 1563, 1561, 1219, 1559, 1251, 1881, 1882, 1883,
	1993, 1987, 1981, 1550, 1880, 1878, 1879, 1871, 1872, 1873,
	1874, 1876, 1877, 1049, 2398, 1078, 1920, 792, 2396, 1767,
	185, 185, 1919, 1184, 804, 1808, 901, 791, 1185, 185,
	1274, 1424, 185, 1879, 1871, 1872, 1873, 1874, 1876, 1877,
	996, 1152, 2047, 1266, 1986, 1790, 1886, 1380, 1240, 1359,
	2415, 1726, 1538, 803, 2103, 1551, 1840, 1374, 185, 1175,
	2644, 1043, 2643, 185, 2026, 2178, 2549, 1254, 185, 185,
	173, 185, 1752, 185, 419, 185, 446, 185, 421, 1229,
	928, 441, 1230, 172, 2524, 1084, 2609, 1431, 185, 2351,
	763, 2610, 1770, 2053, 185, 185, 1252, 1035, 2456, 1229,
	717, 1044, 1230, 185, 744, 792, 1662, 1552, 1549, 1288,
	1670, 1149, 1290, 742, 2455, 2202, 1293, 2453, 1353, 716,
	2452, 746, 2211, 740, 430, 185, 1276, 737, 1279, 803,
	1237, 804, 2207, 1662, 174, 2043, 1881, 1882, 1883, 2175,
	2174, 1381, 1661, 1880, 1878, 1879, 1871, 1872, 1873, 1874,
	1876, 1877, 1234, 1394, 1853, 1852, 169, 1851, 997, 445,
	424, 1231, 1850, 1811, 1751, 1693, 110, 445, 1300, 1689,
	1235, 1684, 984, 1301, 1393, 1361, 1360, 1229, 1500, 2364,
	1230, 1231, 1364, 431, 606, 1554, 1378, 1673, 715, 1190,
	888, 1408, 1723, 1390, 1618, 1869, 1870, 1617, 1461, 621,
	2655, 998, 1418, 1417, 1052, 2215, 1398, 804, 1433, 2523,
	2216, 582, 1402, 1515, 1403, 1401, 1404, 1997, 1405, 2436,
	1406, 1256, 1587, 444, 175, 589, 1419, 1515, 494, 1247,
	1217, 444, 2562, 424, 1260, 1086, 588, 1412, 1414, 1280,
	605, 185, 173, 185, 1554, 1246, 185, 2533, 1432, 589,
	1460, 596, 1397, 1425, 596, 596, 1426, 185, 1442, 1231,
	2023, 1443, 1444, 1029, 1623, 1548, 803, 1244, 1450, 185,
	2601, 1773, 2534, 185, 896, 898, 185, 2054, 2024, 1075,
	185, 1535, 2193, 1775, 185, 1245, 170, 982, 439, 1992,
	185, 608, 791, 1672, 1533, 607, 608, 1522, 1538, 185,
	803, 2059, 1030, 1520, 185, 1776, 174, 1762, 434, 1053,
	2096, 1523, 185, 1875, 1526, 1597, 172, 1774, 1312, 1242,
	185, 1387, 1384, 1663, 2023, 2609, 171, 1082, 1083, 1085,
	1086, 185, 1979, 185, 1984, 185, 1800, 1801, 185, 1382,
	185, 1238, 185, 185, 804, 185, 791, 791, 1580, 1687,
	791, 1877, 1674, 1676, 185, 1416, 973, 2052, 433, 432,
	2505, 793, 977, 2200, 805, 1048, 1173, 1649, 1042, 1747,
	792, 2628, 1621, 1620, 1008, 443, 420, 1885, 804, 608,
	2208, 1645, 1630, 443, 1671, 1204, 1636, 1646, 1554, 619,
	1659, 1452, 1459, 1679, 1640, 1641, 175, 1232, 1681, 1685,
	1221, 425, 1666, 1746, 604, 446, 421, 1635, 1691, 1694,
	1227, 1717, 1686, 446, 1034, 442, 422, 1232, 1285, 1312,
	1312, 1695, 738, 442, 792, 792, 477, 2638, 792, 2600,
	1740, 738, 110, 932, 1754, 932, 748, 38, 110, 747,
	1728, 739, 1728, 803, 1208, 738, 2437, 2093, 2581, 420,
	41, 185, 1743, 1886, 1732, 2058, 664, 1749, 170, 1497,
	2194, 1243, 1744, 2513, 1741, 1211, 1742, 185, 185, 185,
	952, 185, 1753, 1750, 425, 2636, 476, 1763, 1129, 421,
	2406, 1206, 1813, 1124, 1125, 1126, 1127, 1128, 172, 422,
	1821, 1765, 1209, 2367, 1137, 1232, 1514, 2459, 171, 2094,
	185, 1365, 1856, 2259, 1145, 478, 1819, 1180, 1655, 1183,
	1207, 1511, 53, 583, 480, 54, 1639, 2060, 2514, 435,
	614, 804, 573, 1177, 1176, 1937, 607, 1509, 1771, 573,
	493, 2580, 2057, 1396, 1039, 2599, 2264, 1064, 2621, 1016,
	616, 2582, 2608, 110, 2606, 2375, 56, 616, 1720, 978,
	1880, 1878, 1879, 1871, 1872, 1873, 1874, 1876, 1877, 1074,
	970, 436, 486, 1996, 1781, 1521, 2447, 981, 1785, 504,
	1495, 1498, 993, 1210, 615, 2446, 482, 1554, 1787, 412,
	1789, 2629, 1794, 1793, 2293, 491, 2258, 1816, 2634, 483,
	1796, 487, 437, 2429, 438, 2332, 483, 1817, 2325, 2497,
	2583, 1822, 2177, 2132, 1063, 1040, 574, 1494, 1505, 2323,
	793, 1814, 1009, 574, 2327, 988, 1506, 1964, 1507, 1199,
	1199, 1208, 1512, 488, 1960, 1721, 1275, 1842, 1286, 1267,
	1263, 1949, 57, 2092, 2333, 793, 2542, 1411, 1372, 1368,
	793, 486, 1211, 994, 490, 1438, 1936, 995, 486, 1812,
	2347, 1010, 2647, 1063, 1007, 2229, 178, 2326, 1637, 118,
	59, 1041, 60, 2377, 491, 2260, 905, 993, 904, 1209,
	487, 491, 1062, 1938, 719, 608, 145, 487, 185, 803,
	1784, 1869, 1870, 479, 185, 185, 93, 1370, 185, 1925,
	1839, 2619, 605, 185, 1931, 2294, 185, 2430, 1970, 1064,
	1371, 2633, 488, 1950, 185, 1204, 147, 1496, 2133, 488,
	185, 185, 185, 1818, 2134, 1969, 185, 575, 1806, 185,
	1820, 1062, 1439, 490, 575, 185, 185, 185, 185, 185,
	490, 1634, 1633, 502, 1508, 185, 1945, 791, 994, 793,
	185, 1510, 995, 146, 803, 2328, 413, 2329, 2620, 608,
	1210, 139, 1017, 185, 1903, 1904, 1905, 804, 140, 1961,
	496, 2346, 489, 185, 1208, 185, 993, 185, 791, 791,
	2622, 185, 925, 1940, 718, 185, 1926, 914, 2331, 117,
	185, 993, 185, 2218, 1004, 1211, 573, 2334, 2350, 185,
	2368, 2003, 1995, 2005, 1985, 2349, 613, 2305, 576, 1875,
	1930, 1206, 185, 791, 616, 576, 2154, 1956, 2427, 1038,
	1557, 1944, 1209, 2409, 2292, 792, 2214, 185, 414, 492,
	923, 1063, 804, 1954, 1901, 2008, 2009, 1978, 1929, 2028,
	1207, 1900, 577, 1059, 1933, 1934, 890, 2428, 1939, 577,
	2070, 489, 1998, 1980, 1863, 1823, 792, 792, 489, 893,
	1766, 894, 994, 1989, 475, 34, 995, 185, 619, 619,
	2039, 1700, 2007, 1885, 1059, 1991, 474, 33, 1692, 2330,
	574, 1027, 2019, 1683, 2025, 473, 30, 1047, 2006, 1046,
	976, 792, 2010, 2033, 472, 69, 608, 3, 2038, 1062,
	1791, 1409, 1400, 1210, 1153, 1556, 2576, 1250, 492, 2539,
	501, 661, 2321, 2048, 2073, 492, 2348, 185, 2198, 2049,
	2050, 2196, 2176, 2051, 2012, 1025, 1064, 2034, 2035, 1724,
	2036, 2037, 2055, 1435, 1718, 1440, 2063, 495, 1716, 1296,
	1023, 1447, 2088, 2089, 2090, 2061, 924, 471, 68, 1886,
	1037, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 2079, 1499, 2082, 1501, 1502, 1503, 1504,
	2077, 575, 1965, 1530, 922, 468, 22, 1294, 2106, 185,
	2095, 2097, 2098, 1527, 2104, 185, 1033, 2111, 736, 2109,
	1137, 1292, 1026, 34, 185, 185, 2332, 2138, 469, 23,
	1312, 467, 28, 466, 20, 33, 1289, 464, 19, 1567,
	1568, 1965, 2172, 1584, 30, 1596, 1598, 1603, 1606, 1607,
	1608, 1287, 2139, 69, 1248, 2165, 774, 1878, 1879, 1871,
	1872, 1873, 1874, 1876, 1877, 2333, 1024, 2137, 1021, 1312,
	2158, 1241, 2152, 185, 1239, 185, 110, 2157, 1233, 2155,
	2213, 1022, 576, 185, 1019, 2083, 791, 2014, 2188, 1013,
	2187, 921, 2470, 2610, 2041, 2388, 1347, 793, 2224, 2387,
	1391, 185, 185, 2221, 805, 2173, 68, 465, 18, 2180,
	456, 15, 2231, 2239, 2245, 1346, 577, 2472, 185, 1678,
	2230, 2201, 1312, 2237, 1804, 457, 16, 185, 2203, 803,
	185, 185, 2189, 760, 2209, 2233, 803, 1696, 2170, 2234,
	2212, 741, 743, 2219, 1032, 2204, 463, 51, 1066, 2225,
	634, 2204, 2232, 761, 22, 1688, 2240, 2204, 2241, 2161,
	1682, 2235, 1792, 2246, 792, 455, 50, 2266, 462, 12,
	2197, 2271, 2199, 185, 461, 44, 2328, 23, 2329, 2507,
	28, 481, 20, 454, 45, 793, 19, 1312, 460, 7,
	1805, 2340, 459, 6, 415, 1452, 2107, 1347, 1347, 1020,
	458, 36, 453, 35, 1452, 2112, 2485, 804, 1690, 2331,
	1662, 805, 1662, 1011, 804, 1018, 1346, 1346, 2334, 1677,
	1012, 1675, 920, 1312, 1312, 2458, 1067, 185, 1422, 1423,
	185, 762, 1312, 1312, 2306, 1070, 1680, 2142, 2291, 2538,
	803, 185, 185, 503, 2373, 185, 185, 185, 2309, 1731,
	2261, 1719, 1929, 1715, 1076, 1077, 18, 2267, 1622, 15,
	2316, 1363, 185, 1304, 2617, 1312, 2632, 185, 2421, 185,
	2311, 185, 185, 185, 16, 1869, 1870, 2247, 185, 791,
	2345, 2315, 803, 2341, 1441, 791, 2310, 805, 2312, 2308,
	2320, 1076, 1077, 185, 185, 51, 1076, 1077, 769, 2151,
	2330, 791, 1078, 1778, 1777, 2099, 1778, 2363, 2045, 1946,
	2188, 2371, 2187, 1915, 50, 1779, 1619, 12, 804, 1616,
	1079, 778, 782, 44, 1615, 800, 1546, 2379, 1140, 2344,
	2279, 2091, 45, 1150, 1148, 2378, 2360, 7, 1045, 2372,
	2188, 6, 2187, 1036, 1078, 1031, 2188, 1028, 2187, 36,
	2380, 35, 1014, 980, 2189, 1366, 2385, 792, 581, 2369,
	804, 2313, 2435, 792, 484, 2374, 1399, 1015, 1942, 1642,
	2399, 2532, 2285, 1855, 2490, 1809, 1810, 2307, 2405, 792,
	1555, 1815, 1151, 1588, 2189, 48, 2185, 2404, 638, 2322,
	2189, 2179, 185, 1710, 185, 2411, 803, 185, 1709, 806,
	1828, 1375, 660, 2362, 1571, 185, 1453, 735, 662, 1309,
	663, 803, 1310, 1834, 1181, 650, 1307, 2418, 949, 1841,
	1735, 2384, 1845, 1379, 805, 1519, 1536, 1838, 1144, 630,
	642, 641, 1534, 974, 1312, 2423, 629, 1947, 2022, 1859,
	644, 2439, 2438, 2381, 2441, 1437, 185, 1260, 1795, 791,
	793, 1434, 1311, 185, 2018, 2195, 423, 2188, 805, 2187,
	1866, 185, 185, 791, 791, 947, 1594, 185, 1586, 185,
	1582, 2471, 1050, 1137, 804, 2468, 1130, 1736, 1001, 182,
	1603, 1603, 1603, 2467, 416, 2481, 185, 2482, 426, 804,
	2188, 185, 2187, 2469, 447, 2477, 2480, 2420, 185, 497,
	182, 2189, 2476, 505, 793, 793, 510, 1199, 793, 2461,
	2487, 2457, 2484, 1932, 529, 2501, 2029, 2425, 1760, 2473,
	2478, 2479, 1194, 185, 185, 2495, 2496, 792, 2204, 1445,
	185, 2493, 2440, 759, 2189, 758, 2645, 1369, 791, 1772,
	2503, 792, 792, 185, 2518, 791, 791, 2516, 2450, 2451,
	2504, 1123, 2519, 1311, 1311, 1122, 2464, 745, 2499, 992,
	991, 2510, 1963, 2627, 2521, 2522, 2506, 2527, 2528, 2192,
	2548, 185, 144, 185, 141, 143, 185, 142, 803, 1994,
	752, 752, 72, 32, 782, 31, 92, 91, 416, 90,
	89, 2544, 88, 87, 86, 800, 85, 2557, 84, 83,
	2559, 805, 82, 81, 2558, 80, 2545, 2020, 185, 2563,
	79, 416, 416, 78, 796, 416, 792, 2561, 77, 76,
	182, 892, 2573, 792, 792, 185, 185, 185, 75, 74,
	2575, 2574, 525, 185, 522, 71, 70, 1138, 2586, 2593,
	2188, 29, 2187, 2590, 2591, 2592, 2598, 185, 619, 619,
	2596, 2597, 2595, 25, 96, 24, 804, 67, 1312, 2560,
	66, 619, 2607, 2605, 27, 17, 11, 21, 2611, 114,
	1349, 113, 112, 111, 14, 13, 109, 108, 2062, 2616,
	107, 2615, 106, 1447, 2189, 105, 2449, 10, 2623, 2066,
	9, 2624, 2067, 95, 2631, 2256, 2630, 42, 8, 2550,
	40, 39, 94, 135, 2072, 132, 134, 803, 131, 803,
	133, 103, 137, 2080, 1312, 136, 129, 2649, 127, 128,
	2650, 2084, 130, 126, 1932, 125, 138, 2656, 102, 101,
	100, 2662, 782, 1588, 1588, 2665, 2664, 2663, 99, 2669,
	98, 2671, 2670, 5, 2108, 2673, 2, 1, 2110, 0,
	0, 0, 0, 0, 0, 0, 1825, 1826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1202, 0, 0,
	1348, 1349, 1349, 1312, 0, 0, 0, 0, 0, 0,
	0, 2140, 2141, 0, 0, 804, 0, 804, 1347, 0,
	2147, 2148, 2149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 1588,
	1588, 1588, 0, 0, 0, 0, 0, 0, 2160, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 2640, 0,
	2642, 0, 1892, 1893, 1894, 0, 0, 805, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 0, 2181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 529, 0, 915, 0, 0, 918, 0,
	0, 1348, 1348, 0, 416, 0, 0, 0, 0, 0,
	1347, 0, 0, 529, 529, 416, 940, 1076, 1077, 0,
	0, 0, 0, 0, 0, 793, 0, 1308, 0, 1346,
	0, 0, 805, 0, 1199, 0, 0, 0, 0, 0,
	0, 1079, 0, 2242, 0, 0, 0, 0, 0, 0,
	529, 0, 0, 769, 1224, 0, 793, 793, 0, 0,
	0, 0, 0, 0, 529, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 0,
	979, 2270, 1297, 0, 0, 2273, 2274, 0, 0, 2276,
	529, 793, 477, 0, 1346, 0, 2278, 0, 2280, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 1347, 1347, 0, 2287, 0, 41, 1362, 0, 0,
	1347, 1347, 0, 0, 0, 0, 0, 0, 1308, 1308,
	1346, 1346, 0, 0, 0, 1084, 0, 0, 0, 1346,
	1346, 0, 476, 0, 0, 0, 0, 2296, 0, 0,
	0, 0, 416, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 1588, 1588, 0, 1076, 1077, 0, 0, 0,
	0, 478, 1346, 0, 0, 0, 0, 0, 53, 0,
	480, 54, 1259, 0, 0, 2068, 2069, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 2342, 0, 1099,
	0, 782, 0, 1278, 0, 1278, 0, 0, 0, 0,
	0, 0, 56, 1078, 0, 0, 0, 0, 0, 0,
	0, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
	1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
	0, 1588, 0, 0, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 0, 2135, 0, 0, 0, 0, 0,
	0, 0, 0, 1138, 1311, 1100, 0, 0, 0, 2400,
	2401, 1540, 0, 1084, 0, 639, 64, 0, 0, 0,
	0, 0, 0, 0, 1572, 1572, 1585, 0, 57, 0,
	1605, 0, 0, 0, 1609, 1610, 1612, 0, 0, 0,
	2413, 0, 0, 1311, 0, 0, 2416, 0, 0, 510,
	0, 752, 1347, 0, 0, 118, 59, 0, 60, 0,
	1624, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	64, 1346, 145, 416, 416, 0, 1407, 1099, 0, 479,
	0, 0, 93, 0, 793, 0, 0, 0, 0, 0,
	2448, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 147, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 805, 0, 0,
	0, 0, 0, 609, 805, 0, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 1100, 140, 0, 0, 0, 0, 0,
	0, 1311, 0, 770, 64, 0, 0, 0, 0, 0,
	0, 0, 2498, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 1311, 1311, 0,
	0, 0, 416, 0, 0, 0, 1311, 1311, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 769, 0, 0,
	0, 416, 1349, 416, 0, 416, 0, 0, 0, 1281,
	0, 0, 0, 769, 0, 0, 1657, 0, 805, 1311,
	0, 0, 0, 0, 782, 0, 0, 0, 0, 0,
	782, 0, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 800,
	0, 1349, 1869, 1870, 0, 1887, 1888, 1889, 0, 0,
	529, 182, 0, 0, 2572, 2572, 1347, 793, 0, 182,
	805, 0, 529, 793, 0, 0, 0, 0, 0, 0,
	2587, 1737, 0, 0, 0, 1346, 0, 0, 0, 793,
	0, 0, 800, 800, 0, 0, 0, 0, 529, 0,
	2572, 0, 0, 529, 1349, 0, 1884, 0, 182, 529,
	0, 529, 1348, 529, 0, 529, 0, 529, 0, 0,
	0, 0, 1347, 0, 0, 0, 0, 0, 1410, 0,
	0, 0, 0, 0, 529, 529, 0, 0, 0, 0,
	0, 1346, 0, 416, 0, 0, 0, 0, 2572, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1588, 0, 0, 529, 0, 0, 0, 1349,
	1875, 0, 1827, 0, 0, 0, 0, 2653, 0, 1830,
	0, 1347, 0, 0, 805, 2408, 0, 0, 2653, 0,
	0, 2653, 2653, 0, 0, 0, 1846, 1847, 1311, 805,
	1346, 0, 0, 1588, 1348, 1349, 1349, 0, 0, 1890,
	0, 0, 0, 0, 1349, 1349, 0, 1786, 800, 1788,
	0, 782, 0, 0, 0, 0, 2432, 0, 0, 0,
	0, 0, 0, 0, 1885, 0, 0, 793, 0, 1308,
	0, 0, 0, 0, 0, 0, 1895, 1349, 0, 0,
	1807, 793, 793, 1605, 1605, 1605, 0, 609, 1908, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 1869, 1870, 0, 1887, 1888, 1889, 0, 1308, 1588,
	0, 510, 0, 752, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 416, 0, 0,
	0, 0, 2486, 0, 0, 1348, 1348, 0, 0, 1654,
	1886, 0, 0, 416, 1348, 1348, 416, 0, 1869, 1870,
	1667, 1887, 1888, 1889, 416, 1884, 793, 0, 0, 0,
	416, 1308, 0, 793, 793, 2075, 0, 0, 0, 416,
	0, 0, 0, 0, 1699, 0, 0, 1348, 0, 0,
	0, 0, 1706, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 416, 1884, 1739, 0, 529, 0, 0, 529, 0,
	529, 0, 416, 416, 0, 1745, 0, 0, 0, 1875,
	0, 0, 0, 0, 1667, 0, 1308, 0, 0, 0,
	1881, 1882, 1883, 0, 0, 0, 0, 1880, 1878, 1879,
	1871, 1872, 1873, 1874, 1876, 1877, 1349, 597, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 769, 0,
	0, 0, 1308, 1308, 769, 769, 1875, 1133, 769, 1136,
	0, 1308, 1308, 0, 0, 0, 1141, 0, 0, 0,
	0, 0, 0, 1885, 0, 0, 0, 0, 0, 0,
	1957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 1890, 0, 37, 1311, 0,
	0, 0, 0, 0, 0, 1983, 0, 0, 38, 120,
	0, 1783, 0, 0, 0, 805, 0, 805, 0, 0,
	1885, 41, 0, 1999, 0, 0, 0, 416, 416, 416,
	0, 416, 0, 0, 0, 122, 1348, 0, 0, 0,
	0, 2011, 0, 0, 0, 43, 0, 46, 0, 1886,
	1259, 0, 0, 0, 0, 0, 0, 1311, 0, 1259,
	416, 0, 0, 0, 0, 0, 0, 0, 47, 0,
	0, 0, 49, 0, 0, 0, 52, 0, 0, 123,
	0, 2146, 0, 53, 0, 104, 54, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 1886, 0, 1220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1881,
	1882, 1883, 0, 0, 0, 0, 1880, 1878, 1879, 1871,
	1872, 1873, 1874, 1876, 1877, 0, 2206, 0, 0, 0,
	1349, 0, 0, 1308, 2210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1881, 1882, 1883, 0,
	0, 0, 0, 1880, 1878, 1879, 1871, 1872, 1873, 1874,
	1876, 1877, 0, 57, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	118, 59, 0, 60, 0, 61, 0, 124, 416, 0,
	0, 1212, 62, 0, 416, 416, 0, 145, 416, 0,
	0, 0, 0, 1654, 73, 0, 1654, 93, 477, 769,
	1348, 0, 0, 0, 1952, 0, 0, 121, 0, 38,
	416, 1958, 1959, 0, 0, 1349, 1667, 147, 0, 1966,
	0, 0, 41, 0, 0, 1971, 1972, 1974, 1976, 1977,
	0, 0, 0, 0, 0, 416, 0, 97, 0, 0,
	1988, 0, 0, 0, 0, 0, 119, 0, 476, 0,
	0, 0, 0, 416, 146, 0, 1348, 0, 0, 0,
	0, 0, 139, 1273, 0, 1273, 0, 529, 0, 140,
	0, 416, 0, 0, 0, 2017, 0, 478, 0, 0,
	416, 0, 2027, 0, 53, 0, 480, 54, 0, 416,
	117, 1737, 769, 4, 0, 0, 0, 0, 64, 0,
	0, 0, 1783, 0, 1076, 1077, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 1783, 56, 0,
	0, 2263, 0, 0, 0, 0, 0, 1308, 1079, 0,
	0, 597, 0, 0, 597, 597, 0, 0, 0, 0,
	0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 0, 1078, 0, 0, 1094, 0, 416, 1098, 1109,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 1517, 0, 0,
	1078, 0, 0, 0, 0, 0, 1098, 0, 0, 0,
	609, 0, 0, 1095, 57, 1136, 0, 2101, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 769, 0, 0,
	2417, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 59, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 0, 0, 0, 145, 0,
	0, 1101, 1102, 1103, 1104, 479, 0, 2443, 93, 0,
	1084, 2354, 0, 0, 0, 0, 0, 0, 2359, 0,
	0, 2454, 770, 0, 0, 0, 0, 0, 147, 0,
	1113, 1121, 0, 0, 0, 0, 1099, 0, 1220, 416,
	0, 0, 0, 0, 0, 1654, 0, 0, 0, 1119,
	0, 64, 0, 0, 892, 1654, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 146, 0, 1111, 0, 2184,
	0, 0, 0, 139, 1099, 0, 0, 0, 0, 0,
	140, 0, 2205, 0, 0, 0, 0, 0, 2205, 0,
	0, 0, 0, 64, 2205, 64, 0, 1105, 0, 0,
	1110, 117, 0, 1667, 0, 1273, 0, 0, 0, 0,
	0, 0, 1100, 2227, 64, 0, 0, 0, 0, 450,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 416, 416, 0, 0, 1105, 0, 0, 0, 0,
	0, 477, 0, 0, 0, 2433, 0, 0, 2253, 2535,
	1100, 0, 38, 0, 0, 0, 0, 2255, 0, 0,
	2262, 416, 0, 0, 0, 41, 0, 1114, 0, 0,
	0, 0, 0, 1093, 0, 2552, 2553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2466, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2286, 0, 0, 0, 0, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0,
	478, 0, 0, 0, 0, 64, 0, 53, 0, 480,
	54, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 416, 0, 0,
	892, 56, 0, 0, 1911, 0, 0, 0, 0, 0,
	2515, 1654, 892, 0, 0, 2318, 2319, 1667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2184, 892, 0, 0, 0, 0, 2352, 0, 2353,
	0, 416, 2355, 2356, 0, 0, 0, 0, 416, 0,
	0, 0, 0, 0, 1517, 0, 2547, 0, 0, 0,
	0, 2184, 0, 892, 1706, 0, 0, 2184, 0, 0,
	0, 0, 0, 0, 1136, 0, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 57, 0, 1094,
	0, 0, 0, 1109, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1737, 118, 59, 0, 60, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	1098, 145, 0, 0, 0, 0, 0, 1095, 479, 0,
	0, 93, 1869, 1870, 0, 1887, 1888, 1889, 1136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2074,
	0, 147, 1667, 0, 2424, 0, 0, 2426, 0, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 2184, 0,
	0, 0, 0, 770, 0, 1101, 1102, 1103, 1104, 770,
	770, 0, 0, 770, 1084, 0, 1884, 0, 146, 0,
	0, 0, 0, 0, 0, 2205, 139, 0, 0, 0,
	0, 2184, 0, 140, 1113, 1121, 416, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 0,
	0, 2253, 2253, 1119, 451, 0, 64, 892, 0, 892,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 2492, 0, 1099, 0,
	1875, 1654, 0, 0, 0, 0, 0, 0, 1273, 0,
	0, 64, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 609, 0, 0, 0, 0,
	0, 0, 0, 2508, 2509, 0, 0, 0, 0, 1890,
	416, 0, 0, 0, 1076, 1077, 0, 1106, 1107, 1108,
	1116, 1117, 1118, 2526, 0, 0, 0, 1094, 0, 1105,
	0, 1109, 0, 0, 1885, 0, 0, 0, 1079, 0,
	0, 1120, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 2543, 0, 892, 0, 0, 416, 0, 0, 0,
	0, 1114, 1078, 0, 0, 0, 0, 1093, 1098, 0,
	0, 2184, 0, 0, 0, 1095, 0, 0, 477, 1869,
	1870, 0, 1887, 1888, 1889, 0, 0, 0, 2492, 38,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 892, 892, 892, 0, 0,
	1886, 0, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 2604, 476, 0,
	0, 1112, 1084, 1884, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 1113, 1121, 0, 0, 0, 478, 1910, 0,
	0, 0, 0, 0, 53, 0, 480, 54, 0, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 1111,
	0, 0, 0, 0, 0, 0, 1099, 1875, 56, 0,
	1881, 1882, 1883, 0, 770, 0, 0, 1880, 1878, 1879,
	1871, 1872, 1873, 1874, 1876, 1877, 0, 0, 1891, 0,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 1885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 1093, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 59, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 479, 0, 1886, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 1112,
	0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 1909, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 0, 1881, 1882, 1883,
	0, 117, 0, 0, 1880, 1878, 1879, 1871, 1872, 1873,
	1874, 1876, 1877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 807, 0, 189, 808, 809, 810, 811,
	351, 812, 813, 814, 815, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 816, 194, 358, 359, 195,
	196, 817, 818, 360, 361, 362, 819, 197, 363, 820,
	794, 821, 198, 199, 200, 0, 202, 203, 204, 201,
	822, 205, 0, 206, 207, 823, 720, 208, 209, 210,
	824, 825, 827, 826, 828, 829, 830, 211, 212, 417,
	213, 364, 214, 365, 366, 831, 215, 832, 216, 833,
	217, 834, 835, 218, 219, 836, 220, 837, 0, 838,
	367, 221, 223, 222, 224, 368, 369, 839, 721, 840,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 64,
	227, 841, 228, 842, 843, 722, 844, 229, 373, 845,
	374, 846, 1517, 230, 231, 232, 233, 375, 376, 724,
	847, 377, 237, 848, 234, 849, 723, 235, 378, 236,
	379, 380, 381, 382, 383, 850, 384, 851, 725, 238,
	239, 240, 726, 385, 386, 241, 242, 243, 852, 245,
	244, 853, 387, 727, 246, 247, 728, 854, 248, 249,
	855, 856, 250, 0, 251, 729, 252, 253, 255, 388,
	254, 730, 256, 257, 259, 258, 857, 858, 859, 389,
	260, 390, 261, 262, 860, 263, 861, 862, 264, 863,
	864, 265, 391, 731, 266, 732, 392, 267, 268, 269,
	270, 271, 272, 865, 273, 393, 274, 394, 275, 866,
	276, 277, 278, 279, 280, 395, 281, 282, 867, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 868, 295, 733, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 869, 308, 397, 307, 309,
	310, 870, 311, 299, 300, 312, 734, 313, 398, 399,
	314, 871, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 872, 322, 873, 323, 324, 325, 326,
	327, 328, 329, 330, 874, 402, 403, 404, 875, 876,
	331, 332, 405, 406, 877, 333, 334, 335, 336, 878,
	879, 337, 338, 339, 340, 880, 341, 881, 407, 342,
	343, 344, 408, 409, 882, 883, 345, 884, 885, 886,
	887, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1647, 0, 0, 0,
	0, 0, 187, 188, 807, 1648, 189, 808, 809, 810,
	811, 351, 812, 813, 814, 815, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 816, 194, 358, 359,
	195, 196, 817, 818, 360, 361, 362, 819, 197, 363,
	820, 794, 821, 198, 199, 200, 0, 202, 203, 204,
	201, 822, 205, 0, 206, 207, 823, 720, 208, 209,
	210, 824, 825, 827, 826, 828, 829, 830, 211, 212,
	417, 213, 364, 214, 365, 366, 831, 215, 832, 216,
	833, 217, 834, 835, 218, 219, 836, 220, 837, 0,
	838, 367, 221, 223, 222, 224, 368, 369, 839, 721,
	840, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 841, 228, 842, 843, 722, 844, 229, 373,
	845, 374, 846, 0, 230, 231, 232, 233, 375, 376,
	724, 847, 377, 237, 848, 234, 849, 723, 235, 378,
	236, 379, 380, 381, 382, 383, 850, 384, 851, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 852,
	245, 244, 853, 387, 727, 246, 247, 728, 854, 248,
	249, 855, 856, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 857, 858, 859,
	389, 260, 390, 261, 262, 860, 263, 861, 862, 264,
	863, 864, 265, 391, 731, 266, 732, 392, 267, 268,
	269, 270, 271, 272, 865, 273, 393, 274, 394, 275,
	866, 276, 277, 278, 279, 280, 395, 281, 282, 867,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 868, 295, 733, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 869, 308, 397, 307,
	309, 310, 870, 311, 299, 300, 312, 734, 313, 398,
	399, 314, 871, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 872, 322, 873, 323, 324, 325,
	326, 327, 328, 329, 330, 874, 402, 403, 404, 875,
	876, 331, 332, 405, 406, 877, 333, 334, 335, 336,
	878, 879, 337, 338, 339, 340, 880, 341, 881, 407,
	342, 343, 344, 408, 409, 882, 883, 345, 884, 885,
	886, 887, 346, 347, 348, 349, 350, 0, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 807, 2314, 189, 808,
	809, 810, 811, 351, 812, 813, 814, 815, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 816, 194,
	358, 359, 195, 196, 817, 818, 360, 361, 362, 819,
	197, 363, 820, 794, 821, 198, 199, 200, 0, 202,
	203, 204, 201, 822, 205, 0, 206, 207, 823, 720,
	208, 209, 210, 824, 825, 827, 826, 828, 829, 830,
	211, 212, 417, 213, 364, 214, 365, 366, 831, 215,
	832, 216, 833, 217, 834, 835, 218, 219, 836, 220,
	837, 0, 838, 367, 221, 223, 222, 224, 368, 369,
	839, 721, 840, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 841, 228, 842, 843, 722, 844,
	229, 373, 845, 374, 846, 0, 230, 231, 232, 233,
	375, 376, 724, 847, 377, 237, 848, 234, 849, 723,
	235, 378, 236, 379, 380, 381, 382, 383, 850, 384,
	851, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 852, 245, 244, 853, 387, 727, 246, 247, 728,
	854, 248, 249, 855, 856, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 857,
	858, 859, 389, 260, 390, 261, 262, 860, 263, 861,
	862, 264, 863, 864, 265, 391, 731, 266, 732, 392,
	267, 268, 269, 270, 271, 272, 865, 273, 393, 274,
	394, 275, 866, 276, 277, 278, 279, 280, 395, 281,
	282, 867, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 868, 295, 733, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 869, 308,
	397, 307, 309, 310, 870, 311, 299, 300, 312, 734,
	313, 398, 399, 314, 871, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 872, 322, 873, 323,
	324, 325, 326, 327, 328, 329, 330, 874, 402, 403,
	404, 875, 876, 331, 332, 405, 406, 877, 333, 334,
	335, 336, 878, 879, 337, 338, 339, 340, 880, 341,
	881, 407, 342, 343, 344, 408, 409, 882, 883, 345,
	884, 885, 886, 887, 346, 347, 348, 349, 350, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1255, 187, 188, 807, 0, 189,
	808, 809, 810, 811, 351, 812, 813, 814, 815, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 816,
	194, 358, 359, 195, 196, 817, 818, 360, 361, 362,
	819, 197, 363, 820, 794, 821, 198, 199, 200, 0,
	202, 203, 204, 201, 822, 205, 0, 206, 207, 823,
	720, 208, 209, 210, 824, 825, 827, 826, 828, 829,
	830, 211, 212, 417, 213, 364, 214, 365, 366, 831,
	215, 832, 216, 833, 217, 834, 835, 218, 219, 836,
	220, 837, 0, 838, 367, 221, 223, 222, 224, 368,
	369, 839, 721, 840, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 841, 228, 842, 843, 722,
	844, 229, 373, 845, 374, 846, 0, 230, 231, 232,
	233, 375, 376, 724, 847, 377, 237, 848, 234, 849,
	723, 235, 378, 236, 379, 380, 381, 382, 383, 850,
	384, 851, 725, 238, 239, 240, 726, 385, 386, 241,
	242, 243, 852, 245, 244, 853, 387, 727, 246, 247,
	728, 854, 248, 249, 855, 856, 250, 0, 251, 729,
	252, 253, 255, 388, 254, 730, 256, 257, 259, 258,
	857, 858, 859, 389, 260, 390, 261, 262, 860, 263,
	861, 862, 264, 863, 864, 265, 391, 731, 266, 732,
	392, 267, 268, 269, 270, 271, 272, 865, 273, 393,
	274, 394, 275, 866, 276, 277, 278, 279, 280, 395,
	281, 282, 867, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 868, 295, 733, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 869,
	308, 397, 307, 309, 310, 870, 311, 299, 300, 312,
	734, 313, 398, 399, 314, 871, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 872, 322, 873,
	323, 324, 325, 326, 327, 328, 329, 330, 874, 402,
	403, 404, 875, 876, 331, 332, 405, 406, 877, 333,
	334, 335, 336, 878, 879, 337, 338, 339, 340, 880,
	341, 881, 407, 342, 343, 344, 408, 409, 882, 883,
	345, 884, 885, 886, 887, 346, 347, 348, 349, 350,
	1545, 0, 658, 647, 648, 645, 646, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	1542, 0, 189, 0, 0, 0, 0, 675, 640, 0,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 1543, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 1541, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 0, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 622, 623, 1544, 0,
	0, 0, 0, 0, 0, 633, 1539, 0, 0, 0,
	610, 636, 658, 647, 648, 645, 646, 637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 675, 640, 0,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 145, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 147, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 953,
	714, 0, 0, 345, 0, 0, 0, 139, 346, 347,
	348, 349, 350, 626, 140, 0, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 622, 623, 658, 647,
	648, 645, 646, 637, 0, 1139, 0, 0, 0, 0,
	0, 636, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 675, 640, 0, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 145, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 147, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 953, 714, 0, 0, 345,
	0, 0, 0, 139, 346, 347, 348, 349, 350, 626,
	140, 0, 0, 0, 0, 0, 0, 624, 0, 0,
	0, 0, 622, 623, 658, 647, 648, 645, 646, 637,
	0, 1139, 0, 0, 0, 0, 0, 636, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 675,
	640, 0, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 1599, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 628, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 1604, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	1600, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 625, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 632, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 1601, 331,
	332, 681, 682, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 626, 658, 647, 648, 645,
	646, 637, 0, 624, 0, 0, 0, 0, 622, 623,
	0, 0, 187, 188, 0, 0, 189, 633, 0, 0,
	0, 675, 640, 636, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 2236, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 658, 647,
	648, 645, 646, 637, 0, 624, 0, 0, 0, 0,
	622, 623, 1200, 0, 187, 188, 0, 0, 189, 633,
	0, 0, 0, 675, 640, 636, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 1449, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 1448, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	0, 0, 0, 0, 0, 0, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 618, 636, 658, 647,
	648, 645, 646, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 675, 640, 0, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 620,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 187, 188, 0, 0,
	189, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 2087,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 658, 647, 648, 645, 646, 637, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 187, 188,
	0, 0, 189, 633, 0, 0, 0, 675, 640, 636,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 620, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 658, 647, 648, 645, 646, 637,
	0, 624, 0, 0, 0, 0, 622, 623, 0, 0,
	187, 188, 0, 0, 189, 633, 0, 0, 0, 675,
	640, 636, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 0, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 628, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 625, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 632, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 681, 682, 653, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 626, 658, 647, 648, 645,
	646, 637, 0, 624, 0, 0, 0, 0, 622, 623,
	1200, 0, 187, 188, 0, 0, 189, 633, 0, 0,
	0, 675, 640, 636, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 1604, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1650, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1613, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1611, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1595, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1583, 636, 658, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1581, 636, 1573, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 1576, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 1577, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 1578, 1575, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 1579, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 1574, 350, 626, 0, 0,
	0, 0, 0, 0, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 0, 0, 1570, 636, 1573, 647, 648, 645,
	646, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 675, 640, 0, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 1576, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 1577, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 1578, 1575, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 1579, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 1574, 350, 626, 658, 647,
	648, 645, 646, 637, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 187, 188, 0, 0, 189, 633,
	0, 0, 0, 675, 640, 636, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 187, 188, 1436, 1143,
	189, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 899, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 0, 0, 0, 0, 0, 0, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 897, 636,
	658, 647, 648, 645, 646, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 675, 640, 0, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	628, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 625, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 632, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 626, 658, 647, 648, 645, 646, 637, 0, 624,
	0, 0, 0, 0, 622, 623, 0, 0, 187, 188,
	0, 0, 189, 633, 0, 0, 0, 675, 640, 636,
	0, 0, 190, 191, 192, 352, 690, 354, 691, 193,
	692, 693, 0, 194, 358, 359, 195, 196, 643, 674,
	694, 695, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 696, 214,
	697, 698, 628, 215, 0, 216, 0, 217, 0, 0,
	689, 219, 0, 220, 0, 0, 0, 631, 221, 223,
	222, 224, 676, 677, 654, 721, 0, 0, 0, 0,
	0, 225, 226, 699, 700, 701, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 702, 236, 703, 704, 705,
	706, 707, 0, 665, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 2654, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 625, 0, 655, 684, 260, 708, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 709, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 632, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 710, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 711, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 712, 713, 0, 0, 331, 332, 681,
	682, 653, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	714, 0, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 626, 658, 647, 648, 645, 646, 637,
	0, 624, 0, 0, 0, 0, 622, 623, 0, 0,
	187, 188, 0, 0, 189, 633, 0, 0, 0, 675,
	640, 636, 0, 0, 190, 191, 192, 352, 690, 354,
	691, 193, 692, 693, 0, 194, 358, 359, 195, 196,
	643, 674, 694, 695, 362, 0, 197, 686, 0, 666,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 2571, 0,
	667, 668, 670, 0, 669, 671, 211, 212, 417, 213,
	696, 214, 697, 698, 628, 215, 0, 216, 0, 217,
	0, 0, 689, 219, 0, 220, 0, 0, 0, 631,
	221, 223, 222, 224, 676, 677, 654, 721, 0, 0,
	0, 0, 0, 225, 226, 699, 700, 701, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 687, 0, 374,
	0, 0, 230, 231, 232, 233, 683, 685, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 702, 236, 703,
	704, 705, 706, 707, 0, 665, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 688, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 625, 0, 655, 684, 260,
	708, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 678, 267, 268, 269, 270,
	271, 272, 0, 273, 679, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 709, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 632, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	672, 311, 299, 300, 312, 734, 313, 710, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 711, 318,
	319, 680, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 712, 713, 0, 0, 331,
	332, 681, 682, 653, 333, 334, 2570, 336, 0, 0,
	337, 338, 339, 340, 673, 341, 0, 407, 342, 343,
	344, 408, 714, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 626, 658, 647, 648, 645,
	646, 637, 0, 624, 0, 0, 0, 0, 622, 623,
	0, 0, 187, 188, 0, 0, 189, 633, 0, 0,
	0, 675, 640, 636, 0, 0, 190, 191, 192, 352,
	690, 354, 691, 193, 692, 693, 0, 194, 358, 359,
	195, 196, 643, 674, 694, 695, 362, 0, 197, 686,
	0, 666, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 667, 668, 670, 0, 669, 671, 211, 212,
	417, 213, 696, 214, 697, 698, 628, 215, 0, 216,
	0, 217, 0, 0, 689, 219, 0, 220, 0, 0,
	0, 631, 221, 223, 222, 224, 676, 677, 654, 721,
	0, 0, 0, 0, 0, 225, 226, 699, 700, 701,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 687,
	0, 374, 0, 0, 230, 231, 232, 233, 683, 685,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 702,
	236, 703, 704, 705, 706, 707, 0, 665, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 688, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 625, 0, 655,
	684, 260, 708, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 678, 267, 268,
	269, 270, 271, 272, 0, 273, 679, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 709, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 632, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 672, 311, 299, 300, 312, 734, 313, 710,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	711, 318, 319, 680, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 712, 713, 0,
	0, 331, 332, 681, 682, 653, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 673, 341, 0, 407,
	342, 343, 344, 408, 714, 0, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 626, 658, 647,
	648, 645, 646, 637, 0, 624, 0, 0, 0, 0,
	622, 623, 0, 0, 187, 188, 0, 0, 189, 633,
	0, 0, 0, 675, 640, 636, 0, 0, 190, 191,
	192, 2569, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 643, 674, 694, 695, 362, 0,
	197, 686, 0, 666, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 2571, 0, 667, 668, 670, 0, 669, 671,
	211, 212, 417, 213, 696, 214, 697, 698, 628, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 631, 221, 223, 222, 224, 676, 677,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 687, 0, 374, 0, 0, 230, 231, 232, 233,
	683, 685, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 688, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 625,
	0, 655, 684, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 678,
	267, 268, 269, 270, 271, 272, 0, 273, 679, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	632, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 672, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 680, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 681, 682, 653, 333, 334,
	2570, 336, 0, 0, 337, 338, 339, 340, 673, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 626,
	658, 647, 648, 645, 646, 637, 0, 624, 0, 0,
	0, 0, 622, 623, 0, 0, 187, 188, 0, 0,
	189, 633, 0, 0, 0, 675, 640, 636, 0, 0,
	190, 191, 192, 352, 690, 354, 691, 193, 692, 693,
	0, 194, 358, 359, 195, 196, 643, 674, 694, 695,
	362, 0, 197, 686, 0, 666, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 667, 668, 670, 0,
	669, 671, 211, 212, 417, 213, 696, 214, 697, 698,
	0, 215, 0, 216, 0, 217, 0, 0, 689, 219,
	0, 220, 0, 0, 0, 631, 221, 223, 222, 224,
	676, 677, 654, 721, 0, 0, 0, 0, 0, 225,
	226, 699, 700, 701, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 687, 0, 374, 0, 0, 230, 231,
	232, 233, 683, 685, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 702, 236, 703, 704, 705, 706, 707,
	0, 665, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 688, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 0, 0, 655, 684, 260, 708, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 678, 267, 268, 269, 270, 271, 272, 0, 273,
	679, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	709, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 1593, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 672, 311, 299, 300,
	312, 734, 313, 710, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 711, 318, 319, 680, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 712, 713, 0, 0, 331, 332, 681, 682, 653,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	673, 341, 0, 407, 342, 343, 344, 408, 714, 0,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 658, 647, 648, 645, 646, 637, 0, 0, 1591,
	0, 0, 0, 0, 1589, 1590, 0, 187, 188, 0,
	0, 189, 0, 1592, 0, 0, 675, 640, 0, 636,
	0, 190, 191, 192, 0, 690, 354, 691, 193, 692,
	693, 0, 194, 358, 359, 195, 196, 643, 674, 694,
	695, 362, 0, 197, 686, 0, 666, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 720, 208, 209, 2571, 0, 667, 668, 670,
	0, 669, 671, 211, 212, 417, 213, 696, 214, 697,
	698, 628, 215, 0, 216, 0, 217, 0, 0, 689,
	219, 0, 220, 0, 0, 0, 631, 221, 223, 222,
	224, 676, 677, 654, 721, 0, 0, 0, 0, 0,
	225, 226, 699, 700, 701, 0, 227, 0, 228, 0,
	0, 722, 0, 229, 687, 0, 374, 0, 0, 230,
	231, 232, 233, 683, 685, 0, 0, 377, 237, 0,
	234, 0, 723, 235, 702, 236, 703, 704, 705, 706,
	707, 0, 665, 0, 0, 238, 239, 240, 726, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 688, 727,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 388, 254, 730, 256, 257,
	259, 258, 625, 0, 655, 684, 260, 708, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 731,
	266, 732, 678, 267, 268, 269, 270, 271, 272, 0,
	273, 679, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 709, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	733, 296, 297, 632, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 672, 311, 299,
	300, 312, 0, 313, 710, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 711, 318, 319, 680, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 712, 713, 0, 0, 331, 332, 681, 682,
	653, 333, 334, 2570, 336, 0, 0, 337, 338, 339,
	340, 673, 341, 0, 407, 342, 343, 344, 408, 714,
	0, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 623, 0, 187, 188,
	0, 0, 189, 0, 633, 0, 0, 675, 0, 0,
	636, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 674,
	360, 361, 362, 0, 197, 686, 0, 666, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 720, 208, 209, 210, 0, 667, 668,
	670, 0, 669, 671, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 676, 677, 0, 721, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 722, 0, 229, 687, 0, 374, 0, 0,
	230, 231, 232, 233, 683, 685, 724, 0, 377, 237,
	0, 234, 0, 723, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 725, 238, 239, 240, 726,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 688,
	727, 246, 247, 728, 0, 248, 249, 0, 0, 250,
	0, 251, 729, 252, 253, 255, 388, 254, 730, 256,
	257, 259, 258, 0, 0, 0, 684, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	731, 266, 732, 678, 267, 268, 269, 270, 271, 272,
	0, 273, 679, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 733, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 672, 311,
	299, 300, 312, 734, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 680,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 681,
	682, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 673, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 0, 345, 950, 0, 790, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 2186, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 794, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 720, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 721,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 722, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	724, 0, 377, 237, 0, 234, 0, 723, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 725,
	238, 239, 240, 726, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 727, 246, 247, 728, 0, 248,
	249, 0, 0, 250, 0, 251, 729, 252, 253, 255,
	388, 254, 730, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 731, 266, 732, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 733, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 145, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 734, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 147, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 953, 409, 0, 0, 345, 610, 0,
	184, 139, 346, 347, 348, 349, 350, 0, 140, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 117,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 375, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 773, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	145, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	147, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 953, 409, 0,
	0, 345, 0, 0, 184, 139, 346, 347, 348, 349,
	350, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 767, 0, 1222, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 773, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 145, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 147, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 953, 409, 0, 0, 345, 610, 0, 184, 139,
	346, 347, 348, 349, 350, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 767, 0, 1222, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 145, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 147, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 953, 409, 0, 0, 345,
	1928, 0, 184, 139, 346, 347, 348, 349, 350, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 117, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 773, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 0, 345, 766, 0, 184, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 767, 0, 772, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 773, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 0, 345, 0, 0,
	184, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 767, 0, 772,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 375, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 773, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	0, 345, 0, 0, 184, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 767, 0, 772, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 0, 345, 0, 0, 0, 184,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 1257, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 0,
	345, 0, 0, 184, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 1738, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 0, 345, 0, 0, 184, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 2102, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 658, 647,
	648, 645, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	1225, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 690, 354, 691, 193, 692, 693, 0, 194,
	358, 359, 195, 196, 0, 0, 694, 695, 362, 0,
	197, 363, 0, 794, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 720,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 696, 214, 697, 698, 0, 215,
	0, 216, 0, 217, 0, 0, 689, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	654, 721, 0, 0, 0, 0, 0, 225, 226, 699,
	700, 701, 0, 227, 0, 228, 0, 0, 722, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 724, 0, 377, 237, 0, 234, 0, 723,
	235, 702, 236, 703, 704, 705, 706, 707, 0, 665,
	0, 725, 238, 239, 240, 726, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 727, 246, 247, 728,
	0, 248, 249, 0, 0, 250, 0, 251, 729, 252,
	253, 255, 388, 254, 730, 256, 257, 259, 258, 0,
	0, 655, 389, 260, 708, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 731, 266, 732, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 709, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 733, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 734,
	313, 710, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 711, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 712,
	713, 0, 0, 331, 332, 405, 406, 653, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 714, 0, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 1006,
	0, 790, 789, 0, 0, 0, 787, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 794, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 720, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 721, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 722, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 375, 376, 724, 0, 377, 237, 0,
	234, 0, 723, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 725, 238, 239, 240, 726, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 727,
	246, 247, 728, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 388, 254, 730, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 731,
	266, 732, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	733, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 734, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 945, 0, 790, 789, 0, 0, 0, 787,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 794,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 720, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 721, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 722, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 944, 376, 724, 0,
	377, 237, 0, 234, 0, 723, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 725, 238, 239,
	240, 726, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 727, 246, 247, 728, 0, 248, 249, 0,
	0, 250, 0, 251, 729, 252, 253, 255, 388, 254,
	730, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 731, 266, 732, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 733, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 734, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 911, 0, 790, 789, 0,
	0, 0, 787, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 794, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 720, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	721, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 722, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 910,
	376, 724, 0, 377, 237, 0, 234, 0, 723, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	725, 238, 239, 240, 726, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 727, 246, 247, 728, 0,
	248, 249, 0, 0, 250, 0, 251, 729, 252, 253,
	255, 388, 254, 730, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 731, 266, 732, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 733, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 734, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 783, 0,
	790, 789, 0, 0, 0, 787, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 794, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 720, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 721, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	722, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 785, 376, 724, 0, 377, 237, 0, 234,
	0, 723, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 725, 238, 239, 240, 726, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 727, 246,
	247, 728, 0, 248, 249, 0, 0, 250, 0, 251,
	729, 252, 253, 255, 388, 254, 730, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 731, 266,
	732, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 733,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 734, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	500, 345, 184, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 180, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 179, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 177, 345, 184, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 183, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 180, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 179, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 790, 789, 345, 0, 0, 787, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	183, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 794, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 720, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 721, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 722, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 724, 0, 377,
	237, 0, 234, 0, 723, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 725, 238, 239, 240,
	726, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 727, 246, 247, 728, 0, 248, 249, 0, 0,
	250, 0, 251, 729, 252, 253, 255, 388, 254, 730,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 731, 266, 732, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 733, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 734, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 184, 0, 345, 0, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 180, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 179, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 790, 789, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 183, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 794, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 720, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 721, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 722, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 375, 376, 724, 0, 377, 237, 0,
	234, 0, 723, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 725, 238, 239, 240, 726, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 727,
	246, 247, 728, 0, 248, 249, 0, 0, 250, 0,
	251, 729, 252, 253, 255, 388, 254, 730, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 731,
	266, 732, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	733, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 734, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	184, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 375, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 790,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 183, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 794, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	720, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 721, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 722,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 724, 0, 377, 237, 0, 234, 0,
	723, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 725, 238, 239, 240, 726, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 727, 246, 247,
	728, 0, 248, 249, 0, 0, 250, 0, 251, 729,
	252, 253, 255, 388, 254, 730, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 731, 266, 732,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 733, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	734, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 184, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 1670,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 1668, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 1714, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 1673, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 1712, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 1672, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 1713, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 184, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 1670, 197,
	363, 0, 0, 1665, 198, 199, 200, 0, 202, 203,
	204, 201, 1668, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 1673, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 1664,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 1672, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 1671, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 927, 345, 184,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 773, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 779,
	345, 184, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 781, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 773, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 775, 345, 184, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 777, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 773, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 429, 345, 184, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 428, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 427, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 184, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 1653, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 184, 2254, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 184, 2254, 345, 0, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 2251, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 184, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 375, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 773, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 1415, 345, 184, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 1413, 345, 184, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 184, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	187, 188, 1395, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 526, 345, 184, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 985, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 375, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 528, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 523, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 1272, 345, 184, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	1271, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 526, 345,
	184, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	985, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 375, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 528, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	523, 403, 404, 0, 0, 331, 986, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 0,
	526, 345, 184, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 517, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 528, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 969, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 523, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 0, 942, 345, 184, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 941, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 0, 938, 345, 184, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 937, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 0, 935, 345, 184, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	934, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 0, 931, 345,
	184, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 187, 188, 0, 0,
	189, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	190, 191, 192, 352, 353, 354, 355, 193, 356, 357,
	0, 194, 358, 359, 195, 196, 0, 0, 360, 361,
	362, 0, 197, 363, 0, 0, 0, 198, 199, 200,
	0, 202, 203, 204, 201, 0, 205, 0, 206, 207,
	0, 0, 208, 209, 210, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 417, 213, 364, 214, 365, 366,
	0, 215, 0, 216, 0, 217, 0, 0, 218, 219,
	0, 220, 0, 0, 0, 367, 221, 223, 222, 224,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 370, 371, 372, 0, 227, 0, 228, 0, 0,
	0, 0, 229, 373, 0, 374, 0, 0, 230, 231,
	232, 233, 930, 376, 0, 0, 377, 237, 0, 234,
	0, 0, 235, 378, 236, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 238, 239, 240, 0, 385, 386,
	241, 242, 243, 0, 245, 244, 0, 387, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	0, 252, 253, 255, 388, 254, 0, 256, 257, 259,
	258, 0, 0, 0, 389, 260, 390, 261, 262, 0,
	263, 0, 0, 264, 0, 0, 265, 391, 0, 266,
	0, 392, 267, 268, 269, 270, 271, 272, 0, 273,
	393, 274, 394, 275, 0, 276, 277, 278, 279, 280,
	395, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 396, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 397, 307, 309, 310, 0, 311, 299, 300,
	312, 0, 313, 398, 399, 314, 0, 0, 321, 315,
	316, 301, 317, 320, 400, 318, 319, 401, 0, 322,
	0, 323, 324, 325, 326, 327, 328, 329, 330, 0,
	402, 403, 404, 0, 0, 331, 332, 405, 406, 0,
	333, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 0, 407, 342, 343, 344, 408, 409, 184,
	0, 345, 0, 0, 0, 0, 346, 347, 348, 349,
	350, 0, 0, 0, 0, 187, 188, 919, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 917,
	345, 184, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 916, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 913, 345, 184, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 906, 345, 184, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 908, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 797, 345, 184, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 799,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 795, 345, 184,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 0, 526,
	345, 184, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 517, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 375, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 516, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 528, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 269, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 279,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 518, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 519, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 523, 403, 404, 0, 0, 331, 521, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 508, 345, 184, 0, 0, 0, 346, 347, 348,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 509, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	311, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 0, 506, 345, 184, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 375, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 0, 498, 345, 184, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 375,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 0, 448, 345, 184,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 187, 188, 0, 0, 189,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 190,
	191, 192, 352, 353, 354, 355, 193, 356, 357, 0,
	194, 358, 359, 195, 196, 0, 0, 360, 361, 362,
	0, 197, 363, 0, 0, 0, 198, 199, 200, 0,
	202, 203, 204, 201, 0, 205, 0, 206, 207, 0,
	0, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 417, 213, 364, 214, 365, 366, 0,
	215, 0, 216, 0, 217, 0, 0, 218, 219, 0,
	220, 0, 0, 0, 367, 221, 223, 222, 224, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	370, 371, 372, 0, 227, 0, 228, 0, 0, 0,
	0, 229, 373, 0, 374, 0, 0, 230, 231, 232,
	233, 375, 376, 0, 0, 377, 237, 0, 234, 0,
	0, 235, 378, 236, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 238, 239, 240, 0, 385, 386, 241,
	242, 243, 0, 245, 244, 0, 387, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 0,
	252, 253, 255, 388, 254, 0, 256, 257, 259, 258,
	0, 0, 0, 389, 260, 390, 261, 262, 0, 263,
	0, 0, 264, 0, 0, 265, 391, 0, 266, 0,
	392, 267, 268, 269, 270, 271, 272, 0, 273, 393,
	274, 394, 275, 0, 276, 277, 278, 279, 280, 395,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 396, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 397, 307, 309, 310, 0, 311, 299, 300, 312,
	0, 313, 398, 399, 314, 0, 0, 321, 315, 316,
	301, 317, 320, 400, 318, 319, 401, 0, 322, 0,
	323, 324, 325, 326, 327, 328, 329, 330, 0, 402,
	403, 404, 0, 0, 331, 332, 405, 406, 0, 333,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 0, 407, 342, 343, 344, 408, 409, 184, 0,
	345, 0, 0, 0, 0, 346, 347, 348, 349, 350,
	0, 0, 0, 0, 187, 188, 0, 0, 189, 0,
	0, 0, 0, 351, 0, 0, 0, 0, 190, 191,
	192, 352, 353, 354, 355, 193, 356, 357, 0, 194,
	358, 359, 195, 196, 0, 0, 360, 361, 362, 0,
	197, 363, 0, 0, 0, 198, 199, 200, 0, 202,
	203, 204, 201, 0, 205, 0, 206, 207, 0, 0,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 417, 213, 364, 214, 365, 366, 0, 215,
	0, 216, 0, 217, 0, 0, 218, 219, 0, 220,
	0, 0, 0, 367, 221, 223, 222, 224, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 370,
	371, 372, 0, 227, 0, 228, 0, 0, 0, 0,
	229, 373, 0, 374, 0, 0, 230, 231, 232, 233,
	375, 376, 0, 0, 377, 237, 0, 234, 0, 0,
	235, 378, 236, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 238, 239, 240, 0, 385, 386, 241, 242,
	243, 0, 245, 244, 0, 387, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 0, 252,
	253, 255, 388, 254, 0, 256, 257, 259, 258, 0,
	0, 0, 389, 260, 390, 261, 262, 0, 263, 0,
	0, 264, 0, 0, 265, 391, 0, 266, 0, 392,
	267, 268, 269, 270, 271, 272, 0, 273, 393, 274,
	394, 275, 0, 276, 277, 278, 279, 280, 395, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	396, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	397, 307, 309, 310, 0, 311, 299, 300, 312, 0,
	313, 398, 399, 314, 0, 0, 321, 315, 316, 301,
	317, 320, 400, 318, 319, 401, 0, 322, 0, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 402, 403,
	404, 0, 0, 331, 332, 405, 406, 0, 333, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	0, 407, 342, 343, 344, 408, 409, 184, 0, 345,
	0, 0, 0, 0, 346, 347, 348, 349, 350, 0,
	0, 0, 0, 187, 188, 0, 0, 189, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 190, 191, 192,
	352, 353, 354, 355, 193, 356, 357, 0, 194, 358,
	359, 195, 196, 0, 0, 360, 361, 362, 0, 197,
	363, 0, 0, 0, 198, 199, 200, 0, 202, 203,
	204, 201, 0, 205, 0, 206, 207, 0, 0, 208,
	209, 210, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 417, 213, 364, 214, 365, 366, 0, 215, 0,
	216, 0, 217, 0, 0, 218, 219, 0, 220, 0,
	0, 0, 367, 221, 223, 222, 224, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 370, 371,
	372, 0, 227, 0, 228, 0, 0, 0, 0, 229,
	373, 0, 374, 0, 0, 230, 231, 232, 233, 1975,
	376, 0, 0, 377, 237, 0, 234, 0, 0, 235,
	378, 236, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 238, 239, 240, 0, 385, 386, 241, 242, 243,
	0, 245, 244, 0, 387, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 0, 252, 253,
	255, 388, 254, 0, 256, 257, 259, 258, 0, 0,
	0, 389, 260, 390, 261, 262, 0, 263, 0, 0,
	264, 0, 0, 265, 391, 0, 266, 0, 392, 267,
	268, 269, 270, 271, 272, 0, 273, 393, 274, 394,
	275, 0, 276, 277, 278, 279, 280, 395, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 396,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 397,
	307, 309, 310, 0, 311, 299, 300, 312, 0, 313,
	398, 399, 314, 0, 0, 321, 315, 316, 301, 317,
	320, 400, 318, 319, 401, 0, 322, 0, 323, 324,
	325, 326, 327, 328, 329, 330, 0, 402, 403, 404,
	0, 0, 331, 332, 405, 406, 0, 333, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 0,
	407, 342, 343, 344, 408, 409, 184, 0, 345, 0,
	0, 0, 0, 346, 347, 348, 349, 350, 0, 0,
	0, 0, 187, 188, 0, 0, 189, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 190, 191, 192, 352,
	353, 354, 355, 193, 356, 357, 0, 194, 358, 359,
	195, 196, 0, 0, 360, 361, 362, 0, 197, 363,
	0, 0, 0, 198, 199, 200, 0, 202, 203, 204,
	201, 0, 205, 0, 206, 207, 0, 0, 208, 209,
	210, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	417, 213, 364, 214, 365, 366, 0, 215, 0, 216,
	0, 217, 0, 0, 218, 219, 0, 220, 0, 0,
	0, 367, 221, 223, 222, 224, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 370, 371, 372,
	0, 227, 0, 228, 0, 0, 0, 0, 229, 373,
	0, 374, 0, 0, 230, 231, 232, 233, 1973, 376,
	0, 0, 377, 237, 0, 234, 0, 0, 235, 378,
	236, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	238, 239, 240, 0, 385, 386, 241, 242, 243, 0,
	245, 244, 0, 387, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 0, 252, 253, 255,
	388, 254, 0, 256, 257, 259, 258, 0, 0, 0,
	389, 260, 390, 261, 262, 0, 263, 0, 0, 264,
	0, 0, 265, 391, 0, 266, 0, 392, 267, 268,
	269, 270, 271, 272, 0, 273, 393, 274, 394, 275,
	0, 276, 277, 278, 279, 280, 395, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 396, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 397, 307,
	309, 310, 0, 311, 299, 300, 312, 0, 313, 398,
	399, 314, 0, 0, 321, 315, 316, 301, 317, 320,
	400, 318, 319, 401, 0, 322, 0, 323, 324, 325,
	326, 327, 328, 329, 330, 0, 402, 403, 404, 0,
	0, 331, 332, 405, 406, 0, 333, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 0, 407,
	342, 343, 344, 408, 409, 184, 0, 345, 0, 0,
	0, 0, 346, 347, 348, 349, 350, 0, 0, 0,
	0, 187, 188, 0, 0, 189, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 190, 191, 192, 352, 353,
	354, 355, 193, 356, 357, 0, 194, 358, 359, 195,
	196, 0, 0, 360, 361, 362, 0, 197, 363, 0,
	0, 0, 198, 199, 200, 0, 202, 203, 204, 201,
	0, 205, 0, 206, 207, 0, 0, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 417,
	213, 364, 214, 365, 366, 0, 215, 0, 216, 0,
	217, 0, 0, 218, 219, 0, 220, 0, 0, 0,
	367, 221, 223, 222, 224, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 370, 371, 372, 0,
	227, 0, 228, 0, 0, 0, 0, 229, 373, 0,
	374, 0, 0, 230, 231, 232, 233, 1962, 376, 0,
	0, 377, 237, 0, 234, 0, 0, 235, 378, 236,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 238,
	239, 240, 0, 385, 386, 241, 242, 243, 0, 245,
	244, 0, 387, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 0, 252, 253, 255, 388,
	254, 0, 256, 257, 259, 258, 0, 0, 0, 389,
	260, 390, 261, 262, 0, 263, 0, 0, 264, 0,
	0, 265, 391, 0, 266, 0, 392, 267, 268, 269,
	270, 271, 272, 0, 273, 393, 274, 394, 275, 0,
	276, 277, 278, 279, 280, 395, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 396, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 397, 307, 309,
	310, 0, 311, 299, 300, 312, 0, 313, 398, 399,
	314, 0, 0, 321, 315, 316, 301, 317, 320, 400,
	318, 319, 401, 0, 322, 0, 323, 324, 325, 326,
	327, 328, 329, 330, 0, 402, 403, 404, 0, 0,
	331, 332, 405, 406, 0, 333, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 0, 407, 342,
	343, 344, 408, 409, 184, 0, 345, 0, 0, 0,
	0, 346, 347, 348, 349, 350, 0, 0, 0, 0,
	187, 188, 0, 0, 189, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 190, 191, 192, 352, 353, 354,
	355, 193, 356, 357, 0, 194, 358, 359, 195, 196,
	0, 0, 360, 361, 362, 0, 197, 363, 0, 0,
	0, 198, 199, 200, 0, 202, 203, 204, 201, 0,
	205, 0, 206, 207, 0, 0, 208, 209, 210, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 417, 213,
	364, 214, 365, 366, 0, 215, 0, 216, 0, 217,
	0, 0, 218, 219, 0, 220, 0, 0, 0, 367,
	221, 223, 222, 224, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 370, 371, 372, 0, 227,
	0, 228, 0, 0, 0, 0, 229, 373, 0, 374,
	0, 0, 230, 231, 232, 233, 375, 376, 0, 0,
	377, 237, 0, 234, 0, 0, 235, 378, 236, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 238, 239,
	240, 0, 385, 386, 241, 242, 243, 0, 245, 244,
	0, 387, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 0, 252, 253, 255, 388, 254,
	0, 256, 257, 259, 258, 0, 0, 0, 389, 260,
	390, 261, 262, 0, 263, 0, 0, 264, 0, 0,
	265, 391, 0, 266, 0, 392, 267, 268, 269, 270,
	271, 272, 0, 273, 393, 274, 394, 275, 0, 276,
	277, 278, 279, 280, 395, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 396, 298, 0, 509,
	303, 304, 305, 306, 0, 308, 397, 307, 309, 310,
	0, 311, 299, 300, 312, 0, 313, 398, 399, 314,
	0, 0, 321, 315, 316, 301, 317, 320, 400, 318,
	319, 401, 0, 322, 0, 323, 324, 325, 326, 327,
	328, 329, 330, 0, 402, 403, 404, 0, 0, 331,
	332, 405, 406, 0, 333, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 0, 407, 342, 343,
	344, 408, 409, 184, 0, 345, 0, 0, 0, 0,
	346, 347, 348, 349, 350, 0, 0, 0, 0, 187,
	188, 0, 0, 189, 0, 0, 0, 0, 351, 0,
	1282, 0, 0, 190, 191, 192, 352, 353, 354, 355,
	193, 356, 357, 0, 194, 358, 359, 195, 196, 0,
	0, 360, 361, 362, 0, 197, 363, 0, 0, 0,
	198, 199, 200, 0, 202, 203, 204, 201, 0, 205,
	0, 206, 207, 0, 0, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 417, 213, 364,
	214, 365, 366, 0, 215, 0, 216, 0, 217, 0,
	0, 218, 219, 0, 220, 0, 0, 0, 367, 221,
	223, 222, 224, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 370, 371, 372, 0, 227, 0,
	228, 0, 0, 0, 0, 229, 373, 0, 374, 0,
	0, 230, 231, 232, 233, 375, 376, 0, 0, 377,
	237, 0, 234, 0, 0, 235, 378, 236, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 238, 239, 240,
	0, 385, 386, 241, 242, 243, 0, 245, 244, 0,
	387, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 0, 252, 253, 255, 388, 254, 0,
	256, 257, 259, 258, 0, 0, 0, 389, 260, 390,
	261, 262, 0, 263, 0, 0, 264, 0, 0, 265,
	391, 0, 266, 0, 392, 267, 268, 269, 270, 271,
	272, 0, 273, 393, 274, 394, 275, 0, 276, 277,
	278, 279, 280, 395, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 396, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 397, 307, 309, 310, 0,
	0, 299, 300, 312, 0, 313, 398, 399, 314, 0,
	0, 321, 315, 316, 301, 317, 320, 400, 318, 319,
	401, 0, 322, 0, 323, 324, 325, 326, 327, 328,
	329, 330, 0, 402, 403, 404, 0, 0, 331, 332,
	405, 406, 0, 333, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 0, 407, 342, 343, 344,
	408, 409, 184, 0, 345, 0, 0, 0, 0, 346,
	347, 348, 349, 350, 0, 0, 0, 0, 187, 188,
	0, 0, 189, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 190, 191, 192, 352, 353, 354, 355, 193,
	356, 357, 0, 194, 358, 359, 195, 196, 0, 0,
	360, 361, 362, 0, 197, 363, 0, 0, 0, 198,
	199, 200, 0, 202, 203, 204, 201, 0, 205, 0,
	206, 207, 0, 0, 208, 209, 210, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 417, 213, 364, 214,
	365, 366, 0, 215, 0, 216, 0, 217, 0, 0,
	218, 219, 0, 220, 0, 0, 0, 367, 221, 223,
	222, 224, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 370, 371, 372, 0, 227, 0, 228,
	0, 0, 0, 0, 229, 373, 0, 374, 0, 0,
	230, 231, 232, 233, 375, 376, 0, 0, 377, 237,
	0, 234, 0, 0, 235, 378, 236, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 238, 239, 240, 0,
	385, 386, 241, 242, 243, 0, 245, 244, 0, 387,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 0, 252, 253, 255, 388, 254, 0, 256,
	257, 259, 258, 0, 0, 0, 389, 260, 390, 261,
	262, 0, 263, 0, 0, 264, 0, 0, 265, 391,
	0, 266, 0, 392, 267, 268, 269, 270, 271, 272,
	0, 273, 393, 274, 394, 275, 0, 276, 277, 278,
	279, 280, 395, 750, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 396, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 397, 307, 309, 310, 0, 311,
	299, 300, 312, 0, 313, 398, 399, 314, 0, 0,
	321, 315, 316, 301, 317, 320, 400, 318, 319, 401,
	0, 322, 0, 323, 324, 325, 326, 327, 328, 329,
	330, 0, 402, 403, 404, 0, 0, 331, 332, 405,
	406, 0, 333, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 0, 407, 342, 343, 344, 408,
	409, 184, 0, 345, 0, 0, 0, 0, 346, 347,
	348, 349, 350, 0, 0, 0, 0, 187, 188, 0,
	0, 189, 0, 0, 0, 0, 351, 0, 0, 0,
	0, 190, 191, 192, 352, 353, 354, 355, 193, 356,
	357, 0, 194, 358, 359, 195, 196, 0, 0, 360,
	361, 362, 0, 197, 363, 0, 0, 0, 198, 199,
	200, 0, 202, 203, 204, 201, 0, 205, 0, 206,
	207, 0, 0, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 417, 213, 364, 214, 365,
	366, 0, 215, 0, 216, 0, 217, 0, 0, 218,
	219, 0, 220, 0, 0, 0, 367, 221, 223, 222,
	224, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 370, 371, 372, 0, 227, 0, 228, 0,
	0, 0, 0, 229, 373, 0, 374, 0, 0, 230,
	231, 232, 233, 375, 376, 0, 0, 377, 237, 0,
	234, 0, 0, 235, 378, 236, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 238, 239, 240, 0, 385,
	386, 241, 242, 243, 0, 245, 244, 0, 387, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 0, 252, 253, 255, 388, 254, 0, 256, 257,
	259, 258, 0, 0, 0, 389, 260, 390, 261, 262,
	0, 263, 0, 0, 264, 0, 0, 265, 391, 0,
	266, 0, 392, 267, 268, 0, 270, 271, 272, 0,
	273, 393, 274, 394, 275, 0, 276, 277, 278, 0,
	280, 395, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 396, 0, 0, 302, 303, 304, 305,
	306, 0, 308, 397, 307, 309, 310, 0, 311, 299,
	300, 312, 0, 313, 398, 399, 314, 0, 0, 321,
	315, 316, 301, 317, 320, 400, 318, 319, 401, 0,
	322, 0, 323, 324, 325, 326, 327, 328, 329, 330,
	0, 402, 403, 404, 0, 0, 331, 332, 405, 406,
	0, 333, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 0, 407, 342, 343, 344, 408, 409,
	0, 0, 345, 0, 0, 0, 0, 346, 347, 348,
	349, 350, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 0, 0, 0, 0, 1094, 0, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 1076, 1077, 1098, 1106, 1107, 1108,
	1116, 1117, 1118, 1095, 0, 0, 0, 1094, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 1098, 0,
	0, 1101, 1102, 1103, 1104, 1095, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 1101, 1102, 1103, 1104, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 1113, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1110, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 1110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 1114,
	0, 0, 1094, 0, 0, 1093, 1109, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 1120, 1112, 0, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 1078, 0, 0,
	0, 0, 0, 1098, 1861, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0,
	0, 0, 2540, 0, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 0, 0, 0, 0, 1094, 0, 1113, 1121, 1109,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 1111, 0, 1098, 0, 0, 0,
	0, 1099, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 0,
	1084, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 1119,
	1093, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118,
	0, 0, 0, 0, 1094, 0, 0, 1111, 1109, 0,
	0, 0, 0, 0, 1099, 1079, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	1110, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 1112, 0, 0, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 0, 1105, 0, 2489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1102, 1103, 1104, 0, 0, 0, 1114, 0, 1084,
	0, 0, 0, 1093, 1076, 1077, 0, 1106, 1107, 1108,
	1116, 1117, 1118, 0, 0, 0, 0, 1094, 0, 1113,
	1121, 1109, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 1111, 0, 1098, 0,
	0, 0, 0, 1099, 0, 1095, 0, 1112, 0, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0, 1110,
	2442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 0, 0, 0,
	0, 0, 1084, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 1113, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 1119, 1093, 1076, 1077, 0, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 0, 0, 0, 1094, 0, 0, 1111,
	1109, 0, 0, 0, 0, 0, 1099, 1079, 0, 0,
	1120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 1110, 0, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 1095, 0, 1112, 0, 0, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 0, 1105, 0, 2412,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 1102, 1103, 1104, 0, 0, 0, 1114,
	0, 1084, 0, 0, 0, 1093, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094,
	0, 1113, 1121, 1109, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 1120, 0, 0, 0, 0, 0, 0,
	1119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 1111, 0,
	1098, 0, 0, 0, 0, 1099, 0, 1095, 0, 1112,
	0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0,
	0, 1110, 2407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 0, 1084, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 1119, 1093, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094, 0,
	0, 1111, 1109, 0, 0, 0, 0, 0, 1099, 1079,
	0, 0, 1120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 1110, 0, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 1112, 0,
	0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 1105,
	0, 2403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 0,
	0, 1114, 0, 1084, 0, 0, 0, 1093, 1076, 1077,
	0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0,
	0, 1094, 0, 1113, 1121, 1109, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 1120, 0, 0, 0, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	1111, 0, 1098, 0, 0, 0, 0, 1099, 0, 1095,
	0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 0, 1110, 2335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 1084, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 1113, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 1119, 1093, 1076, 1077, 0,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 0, 0, 1111, 1109, 0, 0, 0, 0, 0,
	1099, 1079, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 1110, 0, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	1112, 0, 0, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	0, 1105, 0, 2301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1102, 1103, 1104,
	0, 0, 0, 1114, 0, 1084, 0, 0, 0, 1093,
	1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0,
	0, 0, 0, 1094, 0, 1113, 1121, 1109, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 1111, 0, 1098, 0, 0, 0, 0, 1099,
	0, 1095, 0, 1112, 0, 0, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 0, 0, 1110, 2300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	1102, 1103, 1104, 0, 0, 0, 0, 0, 1084, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1113, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 1119, 1093, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0,
	0, 0, 1094, 0, 0, 1111, 1109, 0, 0, 0,
	0, 0, 1099, 1079, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1110, 0,
	0, 0, 0, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 1112, 0, 0, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 0, 1105, 0, 2265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 0, 0, 1114, 0, 1084, 0, 0,
	0, 1093, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117,
	1118, 0, 0, 0, 0, 1094, 0, 1113, 1121, 1109,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 1120,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 1111, 0, 1098, 0, 0, 0,
	0, 1099, 0, 1095, 0, 1112, 0, 0, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 0, 0, 0, 1110, 2105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1102, 1103, 1104, 0, 0, 0, 0, 0,
	1084, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	1113, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 1119,
	1093, 1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118,
	0, 0, 0, 0, 1094, 0, 0, 1111, 1109, 0,
	0, 0, 0, 0, 1099, 1079, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	1110, 0, 0, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 1095, 0, 1112, 0, 0, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 0, 1105, 0, 2081, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 1102, 1103, 1104, 0, 0, 0, 1114, 0, 1084,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	1121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 1112, 0, 0,
	1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088,
	1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0, 1110,
	1531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	1076, 1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0,
	0, 0, 0, 1094, 0, 0, 1114, 1109, 0, 0,
	0, 0, 1093, 0, 1079, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1112, 0, 0, 1090,
	1091, 1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080,
	1081, 1082, 1083, 1085, 1086, 0, 0, 1831, 0, 1101,
	1102, 1103, 1104, 0, 0, 0, 0, 0, 1084, 2603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 1113, 1121,
	0, 0, 1094, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 1120, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1111, 0, 1078, 0, 0,
	0, 0, 1099, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 1105, 0, 0, 0, 1084, 0, 1901,
	0, 0, 1900, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1121, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 1119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 1076,
	1077, 0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0,
	0, 0, 1094, 0, 0, 0, 1109, 1110, 0, 0,
	0, 1804, 0, 1079, 0, 1112, 1120, 0, 1090, 1091,
	1097, 1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081,
	1082, 1083, 1085, 1086, 0, 0, 0, 1078, 0, 0,
	0, 0, 1105, 1098, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 1805, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 1102,
	1103, 1104, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 1629, 0, 0, 0, 0, 0, 1076, 1077,
	0, 1106, 1107, 1108, 1116, 1117, 1118, 1113, 1121, 0,
	0, 1094, 0, 0, 0, 1109, 0, 0, 0, 1628,
	0, 0, 1079, 0, 1112, 1120, 1119, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 1111, 0, 1078, 0, 0, 0,
	0, 1099, 1098, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1102, 1103,
	1104, 0, 1105, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 1121, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 1076, 1077,
	0, 1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0,
	0, 1094, 0, 0, 0, 1109, 1110, 0, 0, 0,
	0, 0, 1079, 0, 1112, 1120, 0, 1090, 1091, 1097,
	1096, 1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082,
	1083, 1085, 1086, 0, 0, 0, 1078, 0, 0, 0,
	0, 1105, 1098, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 1076, 1077, 1093,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 0, 0, 0, 1109, 0, 0, 1101, 1102, 1103,
	1104, 1079, 0, 0, 1120, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 1113, 1121, 0, 0,
	0, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1112, 0, 1119, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 0, 1111, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1102, 1103, 1104,
	0, 0, 0, 0, 0, 1084, 1110, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 1119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 1114, 0, 0, 0, 1076, 1077, 1093,
	1106, 1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0,
	1094, 0, 0, 0, 1109, 1110, 0, 0, 0, 0,
	0, 1079, 0, 0, 1120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	1105, 1098, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1112, 0, 1100, 1090, 1091, 1097, 1096,
	1092, 1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083,
	1085, 1086, 1114, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 1102, 1103, 1104,
	2085, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	1907, 0, 0, 0, 0, 0, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 1113, 1121, 0, 0, 1094,
	0, 0, 0, 1109, 0, 0, 0, 1902, 0, 0,
	1079, 0, 1112, 1120, 1119, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 1111, 0, 1078, 0, 0, 0, 0, 1099,
	1098, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 0,
	1105, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 1121, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 1076, 1077, 0, 1106,
	1107, 1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094,
	0, 0, 0, 1109, 1110, 0, 0, 0, 0, 0,
	1079, 0, 1112, 1120, 0, 1090, 1091, 1097, 1096, 1092,
	1115, 0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085,
	1086, 0, 0, 0, 1078, 0, 0, 0, 0, 1105,
	1098, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 1104, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 1113, 1121, 0, 0, 1094, 0,
	0, 0, 1109, 0, 0, 0, 1860, 0, 0, 1079,
	0, 1112, 1120, 1119, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 1111, 0, 1078, 0, 0, 0, 0, 1099, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 1102, 1103, 1104, 0, 1105,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 1121, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 1093, 0, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 1076, 1077, 0, 1106, 1107,
	1108, 1116, 1117, 1118, 0, 0, 0, 0, 1094, 0,
	0, 0, 1109, 1110, 0, 0, 0, 0, 0, 1079,
	0, 1112, 1120, 0, 1090, 1091, 1097, 1096, 1092, 1115,
	0, 1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086,
	0, 0, 0, 1078, 0, 0, 0, 0, 1105, 1098,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 1076, 1077, 1093, 1106, 1107, 1108,
	1116, 1117, 1118, 0, 0, 0, 0, 1094, 0, 0,
	0, 1109, 0, 0, 1101, 1102, 1103, 1104, 1079, 0,
	0, 1120, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 1113, 1121, 0, 0, 0, 1098, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	1112, 0, 1119, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0,
	1111, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 0, 0, 0,
	0, 0, 1084, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1105, 0,
	0, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	1114, 0, 0, 0, 1076, 1077, 1093, 1106, 1107, 1108,
	1116, 1117, 1118, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 1105, 1098, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	1112, 0, 1100, 1090, 1091, 1097, 1096, 1092, 1115, 0,
	1089, 1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 1114,
	0, 0, 0, 1076, 1077, 1093, 1106, 1107, 1108, 1116,
	1117, 1118, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1101, 1102, 1103, 1104, 1079, 0, 0,
	1120, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 1113, 1121, 0, 0, 0, 1098, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 1112,
	0, 1119, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 1111,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 1102, 1103, 1104, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1113, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 1100, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089,
	1087, 1088, 1080, 1081, 1082, 1083, 1085, 1086, 1114, 0,
	0, 0, 0, 0, 1093, 1335, 1324, 1354, 1313, 1345,
	1344, 0, 0, 1315, 1314, 0, 0, 0, 0, 1356,
	1355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 0, 1342,
	1341, 0, 0, 0, 0, 0, 0, 0, 1112, 1340,
	0, 1090, 1091, 1097, 1096, 1092, 1115, 0, 1089, 1087,
	1088, 1080, 1081, 1082, 1083, 1085, 1086, 0, 0, 0,
	0, 0, 1339, 1337, 1338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 1328, 1326, 1329, 1330, 1331, 1332,
	1333, 0, 1353, 0, 0, 0, 0, 0, 0, 1317,
	1316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 1324,
	1354, 1313, 1345, 1344, 0, 0, 1315, 1314, 0, 0,
	0, 1336, 1356, 1355, 0, 1456, 1454, 1455, 1458, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1320, 547, 0, 573, 0, 0, 0,
	1350, 0, 1342, 1341, 1334, 1321, 0, 0, 0, 0,
	0, 0, 1340, 0, 552, 1358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 550, 1318, 0,
	0, 0, 1351, 1352, 0, 1339, 1337, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 0,
	0, 0, 0, 553, 1322, 0, 0, 0, 0, 1357,
	1323, 559, 560, 0, 0, 0, 569, 1328, 1326, 1329,
	1330, 1331, 1332, 1333, 0, 1353, 0, 0, 0, 0,
	574, 554, 1317, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 572, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 1325, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 556, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 563, 0, 0, 0, 0, 558, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 1320, 0, 0, 0,
	0, 575, 0, 0, 0, 0, 0, 1334, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 0, 0, 0, 1351, 1352, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 566, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 0, 0,
	0, 571, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 564, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570,
}
var sqlPact = [...]int{

	3733, -1000, 1, -1000, -1000, -1000, 183, -1000, -1000, -1000,
	-1000, 182, 180, 176, -1000, 175, 174, 172, 170, 169,
	168, 161, 160, 157, 156, 155, -1000, 154, -1000, -1000,
	-1000, -1000, 153, 152, 149, -1000, 148, 1104, 23170, 147,
	142, 1527, -1000, 36124, 135, -1000, 1022, 26911, 977, 1236,
	-1000, 134, 1029, 35785, 4387, 1524, 1176, 1708, 35443, 22828,
	1681, 1517, 35101, -1000, -1000, 34759, 133, 132, 131, 129,
	128, -1000, -1000, 34417, 124, 123, 122, 117, 110, 106,
	105, 104, 98, 97, 93, 92, 90, 88, -1000, 86,
	85, 84, -1000, 43562, 83, 82, 71, 1159, 70, 62,
	61, 60, -1000, -1000, 915, 59, 52, 50, 49, 47,
	112, 44, 40, 39, 35, -1000, 1026, 337, 1468, 8944,
	1075, 1071, 1061, 1052, 1069, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38158,
	36124, 34, -86, 33, -1000, 2061, 663, 19002, 3733, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26569, 26227, 22486, 34075, 33733, 6395, 823, -1000, -3, 24526,
	36124, -1000, 78, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14476, 14096, 599, 78, -1000, -1000, -1000,
	33391, 22133, 33049, 1575, 32707, -1000, -1000, 32365, -1000, -1000,
	2019, 1768, 1720, 25885, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 32026, 31684, 31342, 31000, 21780, 522, -1000, -1000,
	-1000, 17282, -1000, -1000, -1000, -1000, 26, -1000, 25, 24,
	-1000, 22, 21, 18, 15, 13, 12, -1000, 11, 9,
	-1000, 7, 5, -1000, 4, 3, 1095, 932, 1021, 30658,
	891, 1295, -1000, -1000, -2, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36124, -1000, 15532, -1000, 521, -1000, 1697,
	-1000, 15532, -1000, 1284, -1000, -1000, -1000, -1000, -1000, 36124,
	-1000, -1000, -1000, -1000, -1000, -1000, 2281, 1235, 517, 30316,
	-1000, 1563, -1000, 636, 791, -1000, -1000, -1000, 9648, 186,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1732,
	21427, 1322, 2087, 2017, 2280, 1487, 2012, 1996, 1878, 1863,
	1819, 2275, 973, 2273, 1944, 1045, 2271, 1757, 1316, 707,
	2266, 1696, 1694, -1000, -1000, -1000, -1000, 961, -1000, -1000,
	-1000, 28267, -1000, -1000, -1000, -1000, -1000, -1000, 850, 905,
	-1000, -1000, -1000, -1000, -1000, 1026, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1653, 2056, 2056, 2056, 2120, 325, 307,
	-1000, 112, -1000, 1475, -1000, 1227, -1000, -1000, -1000, 42665,
	-1000, -1000, 15532, 15532, 15532, 15532, 15532, 1204, -1000, 541,
	-1000, 516, 515, 7494, -1000, -1000, 2251, -1000, -1000, -1000,
	315, -1000, -1000, 15532, 78, -1000, -1000, -1000, -1000, 514,
	2259, -1000, 684, -1000, -1000, -1000, 641, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1714, 510, 509, 508,
	-1000, 506, -1000, -1000, 505, 503, 501, 500, 498, 497,
	496, 492, 481, 473, 472, 471, 470, 468, 467, 1080,
	-1000, 664, -1000, -1000, 664, 664, -1000, 448, 448, 449,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 448, -1000,
	-1000, -1000, 622, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 466, 1354, -1000, -1000, 1354,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 822, 37480, -11,
	36124, -1000, 464, -11, -1000, -1000, 455, -1000, 10000, 10000,
	-1000, -1000, -1000, 15532, -1000, 1580, -1000, 3994, -188, 359,
	588, -1000, 17970, 20723, -1000, -1000, 1106, 1899, 810, -1000,
	1037, 1895, 549, -1000, 649, 1892, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1157, -1000, 925, 1875,
	-138, 1735, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23509, 24526,
	-3, -5, -1000, -1000, -1000, 6044, 42665, -1000, 42665, -1000,
	875, 19690, 78, -1000, -1000, -1000, -1000, 454, 1375, 644,
	1374, -1000, 358, -1000, 29974, 644, 1371, -1000, -1000, -1000,
	28267, -1000, 36124, -1000, 36124, -1000, 908, -1000, 37819, 116,
	1872, -1000, -1000, 116, 1857, -1000, 113, 1842, -1000, -1000,
	1319, 1828, -1000, -106, 1770, -1000, -1000, -1000, 15532, -19,
	-1000, -1000, -1000, 663, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29632,
	23848, 1438, 557, 42665, 2162, 43480, 23509, 42665, 23848, -1000,
	-1000, 36124, -1000, 15532, -1000, 2160, 1449, -12, -1000, -1000,
	-1000, -1000, -1000, 1405, 1446, 655, 903, 9648, 9648, 1952,
	-1000, 185, 6395, -1000, -1000, -1000, -1000, 29290, -1000, -1000,
	-1000, 1200, 36124, -1000, -1000, 1712, -1000, 23848, 36124, -1000,
	36124, -1000, 36124, -1000, 36124, -1000, 36124, -1000, -1000, -1000,
	-1000, -1000, 2868, -1000, 1711, -1000, -1000, 36124, -1000, 1403,
	-1000, -1000, -1000, 28951, 28609, -1000, 1001, 848, -1000, -1000,
	119, -1000, 36124, 2093, 627, -1000, 1653, 1436, 1684, 706,
	1274, 1485, 13716, 1471, 15532, 112, -1000, -1000, 112, 112,
	8564, -1000, -1000, -1000, 36124, -1000, 43287, 43480, 6395, 834,
	15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532,
	15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532,
	15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532, 15532,
	15532, 15532, 1372, 15532, 811, 15532, 15532, 15532, 15532, 1361,
	1144, 394, 1225, -1000, 2211, 2211, 2211, 42944, 42944, 422,
	541, -1000, 15532, -1000, 77, 15532, 307, 40692, -8, 7128,
	-1000, -1000, -1000, 13364, 656, 42665, 78, 6748, -1000, 2249,
	862, 1722, 1622, 453, 567, 565, 564, 494, 15532, 15532,
	13012, 12632, 12252, 16236, 11872, 15532, 7860, 15532, 15532, 15532,
	15532, 11492, 11112, -1000, 452, -1000, -1000, -1000, -1000, 2247,
	-1000, -1000, 2242, -1000, 833, 830, 2239, -1000, -12, -1000,
	37480, -1000, 36124, -11, 2157, 36124, 15532, 109, -1000, 41558,
	-1000, 109, -24, 42665, 1511, 1510, 19346, 1437, 1244, 1244,
	1244, -1000, 451, 533, 588, 5331, 10732, -1000, 27250, 1238,
	220, 306, 17626, 1580, -1000, 36124, -36, 1023, -1000, 25543,
	2082, 2080, 1980, 28267, 2132, 77, 2023, 1690, 804, 28267,
	1133, 23509, 2018, 802, 2104, 77, 1685, 798, 36124, 6395,
	2000, 485, -1000, 36124, -1000, -1000, -1000, 1678, -30, -1000,
	-1000, 25204, 2152, 1769, -1000, 1132, -1000, 1765, 2150, 36124,
	1283, 1370, -1000, -1000, 835, 1760, 654, 427, 2148, 427,
	20035, -1000, 36124, -1000, 36124, -1000, -1000, 36124, -1000, 36124,
	-1000, 36124, 36124, -1000, 36124, 23509, 23509, -37, 4874, 24865,
	797, -1000, 686, 25204, 287, -46, -1000, 882, -1000, -1000,
	-1000, -1000, 253, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 449,
	1080, 448, 448, 448, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 622, -1000, -1000, 664, 664, 664, -1000, -1000, -40,
	1667, 609, -48, 722, -12, -1000, 1354, -1000, 978, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2258, -1000, 2226, -1000, -1000, 2238, -13, -1000,
	-13, -1000, 6395, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36124, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1352,
	-1000, -1000, -1000, -1000, -1000, -1000, 36124, 36124, 36124, -1000,
	28267, 646, 1710, -1000, 2026, 1436, 1684, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42665, -1000, 393, -1000, -1000,
	42665, 1020, 1478, -1000, 1478, -14, -1000, 41429, 1494, 36124,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 621, 907, 907, 812, 812, 812, 812, 2216, 2955,
	215, 2807, 339, 339, 339, 339, 339, 339, 339, 339,
	354, 465, 465, 354, 354, 354, 354, 354, 339, 339,
	339, 42944, 42754, 4114, 15532, 15532, 796, 1130, 394, 4114,
	15532, 4114, 4114, 4114, 4114, -1000, 1340, -1000, -1000, -1000,
	-1000, 1662, 444, 16236, 16236, -1000, -1000, -1000, 7494, 15532,
	-1000, -1000, -1000, -1000, 443, 15532, -1000, 40851, -226, 305,
	-125, -1000, 15532, 530, -51, -1000, 902, -1000, 15532, -1000,
	-42, 15532, 15532, 15532, 304, -1000, 302, -1000, 795, -1000,
	790, 788, 787, -1000, 442, 1229, 441, 440, 15532, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42475, 38842, 301,
	-1000, 1661, -125, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	299, -1000, 298, -1000, 42346, -125, 297, 4889, -1000, 16236,
	16236, 16236, 7494, 439, 296, -1000, 41239, -1000, 42156, 10352,
	10352, 10352, 295, 42027, 15532, -125, 4824, 4596, 4152, -54,
	-63, -1000, -68, -1000, 2236, -69, 292, 618, 612, 291,
	-1000, -1000, 438, -81, -89, 654, 10000, 18658, 6395, -1000,
	654, -1000, 15532, 19346, 19346, 1260, 1452, 19346, -1000, -1000,
	-1000, -1000, 27250, 462, 588, 27250, -1000, 2232, 1450, 290,
	-1000, -1000, -1000, 36124, 434, -1000, 588, 288, 1008, 36124,
	36124, 36124, -1000, -1000, 1369, 37141, 1362, 43480, 36124, -1000,
	432, 430, 1491, 1474, 36124, 36124, 36802, 36463, 36124, 1028,
	77, -1000, 598, 429, 36124, 1030, 23509, 645, 597, 36124,
	77, -1000, 428, 6395, 985, -1000, 596, 1597, 1302, -1000,
	871, 1659, 36124, 268, -91, -15, 43480, -1000, -1000, -1000,
	-1000, -1000, 36124, 511, 36124, 77, 36124, 23509, 23509, 77,
	36124, 1755, 1912, 568, 36124, 1485, 15532, 1013, -1000, 18314,
	673, 36124, 949, 89, -1000, -1000, -1000, 577, 36124, -1000,
	-1000, 116, 116, -1000, 113, 1319, -1000, -106, -1000, -1000,
	-1000, 36124, 23509, -92, -1000, 699, 694, 692, -1000, 43480,
	-1000, 539, 709, -1000, 2231, 643, 36124, 9648, 9648, -1000,
	1548, -1000, -1000, 980, -1000, 984, -1000, -1000, -1000, -1000,
	9648, -1000, -53, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1265, 1163, -1000, -1000, -1000, 1020, -1000, 15532, 2229, -1000,
	-1000, -1000, 8564, -1000, -1000, -1000, 36124, -183, 15532, 4114,
	4114, 15532, 16236, 16236, -1000, 4114, -1000, -1000, -1000, -1000,
	-1000, 1657, 424, 15532, 43480, 4662, 3588, -94, 354, 15532,
	-16, -1000, 15532, -1000, 40569, -1000, -1000, 538, 1909, -1000,
	15532, 41837, 267, 9296, -1000, 41748, -49, -49, -1000, 2256,
	1387, 1254, 1065, 921, 2228, -1000, 20379, 657, 1257, 40410,
	43287, 43480, -1000, 15532, -1000, -1000, 1648, 15532, -1000, 43287,
	43480, 16236, 16236, 16236, 16236, 16236, 16236, 16236, 16236, 16236,
	16236, 16236, 16236, 16236, 16236, 16236, 16236, 16236, 16236, 16236,
	1453, 16236, 2195, 2195, 2195, -20, 15532, -1000, 1644, 1648,
	15532, 15532, 43480, 264, 262, 261, -1000, 15532, -125, 15532,
	15532, 15532, -1000, -1000, -1000, 260, -1000, 2222, -1000, -1000,
	-1000, -1000, 287, -1000, -1000, 1618, -1000, -154, -1000, 1580,
	-1000, 1618, 42665, -1000, 1260, -1000, 423, 15532, 19346, -1000,
	528, -1000, -99, -1000, 27250, -1000, 527, -221, -1000, 576,
	-1000, 588, 414, 36124, 27250, -1000, -1000, -1000, 773, 772,
	1753, -1000, 1347, -1000, 677, -1000, 1005, 15532, 16938, 413,
	412, 1129, -1000, 1752, 1319, 1749, 1319, -1000, -36, 996,
	-1000, 21074, 15532, -1000, 765, -1000, 1101, 21074, -1000, -1000,
	15532, -1000, 755, 21074, 643, 1633, 852, -1000, 864, -1000,
	1582, -1000, 25204, 411, 36124, 410, -1000, 409, -1000, 644,
	-1000, 408, 36124, 1426, 568, 24187, -1000, 644, 949, -1000,
	42665, -1000, 949, 8212, 1985, -104, -1000, -1000, -1000, 654,
	20035, 19346, 15532, -107, -1000, -1000, -1000, -1000, -53, 1968,
	1968, -1000, 2200, -1000, 525, 259, -1000, 27928, -53, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36124, 1384, 6395, 36124,
	36124, 1270, 40287, -1000, 2022, 6395, 2174, 4114, 728, 589,
	15532, 43480, 43033, -110, 15532, 15532, -1000, 257, 15532, 483,
	42665, -1000, -1000, -1000, 42665, 15532, 2255, 15532, 256, 255,
	247, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 243,
	-1000, -1000, 38497, 15532, 241, -1000, 240, 239, 42665, 1644,
	42665, -1000, -1000, 482, 482, 928, 928, 928, 928, 2195,
	616, 327, 1621, 495, 495, 495, 1135, 425, 425, 495,
	495, 495, 1631, 1434, 407, 3322, 15532, 237, -1000, -1000,
	42665, 42665, 236, -1000, -1000, -1000, -125, 289, 40128, 40005,
	-1000, 234, 223, 1607, 2119, -1000, 19346, 1607, -1000, 36124,
	42665, -1000, -188, -1000, 2193, -1000, -1000, 1450, -1000, 5692,
	27250, 36124, -112, -1000, 36124, 36124, 36124, 1743, -1000, 1490,
	-1000, 39846, -113, -1000, 336, 2063, 15532, -1000, -1000, 405,
	16938, 36124, -1000, 1506, 1651, 714, 36124, -1000, 36124, -1000,
	36124, 36124, 36124, -1000, 403, 78, -115, 36124, 23509, -1000,
	-120, 6395, -1000, -1000, 23509, 815, -1000, 1215, 1591, -1000,
	16938, 402, 36124, 25204, 2143, -1000, 16938, 1280, 1435, 568,
	24187, -1000, 835, -1000, -1000, -55, -1000, 390, 77, 949,
	-1000, -64, 42665, 575, 1942, -1000, 1938, 463, -1000, -1000,
	-74, 401, -1000, 572, 571, -1000, -105, -1000, 591, 587,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2022, 15532, 15532,
	43033, -123, -1000, 4114, 4114, -1000, 39723, -1000, 42665, -1000,
	41748, -1000, -1000, -1000, -1000, 1202, -1000, 39564, -1000, -1000,
	-1000, -1000, 16236, 1630, 398, 43480, 39441, -1000, -1000, 15532,
	-1000, -1000, -1000, -1000, 652, 15532, 15532, 1580, 652, -126,
	588, -1000, -1000, -1000, 2191, -1000, -134, -1000, -1000, -1000,
	-1000, 36124, -1000, 36124, -1000, 6395, 36124, 1641, 1336, -1000,
	-1000, 1473, 395, 16236, 36124, -1000, 1096, 16938, 2022, 78,
	6395, 2022, 39282, 6748, -139, -141, 1318, -1000, 1309, 15532,
	-1000, 43480, 1319, 1319, -1000, 753, 750, 15532, 747, -1000,
	-1000, 731, -1000, -106, 21074, -1000, -1000, 2110, 1221, -142,
	16938, -144, 219, 77, -147, 36124, -1000, 568, 24187, -1000,
	1912, 1921, 36124, 1978, -1000, -1000, 394, 392, 387, -1000,
	27589, 27589, 23509, 23509, 1384, -1000, 36124, -1000, 36124, -1000,
	4114, 4114, -1000, -1000, 218, 1257, 2091, -1000, 3541, 16236,
	43480, -149, -1000, 39159, -1000, 36124, 42665, -125, -1000, -1000,
	27250, 426, -1000, -1000, 1901, -1000, -1000, 36124, 1344, -1000,
	-1000, 15532, 3322, 383, 1582, 382, -1000, -1000, -1000, -1000,
	-1000, -1000, 2063, -42, -1000, 1063, -1000, -1000, 42665, 2051,
	-1000, -1000, 36124, 36124, -49, 381, 380, -1000, 1226, 36124,
	1096, -155, -1000, 1582, -1000, 1096, 375, 24187, -1000, 1426,
	828, -161, 36124, -1000, 23509, 23509, -1000, -162, -1000, -1000,
	-1000, -163, -164, -1000, 955, 15532, 3541, -169, -1000, -1000,
	-122, -1000, 2138, -1000, -1000, -1000, -1000, 1740, 38894, 1393,
	36124, -1000, 36124, 2022, 216, 36124, 680, 6395, -1000, -1000,
	212, 15532, 15532, 371, 369, 368, 1582, 1096, -1000, 1582,
	16938, -1000, 1435, 901, -1000, 654, -1000, -170, -172, -1000,
	-1000, -1000, 203, 15884, 15884, -125, -1000, 36124, 360, 1729,
	-1000, 1266, 1264, 200, -177, -1000, -1000, 358, -1000, 15532,
	-1000, 2255, -184, -185, 36124, 36124, 36124, -1000, 1582, -1000,
	-186, -1000, 20035, -1000, 643, 643, -1000, -1000, -1000, 16587,
	1250, 954, 41110, -1000, -1000, -1000, 36124, -1000, 1279, 1277,
	944, -1000, -1000, -1000, -1000, -1000, 1393, 42665, -1000, -1000,
	-191, -192, -193, -1000, 1096, -178, -1000, -1000, 2167, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1926, -1000, 705, 1439,
	1439, 1266, 357, 356, 1272, 1582, -1000, 15180, -1000, 2176,
	-1000, -1000, 1444, -1000, -1000, 1197, 1149, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 199, 6395, 195, 6395, -1000,
	671, -1000, 669, 353, 1419, -61, 14828, 838, 351, -132,
	-1000, -194, -1000, 42665, -1000, 341, -1000, 14828, 1197, -1000,
	14828, 14828, -199, -1000, -1000, -200, -1000, -62, 1149, -135,
	-1000, -1000, 1149, -1000,
}
var sqlPgo = [...]int{

	0, 2677, 2676, 1837, 2673, 2132, 2670, 2668, 2660, 2659,
	2130, 2658, 2656, 2655, 2653, 2652, 2649, 2648, 2646, 2645,
	2642, 2641, 2640, 2638, 2636, 2635, 2633, 2122, 2632, 2118,
	2631, 2630, 2628, 2627, 2625, 31, 2623, 2620, 2617, 2113,
	2615, 2612, 2610, 2607, 2104, 2606, 2098, 2605, 2604, 2095,
	2603, 2602, 2601, 2076, 2599, 2055, 2597, 79, 108, 2040,
	2596, 2595, 2037, 1967, 1963, 2594, 1961, 2590, 2587, 1958,
	1935, 2585, 112, 2584, 2583, 2571, 1887, 1834, 2566, 2565,
	2564, 152, 2562, 1825, 2559, 2558, 2549, 2548, 2543, 2540,
	2535, 2533, 2532, 2529, 2528, 2526, 2524, 2523, 2522, 2520,
	2519, 2517, 2516, 163, 2515, 2513, 1816, 1804, 2512, 2509,
	41, 33, 15, 52, 106, 142, 3085, 135, 2507, 2505,
	2504, 2502, 2500, 2499, 32, 98, 97, 2496, 125, 2493,
	2492, 47, 42, 25, 24, 69, 92, 2490, 2489, 2370,
	28, 2488, 2487, 132, 2485, 93, 27, 2080, 156, 153,
	110, 119, 2481, 2469, 2467, 45, 118, 10, 4, 1,
	8, 2, 2466, 3, 5, 2465, 2463, 20, 85, 36,
	2459, 68, 18, 2452, 2448, 130, 2446, 56, 94, 1606,
	95, 126, 1933, 100, 2408, 67, 19, 55, 2407, 2406,
	158, 37, 75, 149, 107, 2402, 46, 159, 134, 65,
	128, 136, 2400, 2398, 2396, 104, 2395, 114, 88, 2390,
	2386, 71, 2385, 96, 137, 2384, 146, 105, 2381, 2378,
	89, 2375, 124, 2373, 2368, 157, 145, 111, 16, 43,
	70, 13, 1618, 1616, 133, 90, 53, 50, 2367, 810,
	1172, 1149, 76, 2366, 82, 58, 62, 61, 87, 139,
	29, 2363, 2362, 131, 2361, 2360, 2359, 2358, 2357, 103,
	2356, 2355, 2353, 80, 40, 116, 73, 34, 150, 127,
	109, 155, 99, 2350, 81, 123, 2348, 264, 2346, 2345,
	1851, 115, 2344, 2342, 2340, 1724, 1624, 1406, 292, 2339,
	2338, 1069, 1050, 2337, 2336, 77, 2334, 117, 102, 91,
	144, 143, 121, 2332, 120, 26, 2331, 57, 22, 0,
	1138, 78, 2329, 122, 72, 2328, 2323, 2321, 2319, 30,
	11, 9, 7, 14, 12, 51, 49, 2318, 2316, 129,
	83, 64, 2315, 154, 2312, 2310, 2308, 38, 2304, 23,
	2303, 21, 2302, 2301, 17, 6, 2299, 2298, 147, 2297,
	86, 2296, 2111, 2294, 151, 2292, 2288, 1948, 2285, 35,
	101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 13, 13,
	14, 23, 17, 25, 12, 20, 18, 16, 16, 22,
	22, 126, 126, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 123, 123,
	128, 128, 128, 130, 130, 127, 127, 122, 122, 27,
	27, 70, 70, 113, 63, 63, 63, 307, 307, 308,
	308, 109, 109, 110, 110, 110, 110, 111, 111, 112,
	112, 112, 37, 37, 37, 29, 29, 29, 29, 29,
	30, 30, 31, 31, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 46,
	46, 47, 47, 47, 47, 47, 47, 48, 48, 48,
	48, 49, 49, 49, 49, 49, 49, 49, 49, 54,
	54, 54, 52, 52, 52, 51, 51, 51, 50, 50,
	50, 53, 53, 53, 181, 181, 180, 180, 184, 184,
	55, 55, 55, 55, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 58, 58, 58, 58,
	58, 58, 58, 276, 276, 275, 56, 56, 251, 251,
	59, 59, 206, 206, 60, 60, 60, 60, 60, 61,
	61, 71, 71, 348, 348, 348, 352, 352, 353, 353,
	354, 354, 354, 354, 354, 354, 354, 350, 350, 66,
	66, 66, 66, 67, 67, 67, 68, 68, 108, 108,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 32,
	33, 33, 34, 34, 35, 35, 35, 35, 35, 77,
	77, 77, 79, 76, 76, 76, 78, 78, 78, 78,
	80, 80, 81, 81, 81, 81, 81, 82, 82, 301,
	299, 299, 300, 300, 153, 153, 153, 153, 153, 154,
	154, 154, 306, 306, 306, 306, 306, 306, 305, 305,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 95, 95, 95,
	103, 103, 103, 103, 103, 103, 103, 84, 84, 89,
	89, 89, 89, 89, 85, 85, 90, 90, 91, 91,
	92, 92, 92, 92, 92, 92, 86, 86, 86, 86,
	94, 94, 94, 94, 93, 93, 99, 99, 99, 99,
	99, 99, 96, 96, 96, 96, 97, 97, 97, 100,
	100, 100, 100, 87, 87, 88, 88, 101, 101, 102,
	102, 102, 102, 102, 98, 98, 98, 349, 349, 351,
	351, 64, 64, 42, 42, 43, 43, 155, 155, 156,
	156, 230, 230, 230, 230, 157, 157, 129, 129, 129,
	158, 158, 159, 159, 160, 160, 160, 162, 162, 163,
	163, 164, 164, 161, 161, 161, 229, 317, 317, 318,
	318, 318, 318, 318, 318, 319, 319, 319, 319, 319,
	319, 319, 315, 315, 316, 313, 313, 314, 314, 314,
	314, 355, 355, 228, 228, 167, 167, 320, 320, 320,
	320, 321, 321, 321, 321, 321, 324, 323, 322, 322,
	322, 322, 322, 262, 262, 262, 105, 105, 44, 44,
	44, 135, 135, 45, 45, 41, 41, 41, 210, 210,
	171, 171, 267, 267, 267, 146, 146, 124, 124, 124,
	19, 21, 21, 15, 15, 15, 15, 15, 15, 26,
	26, 24, 24, 211, 211, 212, 212, 65, 65, 69,
	69, 74, 74, 104, 104, 104, 104, 104, 104, 28,
	28, 28, 28, 36, 36, 36, 36, 73, 73, 357,
	357, 142, 142, 142, 142, 143, 143, 225, 225, 226,
	226, 358, 358, 227, 227, 227, 137, 136, 138, 138,
	40, 40, 40, 131, 131, 132, 132, 133, 133, 134,
	134, 359, 359, 62, 62, 62, 107, 107, 149, 149,
	222, 222, 222, 224, 224, 223, 223, 223, 196, 196,
	196, 106, 106, 176, 176, 186, 186, 187, 187, 273,
	188, 72, 72, 116, 116, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 117, 117, 117, 117,
	117, 117, 117, 120, 120, 120, 121, 121, 121, 119,
	119, 330, 330, 330, 333, 333, 329, 331, 331, 332,
	332, 356, 356, 197, 197, 197, 166, 165, 165, 169,
	169, 168, 170, 170, 266, 266, 266, 194, 194, 193,
	193, 193, 193, 215, 215, 213, 213, 214, 214, 218,
	218, 219, 219, 219, 220, 220, 221, 221, 192, 192,
	247, 247, 217, 217, 216, 118, 118, 118, 175, 175,
	175, 177, 177, 237, 237, 237, 238, 238, 236, 236,
	236, 236, 268, 268, 268, 268, 268, 268, 268, 268,
	346, 346, 346, 347, 347, 265, 265, 269, 269, 269,
	269, 269, 269, 263, 263, 263, 263, 264, 264, 274,
	274, 200, 200, 200, 200, 198, 198, 199, 199, 270,
	270, 270, 270, 195, 195, 271, 271, 271, 231, 231,
	277, 277, 277, 295, 295, 174, 174, 174, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 279,
	279, 279, 279, 281, 281, 281, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 294, 294, 294, 294, 294, 282,
	282, 289, 289, 290, 290, 291, 292, 283, 283, 284,
	284, 285, 286, 293, 293, 293, 293, 297, 297, 287,
	287, 287, 287, 287, 288, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 208,
	208, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 241, 241, 241, 241, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 325,
	325, 325, 325, 325, 325, 325, 325, 327, 327, 328,
	328, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 334, 334, 335, 335, 337, 337, 338, 338, 339,
	340, 340, 340, 341, 342, 342, 336, 336, 343, 343,
	343, 344, 344, 345, 345, 345, 345, 345, 253, 253,
	254, 255, 261, 261, 261, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 144, 144, 144, 144, 144, 183, 183, 182, 182,
	250, 250, 248, 248, 252, 252, 201, 201, 296, 296,
	296, 296, 296, 296, 296, 202, 202, 202, 209, 203,
	203, 204, 204, 204, 204, 204, 244, 245, 205, 205,
	205, 246, 246, 256, 260, 260, 259, 258, 258, 257,
	257, 234, 234, 235, 235, 233, 232, 191, 191, 190,
	190, 189, 189, 360, 360, 185, 185, 272, 272, 272,
	272, 178, 178, 151, 151, 179, 179, 147, 147, 150,
	150, 148, 148, 148, 148, 172, 172, 173, 173, 145,
	145, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 298, 298, 298, 249, 139, 139, 139, 140,
	140, 141, 141, 303, 303, 303, 304, 304, 304, 304,
	302, 302, 302, 302, 302, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 7, 7, 7, 4, 12, 4,
	12, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	2, 6, 2, 1, 12, 12, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 4, 6, 7, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 7,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 7, 1, 3, 2, 4, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 7, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	1, 0, 9, 9, 6, 7, 5, 3, 5, 1,
	3, 1, 1, 10, 11, 9, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 7,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 3, 2, 0, 1, 3, 1, 1, 3,
	5, 1, 1, 3, 3, 1, 2, 4, 4, 2,
	3, 5, 5, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 1, 0, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 1, 0, 2, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 6, 3, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 2, 3, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 1, 1, 3, 3, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -27, -29, -32, -37,
	-38, -60, -46, -47, -48, -59, -55, -61, -62, -63,
	-64, -56, -70, -69, -71, -74, -72, -65, -66, -75,
	-83, -104, -105, -106, -107, -5, -10, 24, 35, -30,
	-31, 48, -33, 72, -44, -39, 74, 95, -332, 99,
	-49, -53, 103, 110, 113, 135, 144, 230, 237, 258,
	260, 262, 269, -114, -116, 256, -67, -68, -76, -77,
	-78, -79, -108, 281, -84, -85, -86, -87, -88, -89,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, 284, -28, -36, -73, 324, -6, -7,
	-8, -9, -11, -21, 112, -40, -41, -42, -43, -45,
	-330, -50, -51, -52, -54, -117, -115, 377, 257, 333,
	36, 294, 62, 106, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -19, -20, -12, 349,
	356, -120, -118, -119, -121, 274, 341, 304, 381, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 2,
	304, 344, 334, 88, 152, 242, -348, 2, -179, 304,
	88, -148, -139, 370, 4, -309, -311, 20, 21, 24,
	34, 35, 36, 41, 45, 48, 49, 56, 61, 62,
	63, 68, 65, 66, 67, 70, 72, 73, 76, 77,
	78, 86, 87, 89, 91, 95, 97, 99, 102, 103,
	105, 110, 112, 111, 113, 123, 124, 129, 131, 136,
	142, 143, 144, 145, 153, 156, 158, 151, 168, 169,
	170, 174, 175, 176, 179, 178, 183, 184, 187, 188,
	191, 193, 195, 196, 199, 197, 201, 202, 204, 203,
	209, 211, 212, 214, 217, 220, 223, 226, 227, 228,
	229, 230, 231, 233, 235, 237, 239, 240, 241, 242,
	243, 245, 246, 248, 249, 250, 251, 252, 256, 254,
	255, 257, 258, 259, 260, 262, 264, 265, 267, 282,
	283, 295, 269, 270, 271, 272, 273, 277, 275, 278,
	279, 281, 284, 286, 289, 293, 294, 296, 299, 300,
	297, 292, 303, 305, 306, 307, 308, 309, 310, 311,
	312, 319, 320, 324, 325, 326, 327, 330, 331, 332,
	333, 335, 338, 339, 340, 345, 350, 351, 352, 353,
	354, 29, 37, 38, 39, 40, 42, 43, 46, 47,
	52, 53, 54, 57, 90, 92, 93, 109, 114, 115,
	125, 126, 127, 137, 139, 146, 147, 150, 157, 159,
	160, 161, 162, 163, 165, 172, 173, 181, 198, 208,
	210, 221, 225, 234, 236, 244, 266, 276, 287, 288,
	298, 301, 314, 315, 316, 321, 322, 337, 341, 342,
	380, 380, 2, 169, 241, -147, -139, 88, 380, 2,
	304, 334, 344, -210, 88, 329, -139, 237, 22, 2,
	97, 156, 332, 331, 22, 233, 275, 306, 308, 2,
	380, 2, 344, 304, 152, 88, 334, -139, 2, -58,
	2, 377, -57, -5, -39, -49, -59, -55, -10, -27,
	-29, -44, -46, -53, -63, -62, -64, -66, -70, -69,
	-72, -76, -77, -83, -106, -107, 74, 24, 103, 281,
	112, -352, 2, 22, -353, -354, 74, 103, 135, 274,
	156, 97, 331, 304, 2, 169, 2, -139, 2, -348,
	2, 169, 2, -352, 2, -139, 2, -143, 2, 269,
	-139, 380, 380, 380, 380, 380, 188, 56, 266, 278,
	-81, 320, -80, 314, -301, -82, 2, -180, 199, -139,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 2, -103, 278,
	35, 56, 22, 61, 89, 136, 152, 153, 175, 69,
	70, 240, 188, 170, 319, 176, 279, 305, 320, 74,
	335, 309, 111, 4, 88, 199, 280, 314, 380, 380,
	380, -356, 2, 304, 380, 380, 380, 380, 271, 284,
	380, 380, 380, 380, 380, -115, -117, -116, 380, 380,
	380, 380, -168, -169, 328, 164, 108, 219, -114, -116,
	2, -330, -103, 278, 2, 56, 22, -299, 2, -239,
	215, -241, 368, 369, 363, 205, 355, -253, 94, -243,
	-256, 109, 266, 377, -147, -242, 383, 9, -327, -116,
	30, -254, -255, 50, -139, 7, 8, 5, 6, -145,
	-279, -249, -288, 323, 116, 207, -325, -326, 4, -309,
	-303, -280, -290, -284, -287, 165, 59, 80, 81, 84,
	82, 85, 280, 334, 51, 29, 114, 115, 225, 234,
	301, 321, 322, 146, 208, 147, 57, 137, 181, 102,
	38, 40, 42, 43, 52, 53, 90, 92, 93, 125,
	126, 127, 157, 159, 160, 161, 162, 163, 210, 244,
	287, 298, 315, 316, 342, -310, -291, -292, -285, -286,
	75, 117, 134, 155, 148, 167, 171, 182, 185, 194,
	200, 222, 224, 263, 285, -293, -357, 2, 320, 320,
	2, -357, 2, -357, 2, -142, 2, 320, 317, -333,
	245, -329, -139, -333, 380, 380, 382, 380, -165, -166,
	2, 22, 100, 377, 2, -268, 2, 375, -270, -147,
	-116, -269, 377, 216, -3, 2, -270, 146, -147, 2,
	-270, 146, -147, 2, -307, 146, -305, 9, -304, 5,
	4, -309, -311, -310, 59, 2, -139, 2, -150, 146,
	-147, -302, 4, -309, -311, -310, -312, 22, 25, 26,
	27, 28, 30, 31, 32, 33, 44, 50, 51, 55,
	58, 60, 69, 74, 79, 80, 82, 81, 83, 84,
	85, 94, 96, 98, 100, 101, 104, 106, 108, 116,
	118, 130, 132, 133, 135, 138, 140, 149, 152, 154,
	164, 166, 177, 180, 186, 189, 190, 205, 206, 207,
	213, 215, 216, 218, 219, 232, 238, 247, 261, 274,
	280, 290, 302, 304, 313, 317, 318, 323, 328, 329,
	334, 336, 343, 344, 346, 347, 348, 349, 317, 382,
	-179, -172, -139, -233, -232, 379, -239, 2, -239, 2,
	133, 377, -190, -191, -232, -233, 2, -180, 146, -307,
	146, 2, -180, 2, 152, -139, 146, 2, -139, 22,
	133, 2, 166, 2, 166, 2, -271, 2, -270, -181,
	146, 2, -180, -181, 146, 2, -151, 146, 2, -150,
	-139, 146, 2, -308, 146, 2, -307, -206, 377, -276,
	2, -275, -304, 341, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 278,
	215, 382, -180, -239, -251, 377, 133, -239, 215, -139,
	2, 282, 2, 377, -81, 54, 320, -226, 2, -227,
	-136, -137, -138, 168, 239, 243, 354, 317, 360, 133,
	-299, -184, 379, -103, 2, -307, 2, 282, 2, 240,
	279, 56, 133, 2, 2, -349, 2, 215, 133, 2,
	133, 2, 133, 2, 133, 2, 133, 2, 2, 240,
	279, 2, 130, 2, 319, 2, 2, 133, 2, 168,
	239, 295, 2, 304, 344, 2, 133, 133, 354, 2,
	-195, -270, 304, 354, 22, -168, -169, -216, -193, 130,
	-213, -214, 186, 118, 213, -197, 22, 100, -197, -197,
	45, 378, 378, -103, 282, 2, 10, 11, 58, 34,
	368, 369, 370, 371, 128, 372, 373, 366, 367, 365,
	358, 359, 362, 291, 23, 71, 361, 360, 64, 192,
	268, 119, 120, 121, 122, 253, 13, 14, 15, 27,
	218, 185, 355, 148, 285, 363, 16, 17, 18, 167,
	37, 149, -144, -152, -239, -239, -239, -239, -239, 224,
	-189, -234, 375, -116, 377, 377, -116, -239, -182, 377,
	7, -116, -248, 375, -257, -239, -190, 377, 5, 377,
	5, -334, 350, 130, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 236, -297, 345, -297, -297, -281, 377,
	-281, -282, 377, -281, 351, 356, 377, -225, -226, -225,
	317, -143, 382, -333, -173, 377, 377, -185, -272, -239,
	370, -185, -182, -239, 75, -200, 171, 200, 134, 182,
	263, 155, 7, -58, -236, 383, 377, 370, -265, 356,
	-116, -269, 377, -268, -147, 377, -126, 254, -125, 21,
	24, 103, 339, 109, 292, 310, 112, 270, 254, 109,
	349, 109, 112, 254, 292, 310, 270, 254, 109, 383,
	112, -307, -148, 382, -302, 370, 296, 378, -178, -147,
	-191, 377, -167, 205, -135, -331, 349, 205, -167, 377,
	-140, 146, 2, -139, -331, 205, -271, -149, -147, -149,
	281, -139, 31, -128, 382, 49, 259, 109, -128, 109,
	-128, 382, 109, -128, 109, 382, 109, -182, 378, 382,
	-348, -354, 74, 377, 31, -250, -277, -278, -280, -289,
	-283, -287, -288, 41, 47, 46, 173, 172, 311, 198,
	276, 288, 337, 150, 39, 214, 158, 4, 157, 159,
	160, 161, 162, 163, 287, 38, 244, 126, 127, 125,
	102, 93, 92, 210, 43, 42, -291, -292, -285, -286,
	90, 315, 316, 165, 40, 53, 52, 342, 298, -308,
	-348, -301, -182, 31, -226, 2, -358, 382, 184, -154,
	191, 204, 142, 216, 352, -306, 5, 4, -249, -262,
	94, 188, -288, 8, 369, -298, 7, 368, -300, -299,
	-300, 78, 379, -302, -180, 22, 283, 2, -301, -351,
	130, -348, -301, -301, -301, -301, -301, 278, -58, 130,
	-139, 184, -301, 2, -301, 2, 304, 152, 304, -128,
	382, -147, 65, 66, 354, -216, -193, -194, -193, -217,
	-216, 331, -214, -213, -218, -239, 22, -221, 124, 201,
	-239, -241, -115, -115, -115, -170, -266, -239, 238, 152,
	-301, -295, -277, -294, 249, 250, 248, 252, 251, -277,
	-302, 314, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, -239, -239, -239, -239, -239, -239,
	-239, -239, -239, -239, 185, 148, 285, 37, 149, -239,
	317, -239, -239, -239, -239, 197, 205, 207, 323, 116,
	330, 100, 211, -360, 302, 33, -246, -116, 377, -261,
	28, 290, 22, -253, 266, 377, -234, -239, -235, -183,
	-182, 378, 382, -183, -252, -248, -260, -259, 346, 378,
	-182, 343, 22, 100, 370, 2, 7, -207, 353, 196,
	91, 143, 195, -208, 273, -335, 123, 138, 377, 378,
	2, 378, 2, 378, 2, 378, 2, -239, -239, -201,
	2, -296, -182, 4, 353, 196, 91, 143, 195, 273,
	-201, 2, -202, 2, -239, -182, -203, -240, -241, 368,
	369, 363, 377, 266, -204, 2, -239, -183, -239, 44,
	180, 318, -205, -239, 133, -182, -239, -239, -239, -182,
	-182, 2, -182, 2, 377, 7, 7, 314, 314, 7,
	-143, -329, 31, -172, -182, -175, 382, 133, 31, 4,
	-175, 378, 382, 171, 171, -268, -200, 171, -198, 222,
	-198, -198, -346, 377, 376, -265, -302, 375, 384, -183,
	2, -264, -263, 31, -139, 220, 378, -147, 382, 317,
	-211, 69, 60, -229, 146, 60, -313, -139, 69, -314,
	55, 329, 238, 132, -211, 69, -211, 69, 69, -270,
	34, -72, 67, 133, 317, -270, 229, -307, 67, 317,
	34, -72, 133, 317, -150, -302, 67, -274, 357, -139,
	133, 378, 382, -155, -172, -156, -139, -230, -229, -315,
	-316, -313, 152, 329, 117, 31, 109, 229, 109, 31,
	215, 205, -131, 307, 109, -231, 347, -222, -72, 377,
	94, 31, -222, -186, -187, -273, -188, -147, 377, -139,
	-180, -181, -181, -150, -151, -139, -307, -308, 378, -58,
	-275, 317, 336, -156, -57, 24, 74, 103, 378, 382,
	-174, 30, 375, -207, 377, -274, 133, 360, 317, 378,
	320, -227, -153, 243, 289, 255, 277, 8, 7, 7,
	382, -302, -350, -139, 278, -58, -147, -150, -147, -270,
	349, 130, 66, -194, -217, -219, -298, 377, 369, -220,
	266, 267, 382, -124, 32, 98, 174, -147, 354, -239,
	-239, 317, -360, 302, -246, -239, 197, 207, 323, 116,
	330, 100, 211, 133, 377, -240, -240, -182, -239, 377,
	-182, 376, 386, 378, -239, 376, 376, 382, -258, -259,
	104, -239, -169, 382, -168, -239, -182, -182, 378, 378,
	317, 317, 317, 317, 377, -340, 223, 377, 377, -239,
	31, 382, 378, 133, 378, 378, -209, 232, 378, 10,
	11, 368, 369, 370, 371, 128, 372, 373, 366, 367,
	365, 358, 359, 360, 64, 192, 268, 13, 14, 15,
	167, 149, -240, -240, -240, -182, 377, 378, -244, -245,
	133, 130, 31, -205, -205, -205, 378, 133, -182, 382,
	382, 382, 378, 378, 378, 7, 378, 382, 378, 354,
	354, 378, 377, 378, 378, -231, -272, -177, 2, -268,
	-302, -231, -239, -268, -268, -199, 336, 215, 171, -268,
	-263, 378, -347, 7, -265, -264, 7, -238, -237, 131,
	203, 378, -139, 377, -265, 378, -125, -147, -139, -139,
	205, -229, 146, -130, 205, -277, -139, 377, 377, 174,
	174, -139, -139, 146, -139, 146, -139, -139, -126, 254,
	-72, 354, 377, -147, 254, -307, 349, 354, -139, -72,
	377, -302, 254, 354, -109, 145, 211, 296, 133, -147,
	378, 378, 382, -140, 152, -140, -72, -180, -307, -307,
	-72, -147, 109, -132, 105, -359, 360, -139, -215, -213,
	-239, -196, -224, 261, 215, -178, 341, -139, -196, -176,
	382, 133, 360, -178, -128, -128, -128, -128, -350, -307,
	378, -277, 375, 376, 7, 7, -112, 349, -350, -299,
	-299, -136, 327, 63, 243, -299, 382, 217, 242, 88,
	304, -220, -239, -266, -147, 383, -239, -239, -240, -240,
	133, 377, -239, -250, 27, 27, 378, -183, 382, -235,
	-239, 378, -248, 106, -239, 313, 378, 343, -169, -169,
	-169, 5, 196, 143, 195, -208, 195, -208, -208, 7,
	-341, -139, 377, 347, -168, 378, -295, -277, -239, -244,
	-239, -295, -277, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, 100, 205, 211, -240, 382, -183, -245, -244,
	-239, -239, -277, 378, 378, 378, -182, -239, -239, -239,
	378, 7, -57, -192, 138, -274, 382, -192, -199, 377,
	-239, -268, 376, 378, 382, -264, 376, 382, 385, 360,
	-265, 377, -172, -263, 317, 317, 109, 205, 338, -317,
	-314, -239, -171, -267, -139, -328, 377, -325, -326, -145,
	377, 377, -123, 103, 281, -212, 109, -128, 109, -128,
	317, -211, 69, -242, -145, -139, -182, 317, 229, -242,
	-182, 317, -242, -112, 133, 303, 296, -157, 151, -230,
	377, -140, 377, 377, -167, -135, 377, -139, -133, 179,
	-359, -305, -331, -196, -196, -185, 206, 68, 378, -231,
	-187, -177, -239, 378, -113, 76, -113, 7, 376, 378,
	-111, 217, -110, -139, 5, -139, -34, -35, 152, 69,
	231, -302, -139, -147, 216, 378, -124, -302, 27, 27,
	-239, -250, 378, -239, -239, 378, -239, 376, -239, 5,
	-239, 378, 378, 378, 378, -342, -139, -239, 378, 378,
	378, -245, 133, 100, 211, 377, -239, 378, 378, 382,
	378, 378, 378, 378, -247, 140, 45, -268, -247, -172,
	-236, 7, -237, -302, 375, -264, -172, 378, -139, -139,
	-229, 109, -318, 69, -319, 58, 117, 74, 205, 207,
	329, 238, 55, 94, 247, 378, 378, 382, -146, -190,
	58, -146, -239, 377, -171, -172, 205, 94, 205, 94,
	87, 325, -139, -139, -147, -139, -139, 377, 378, -147,
	-307, 378, -302, -308, 314, -158, -159, 228, 149, -171,
	377, -172, -155, 31, -171, 215, -134, 178, -359, -305,
	-131, -223, 377, 215, -72, -196, 360, 87, 87, 376,
	382, 377, 360, 360, 382, 22, 377, 22, 377, -124,
	-239, -239, 378, 378, -169, -336, 228, 378, -240, 133,
	377, -250, 378, -239, -337, 348, -239, -182, -337, 378,
	-265, 7, 378, -229, -139, -302, -139, 117, 146, 207,
	174, 377, -240, -147, -228, -355, 73, 300, -267, -124,
	-302, -124, 378, -182, 378, 378, 207, 207, -239, -277,
	-128, -128, 317, 317, -182, 317, 317, -242, 45, 226,
	378, -171, 378, 378, -72, 378, -147, -359, -305, -132,
	101, -172, 69, -246, 377, 377, -110, -111, -307, -307,
	-35, -172, -172, 378, -169, 45, -240, -250, 378, 378,
	-338, -339, -139, -264, 376, -319, -140, 205, -239, -141,
	377, -157, 377, -146, -169, 247, -127, 58, -139, -139,
	-169, 377, 377, 187, 242, -147, -228, 378, -157, -228,
	377, -305, -133, 331, 206, 378, -139, -308, -308, 378,
	378, 378, -343, 242, 267, -182, 378, 382, 31, 109,
	378, -320, 193, -139, -172, -124, 378, -147, -122, 336,
	-302, 378, -182, -182, 377, 377, 377, -157, -228, -157,
	-171, -134, 281, -231, 378, 378, 378, -344, -345, 37,
	326, 78, -239, -344, -339, -341, 117, -321, -324, -323,
	215, 134, 227, 286, 378, 378, -167, -239, 378, 378,
	-172, -172, -172, -157, 378, -186, -112, -112, -345, 235,
	129, 266, 235, 129, -139, -323, 215, -324, 215, 331,
	97, -320, 378, 378, 378, -228, -231, 27, -322, 202,
	259, 49, 281, -322, -321, 377, 377, -129, 49, 259,
	-157, -345, 20, 207, 94, -160, 228, -161, 228, 378,
	-302, 378, -302, 341, 341, -162, 377, 183, 382, -159,
	-158, -163, -164, -239, 194, 312, -160, 377, 382, 378,
	382, 377, -163, -160, -164, -163, 378, 378, 382, -159,
	-158, -161, 382, -161,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 155,
	157, 0, 319, 0, 164, 166, -2, 0, 0, 0,
	187, 188, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 691, -2, 0, 299, 301, 310, 312,
	314, 316, 317, 0, 370, 372, 374, 376, 378, 380,
	382, 384, 386, 388, 390, 392, 394, 396, 398, 399,
	401, 403, 405, 0, 613, 615, 617, -2, 59, 61,
	63, 65, 67, 77, 0, 168, 170, 172, 174, 177,
	729, 191, 193, 195, 197, -2, 740, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 75, 79, 80, 82, 0,
	0, 706, 708, 710, 712, -2, 0, 0, -2, 7,
	13, 15, 17, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 43, 49, 51, 53, 57, 58,
	0, 0, 0, 0, 0, 0, 0, 130, 283, 0,
	1311, 1235, 1241, 1242, 1266, 1267, 1268, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	156, 158, 159, 0, 0, 0, 1237, 1311, 165, 167,
	0, 0, 0, 0, 0, 578, 274, 1374, 276, 278,
	0, 0, 0, 0, 181, 182, 183, 184, 185, 186,
	189, 190, 0, 0, 0, 0, 0, 273, 271, 220,
	221, 0, 256, 257, 258, 259, 260, 262, 224, 226,
	228, 229, 231, 233, 235, 237, 239, 241, 242, 244,
	246, 247, 249, 251, 252, 254, 579, 0, 0, 0,
	0, 0, 280, 286, 287, 288, 290, 291, 292, 293,
	294, 295, 296, 0, 136, 0, 482, 269, 267, 0,
	132, 0, 610, 0, 282, 611, 612, 607, 608, 1401,
	636, 300, 302, 311, 313, 315, -2, -2, 1495, -2,
	334, -2, 342, 1501, 0, 345, 346, 349, -2, 216,
	371, 373, 375, 377, 379, 381, 383, 385, 387, 389,
	391, 393, 395, 397, 400, 402, 404, 406, 407, 0,
	0, 0, 411, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 410, 412, 413, 414, 0, 614, 616,
	618, 0, 567, 731, 60, 62, 64, 66, 0, 0,
	169, 171, 173, 175, 178, -2, 704, 705, 192, 194,
	196, 198, -2, 0, 735, 735, 735, 0, 0, 705,
	703, 0, 303, 0, 305, 0, 411, 308, 309, 350,
	351, 941, 0, 0, 0, 0, 0, 0, 1014, 1044,
	1046, 1466, 1495, 0, 1048, 1049, 0, 1051, 1053, 1054,
	0, 1057, 1058, 1210, 1237, 1251, 1252, 1253, 1254, 0,
	0, 1257, 0, 1259, 1260, 1261, 1112, 1068, -2, -2,
	1249, 869, 870, 871, 872, -2, 1509, 1072, 1075, 1078,
	1081, 1082, 1085, 1086, 0, 1450, 1467, 1468, 1491, 1492,
	1500, 1504, 1505, 1474, 1488, 1475, 1462, 1472, 1486, 1317,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1275, 903, 904, 909, 910,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 912, 638, 620, 629, 638,
	622, 623, 624, 625, 626, 627, 628, 631, 0, 721,
	1380, 724, 1248, 722, 707, 709, 0, 711, 0, 0,
	715, 737, 736, 0, 776, 719, 720, 730, 791, 829,
	806, 797, 0, 0, 2, 74, 0, 1474, 829, 76,
	0, 1474, 829, 78, 0, 1474, 137, 138, 368, 369,
	1276, 1277, 1278, 1279, 1509, 81, 0, 87, 0, 1474,
	1240, 0, 1280, 1281, 1282, 1283, 1284, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 0, 0,
	284, 285, 1245, 1243, 1244, 0, 160, 161, 162, 163,
	0, 0, 1238, 1219, 1217, 1218, 176, 546, 1474, -2,
	1474, 570, 546, 574, -2, 728, 1474, 652, 275, 277,
	0, 180, 0, 665, 0, 667, 0, 682, 835, 122,
	1474, 201, 214, 122, 1474, 204, 122, 1474, 207, 1233,
	122, 1474, 210, 211, 1474, 213, 139, 270, 0, 0,
	-2, 263, 265, -2, 261, 225, 227, 230, 232, 234,
	236, 238, 240, 243, 245, 248, 250, 253, 255, -2,
	0, 0, 0, 481, 0, 0, 0, 609, 0, 635,
	318, 0, 331, 0, 333, 1461, -2, -2, 337, 639,
	643, 644, 645, 0, 0, 0, 0, 0, 0, 0,
	347, 217, 0, 408, 409, 417, 418, 0, 421, 442,
	454, 0, 0, 425, 427, 480, 429, 0, 0, 431,
	0, 433, 0, 435, 0, 437, 0, 439, 441, 443,
	455, 445, 730, 447, 0, 449, 453, 0, 458, 0,
	460, 461, 462, 0, 0, 468, 0, 0, 415, 416,
	122, 833, 0, 0, 0, -2, 0, 748, 773, 0,
	751, 752, 0, 0, 0, 0, 733, 734, 0, 0,
	0, 693, 694, 304, 0, 307, 0, 0, 0, 0,
	1145, 1146, 1147, 1148, 1149, 1150, 1153, 1154, 1151, 1152,
	1155, 1156, 0, 0, 0, 0, 0, 1157, 0, 0,
	0, 0, 0, 0, 0, 0, 1158, 1159, 1160, 0,
	0, 1162, 0, 1164, 0, 0, 0, 0, 0, 0,
	1224, 0, 0, 1161, 946, 947, 948, 980, 981, 0,
	1045, 1221, 1214, 1047, 0, 1167, -2, 1168, 0, 0,
	1050, 1055, 1056, 1167, 0, 1209, -2, 0, 1256, 0,
	938, 1114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1190, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 888, 906, 917, 914, 913, 890, 0,
	889, 887, 0, 891, 0, 0, 0, 619, -2, 621,
	0, 633, 0, 723, 0, 0, 0, 780, 1225, 1229,
	1230, 780, 0, 1168, 0, 0, 0, 0, 826, 826,
	826, 824, 800, 0, 806, 0, -2, 830, 818, 0,
	-2, 797, 0, 0, 831, 0, 88, 604, 101, 0,
	604, 604, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 820, 1236, 0, 1215, 1216, 152, 0, 0, 1231,
	1220, 488, 0, 0, 568, 0, 727, 0, 0, 0,
	0, 1474, 577, 1269, 654, 0, 839, 0, 668, 0,
	0, 836, 0, 199, 0, 120, 121, 0, 202, 0,
	205, 0, 0, 208, 0, 0, 0, 0, 730, 0,
	0, 289, 0, 0, 730, 0, 1170, 847, 848, 849,
	850, 851, 938, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 900,
	0, 875, 875, 875, 892, 893, 901, 902, 907, 908,
	919, 920, 922, 924, 918, 918, 918, 915, 916, 820,
	0, 0, 0, 0, -2, 339, 0, 641, 0, 646,
	359, 360, 361, 648, 649, 343, 362, 363, 364, 365,
	366, 367, 0, 563, 0, 565, 1262, 0, 340, 352,
	341, 344, 0, 218, 419, 420, 422, 423, 424, 428,
	0, 477, 430, 432, 434, 436, 438, 446, 450, 730,
	456, 459, 463, 464, 465, 466, 0, 0, 0, 566,
	0, 320, 0, 472, 0, 748, 773, 697, 747, 698,
	772, 774, 749, 750, 755, 759, 760, 763, 766, 767,
	757, 941, 716, 717, 718, 741, 742, 589, 0, 0,
	306, 942, 843, 844, 894, 895, 896, 897, 898, 943,
	944, 0, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, -2, -2, -2, -2, -2, -2, -2, -2,
	967, 968, 969, 970, 971, 972, 973, 974, -2, -2,
	-2, 978, 979, -2, 1163, 1165, 0, 1224, 0, -2,
	0, -2, -2, -2, -2, 992, 0, 994, 997, 999,
	1001, 0, 0, 0, 0, 1223, 1011, 1201, 0, 0,
	1142, 1143, 1144, 996, 0, 0, 1222, 1213, 0, 0,
	1166, 1052, 0, 0, 0, 1174, 1208, 1204, 0, 1059,
	740, 0, 0, 0, 0, 1066, 0, 1265, 925, 926,
	927, 928, 929, 930, 939, 1122, 0, 0, 0, 1073,
	1074, 1076, 1077, 1079, 1080, 1083, 1084, 0, 0, 0,
	1090, 0, 1177, -2, -2, -2, -2, -2, -2, -2,
	0, 1092, 0, 1094, 1168, 1187, 0, 0, 1015, 0,
	0, 0, 0, 1495, 0, 1097, 1168, 1195, 0, 0,
	0, 0, 0, 1168, 0, 1200, 0, 0, 0, 0,
	0, 1108, 0, 1110, 0, 0, 0, 0, 0, 0,
	632, 725, 0, 0, 0, 839, 0, 0, 0, 1228,
	839, 775, 0, 0, 0, 0, 0, 0, 821, 825,
	822, 823, 0, 0, 806, 818, 788, 0, 0, 0,
	795, 796, 817, 0, 816, 805, -2, 0, 0, 0,
	0, 0, 603, 103, 1474, 0, 124, 0, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 1239, 0, 142, 0, 1246,
	0, 0, 0, 0, 0, 487, 1245, 489, 491, 492,
	493, 494, 1270, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 656, 662, 0, 754, 0, 680, 670, 0,
	0, 0, 680, 684, 685, 687, 688, 0, 0, 837,
	215, 122, 122, 1234, 122, 122, 140, 212, 272, 222,
	264, 0, 0, 0, 266, 0, 0, 0, 268, 0,
	840, 842, 0, 852, 0, 151, 0, 0, 0, 332,
	0, 640, 647, 0, 356, 0, 358, 564, 1264, 1263,
	0, 219, 479, 297, 448, 451, 474, 475, 476, 834,
	0, 0, 473, 701, 702, 0, 761, 0, 0, 758,
	764, 765, 0, 744, 587, 588, 0, 0, 0, -2,
	-2, 0, 0, 0, 1012, -2, 993, 995, 998, 1000,
	1002, 0, 0, 0, 0, 0, 0, 0, 1013, 1167,
	0, 1211, 1214, -2, 1169, 1172, 1173, 0, 0, 1205,
	0, 0, 0, 0, 739, 740, 740, 740, 1065, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 1089, 0, 1091, 1093, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 1019, 1020, 0, 1167, 1096, 1193, 1194,
	0, 0, 0, 0, 0, 0, 1102, 0, 1199, 0,
	0, 0, 1106, 1107, 1109, 0, 873, 0, 899, 921,
	923, 911, 730, 1247, 777, 769, 1226, 820, 779, 781,
	1227, 769, 1169, 808, 0, 810, 0, 0, 0, 812,
	0, 801, 0, 803, 818, 793, 0, 0, 786, 0,
	785, 806, 814, 0, 0, 832, 102, 593, 0, 0,
	0, 105, 1474, 113, 0, 518, 0, 0, 0, 0,
	0, 606, 114, 1474, 122, 1474, 122, 115, 89, 604,
	90, 0, 0, 599, 0, 591, 0, 0, 590, 91,
	0, 601, 0, 0, 151, 0, 0, 153, 0, 1232,
	496, 545, 0, 0, 1270, 0, 485, 546, 571, -2,
	573, 0, 0, 658, 662, 0, 661, 728, 680, 753,
	838, 663, 680, 0, 0, 0, 672, 669, 666, 839,
	0, 0, 0, 0, 200, 203, 206, 209, 279, 0,
	0, 1171, 0, 845, 0, 0, 131, 0, 281, 329,
	330, 335, 354, 355, 357, 353, 0, 0, 0, 0,
	0, 0, 0, 743, 589, 0, 945, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1202, 0, 0, 0,
	1213, -2, 1175, 1203, 1207, 0, 1060, 0, 0, 0,
	0, 1258, 931, 932, 933, 934, 935, 936, 937, 0,
	1120, 1121, 1125, 0, 0, 1071, 0, 0, 1176, 1186,
	1188, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, -2, -2, -2, 1034, 1035, 1036, -2,
	-2, -2, 0, 0, 0, 1189, 0, 0, 1191, 1192,
	1196, 1197, 0, 1099, 1100, 1101, 1198, 0, 0, 0,
	905, 0, 0, 771, 0, 778, 0, 771, 809, 0,
	828, 811, 791, 802, 0, 799, 789, 0, 790, 0,
	818, 0, 0, 798, 0, 0, 0, 0, 123, 516,
	535, 0, 0, 580, 586, 586, 0, 1069, 1070, 0,
	0, 0, 107, 0, 0, 0, 0, 111, 0, 117,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 95,
	0, 0, 94, 129, 0, 0, 154, 501, 0, 490,
	0, 0, 0, 488, 0, 569, 0, 0, 660, 662,
	0, 653, 654, 179, 664, 678, 679, 677, 0, 680,
	686, 683, 689, 0, 0, 133, 0, 0, 846, 853,
	149, 1363, 147, 144, 146, 298, 321, 322, 0, 0,
	328, 469, 470, 471, 756, 762, 745, 589, 0, 0,
	-2, 0, 1005, -2, -2, 1138, 1169, 1212, 1206, 1255,
	740, 1061, 1063, 1064, 940, 1127, 1124, 0, 1111, 1087,
	1088, 1185, 0, 0, 0, 0, 1169, 1140, 1098, 0,
	1104, 1105, 874, 726, 1116, 0, 0, 782, 1116, 0,
	806, 804, 787, 783, 0, 794, 0, 815, 595, 597,
	104, 0, 517, 0, 520, 0, 0, 0, 0, 526,
	527, 0, 0, 0, 0, 537, 544, 0, 589, 1250,
	0, 589, 0, 0, 0, 0, 0, 119, 0, 0,
	605, 0, 122, 122, 594, 0, 0, 0, 0, 600,
	592, 0, 602, 141, 0, 483, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 650, 662, 0, 655,
	656, 0, 0, 0, 671, 681, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 324, 0, 326, 0, 746,
	-2, -2, 1006, 1139, 0, 740, 0, 1113, -2, 0,
	0, 0, 1141, 0, 713, 0, 770, 768, 714, 827,
	818, 0, 813, 106, 0, 521, 522, 1270, 0, 525,
	528, 0, 530, 1272, 496, 0, 541, 542, 581, 582,
	585, 583, 586, 740, 539, 0, 108, 109, 118, 126,
	110, 116, 0, 0, 740, 0, 0, 819, 0, 0,
	544, 0, 534, 496, 486, 544, 0, 0, 657, 658,
	0, 0, 0, 690, 0, 0, 148, 0, 143, 145,
	323, 0, 0, 1062, 1130, 0, -2, 0, 1042, 1103,
	1115, 1117, 0, 792, 784, 519, 523, 0, 0, 550,
	0, 538, 0, 589, 0, 0, 128, 0, 596, 598,
	0, 0, 0, 0, 0, 0, 496, 544, 484, 496,
	0, 659, 660, 0, 674, 839, 676, 0, 0, 150,
	325, 327, 0, 0, 0, 1126, 1043, 0, 0, 0,
	529, 555, 0, 0, 0, 584, 1060, 546, 112, 0,
	125, 0, 0, 0, 0, 0, 0, 532, 496, 575,
	0, 651, 0, 675, 151, 151, 1123, 1128, 1131, -2,
	1434, 1308, 0, 1129, 1118, 1119, 0, 531, 551, 552,
	0, 547, 548, 549, 1271, 543, 550, 127, 98, 100,
	0, 0, 0, 533, 544, 839, 134, 135, 0, 1133,
	1134, 1135, 1136, 1137, 524, 553, 0, 554, 0, 0,
	0, 555, 0, 0, 499, 496, 673, 0, 556, 0,
	559, 560, 0, 557, 540, 0, 0, 495, 497, 498,
	576, 1132, 558, 561, 562, 0, 0, 0, 0, 502,
	0, 503, 0, 0, 0, 501, 0, 0, 0, 500,
	506, 0, 509, 511, -2, 0, 504, 0, 0, 507,
	0, 0, 0, 505, 510, 0, 508, 501, 0, 500,
	515, 513, 0, 514,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1107
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1113
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1119
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1128
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1137
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1206
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1229
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = nil
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = DropCascade
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = DropRestrict
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = DropDefault
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1302
		{
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			return unimplemented(sqllex, "alter using")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1306
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.str = "CSV"
		}
	case 134:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1466
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DELETE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1733
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "DELETE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			return helpWith(sqllex, "INSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{ /* SKIP DOC */
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "GRANT")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "RESET")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{ /* SKIP DOC */
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			return unimplemented(sqllex, "set local")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &ScrubOptionConstraint{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2081
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			return unimplemented(sqllex, "set from current")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = Low
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = Normal
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = High
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.str = "client_encoding"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2343
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2365
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2502
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2510
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2521
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2543
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2554
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2558
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2562
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2566
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2570
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2574
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2580
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2584
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2588
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2594
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2729
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = DropDefault
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			return unimplemented(sqllex, "match full")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			return unimplemented(sqllex, "match partial")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			return unimplemented(sqllex, "match simple")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = NoAction
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = Restrict
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = Cascade
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = SetNull
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = SetDefault
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = nil
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = true
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = false
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3250
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = Ascending
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = Descending
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3305
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3307
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = true
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = false
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3440
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.str = ""
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = ReadOnly
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = ReadWrite
		}
	case 650:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.str = ""
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.str = ""
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3609
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			return helpWith(sqllex, "INSERT")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3692
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 681:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3732
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3859
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			return helpWith(sqllex, "SELECT")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			return helpWith(sqllex, "VALUES")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "TABLE")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3943
		{
			return helpWith(sqllex, "SELECT")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			return helpWith(sqllex, "TABLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3998
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4007
		{
			return unimplemented(sqllex, "cte")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4011
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4015
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4019
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = false
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = false
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4043
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = false
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = true
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			return helpWith(sqllex, "VALUES")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4251
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4266
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &From{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4333
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4370
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = nil
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = true
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = false
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.str = astFullJoin
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.str = astLeftJoin
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.str = astRightJoin
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.str = astInnerJoin
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4554
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4640
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4654
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4662
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4686
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4697
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = jsonbColType
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = jsonColType
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4795
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = nil
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4956
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4988
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5028
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = year
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = month
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = day
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = hour
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = minute
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = month
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = hour
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = minute
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = minute
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = nil
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = second
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5123
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5158
		{
			return unimplemented(sqllex, "at tz")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5432
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5609
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5662
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5663
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5676
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5687
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5703
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5704
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5708
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5710
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5726
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5735
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5736
		{
			return unimplemented(sqllex, "current role")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5745
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5776
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5785
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5786
		{
			return unimplemented(sqllex, "treat")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5823
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5828
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5832
		{
			return unimplemented(sqllex, "within group")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5833
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5868
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.str = ""
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5930
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5931
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5932
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5936
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5942
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5943
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5944
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5945
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5946
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = Any
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = Some
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = All
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = Plus
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = Minus
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = Mult
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = Div
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = Mod
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = Bitand
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = Bitor
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = Pow
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = Bitxor
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = LT
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = GT
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = EQ
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = LE
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = GE
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = NE
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = Like
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = NotLike
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = ILike
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = NotILike
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6162
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6226
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6243
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6266
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6301
		{
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6302
		{
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6333
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6361
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6390
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6434
		{
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6459
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6467
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6470
		{
			return unimplemented(sqllex, "func const")
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6472
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6476
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6479
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = DNull
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6496
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6500
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6506
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6541
		{
			sqlVAL.str = ""
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6547
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6551
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
