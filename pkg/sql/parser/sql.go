// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PHYSICAL = 57574
const PHYSICAL_CHECK = 57575
const PLACING = 57576
const PLANS = 57577
const POSITION = 57578
const PRECEDING = 57579
const PRECISION = 57580
const PREPARE = 57581
const PRIMARY = 57582
const PRIORITY = 57583
const QUERIES = 57584
const QUERY = 57585
const RANGE = 57586
const READ = 57587
const REAL = 57588
const RECURSIVE = 57589
const REF = 57590
const REFERENCES = 57591
const REGCLASS = 57592
const REGPROC = 57593
const REGPROCEDURE = 57594
const REGNAMESPACE = 57595
const REGTYPE = 57596
const REMOVE_PATH = 57597
const RENAME = 57598
const REPEATABLE = 57599
const RELEASE = 57600
const RESET = 57601
const RESTORE = 57602
const RESTRICT = 57603
const RESUME = 57604
const RETURNING = 57605
const REVOKE = 57606
const RIGHT = 57607
const ROLLBACK = 57608
const ROLLUP = 57609
const ROW = 57610
const ROWS = 57611
const RSHIFT = 57612
const SAVEPOINT = 57613
const SCATTER = 57614
const SCRUB = 57615
const SEARCH = 57616
const SECOND = 57617
const SELECT = 57618
const SEQUENCES = 57619
const SERIAL = 57620
const SERIALIZABLE = 57621
const SESSION = 57622
const SESSIONS = 57623
const SESSION_USER = 57624
const SET = 57625
const SETTING = 57626
const SETTINGS = 57627
const SHOW = 57628
const SIMILAR = 57629
const SIMPLE = 57630
const SMALLINT = 57631
const SMALLSERIAL = 57632
const SNAPSHOT = 57633
const SOME = 57634
const SPLIT = 57635
const SQL = 57636
const START = 57637
const STATUS = 57638
const STDIN = 57639
const STRICT = 57640
const STRING = 57641
const STORE = 57642
const STORING = 57643
const SUBSTRING = 57644
const SYMMETRIC = 57645
const SYSTEM = 57646
const TABLE = 57647
const TABLES = 57648
const TEMP = 57649
const TEMPLATE = 57650
const TEMPORARY = 57651
const TESTING_RANGES = 57652
const TESTING_RELOCATE = 57653
const TEXT = 57654
const THAN = 57655
const THEN = 57656
const TIME = 57657
const TIMESTAMP = 57658
const TIMESTAMPTZ = 57659
const TO = 57660
const TRAILING = 57661
const TRACE = 57662
const TRANSACTION = 57663
const TREAT = 57664
const TRIM = 57665
const TRUE = 57666
const TRUNCATE = 57667
const TYPE = 57668
const UNBOUNDED = 57669
const UNCOMMITTED = 57670
const UNION = 57671
const UNIQUE = 57672
const UNKNOWN = 57673
const UPDATE = 57674
const UPSERT = 57675
const USE = 57676
const USER = 57677
const USERS = 57678
const USING = 57679
const UUID = 57680
const VALID = 57681
const VALIDATE = 57682
const VALUE = 57683
const VALUES = 57684
const VARCHAR = 57685
const VARIADIC = 57686
const VIEW = 57687
const VARYING = 57688
const WHEN = 57689
const WHERE = 57690
const WINDOW = 57691
const WITH = 57692
const WITHIN = 57693
const WITHOUT = 57694
const WRITE = 57695
const YEAR = 57696
const ZONE = 57697
const NOT_LA = 57698
const WITH_LA = 57699
const AS_LA = 57700
const CONTAINED_BY = 57701
const HAS_SOME_KEY = 57702
const HAS_ALL_KEYS = 57703
const POSTFIXOP = 57704
const UMINUS = 57705
const HELPTOKEN = 57706

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PHYSICAL_CHECK",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6931

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	384, 54,
	-2, 714,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 564,
	-2, 0,
	-1, 64,
	96, 714,
	157, 714,
	332, 714,
	333, 714,
	-2, 0,
	-1, 74,
	1, 676,
	216, 676,
	263, 676,
	379, 676,
	381, 676,
	383, 676,
	384, 676,
	-2, 689,
	-1, 107,
	4, 716,
	20, 716,
	21, 716,
	23, 716,
	28, 716,
	33, 716,
	34, 716,
	35, 716,
	36, 716,
	37, 716,
	38, 716,
	39, 716,
	40, 716,
	41, 716,
	42, 716,
	44, 716,
	45, 716,
	46, 716,
	47, 716,
	48, 716,
	51, 716,
	52, 716,
	53, 716,
	55, 716,
	56, 716,
	60, 716,
	61, 716,
	62, 716,
	64, 716,
	65, 716,
	66, 716,
	67, 716,
	69, 716,
	71, 716,
	72, 716,
	75, 716,
	76, 716,
	77, 716,
	85, 716,
	86, 716,
	87, 716,
	88, 716,
	89, 716,
	90, 716,
	91, 716,
	92, 716,
	94, 716,
	96, 716,
	98, 716,
	101, 716,
	102, 716,
	104, 716,
	108, 716,
	109, 716,
	110, 716,
	111, 716,
	112, 716,
	113, 716,
	114, 716,
	122, 716,
	123, 716,
	124, 716,
	125, 716,
	126, 716,
	128, 716,
	130, 716,
	135, 716,
	136, 716,
	138, 716,
	141, 716,
	142, 716,
	145, 716,
	146, 716,
	147, 716,
	148, 716,
	151, 716,
	152, 716,
	154, 716,
	157, 716,
	158, 716,
	159, 716,
	160, 716,
	161, 716,
	162, 716,
	163, 716,
	164, 716,
	166, 716,
	169, 716,
	170, 716,
	171, 716,
	173, 716,
	174, 716,
	175, 716,
	176, 716,
	177, 716,
	179, 716,
	180, 716,
	182, 716,
	184, 716,
	185, 716,
	188, 716,
	189, 716,
	192, 716,
	194, 716,
	196, 716,
	197, 716,
	198, 716,
	199, 716,
	200, 716,
	202, 716,
	203, 716,
	204, 716,
	205, 716,
	209, 716,
	210, 716,
	211, 716,
	212, 716,
	213, 716,
	215, 716,
	217, 716,
	218, 716,
	221, 716,
	222, 716,
	224, 716,
	226, 716,
	227, 716,
	228, 716,
	229, 716,
	230, 716,
	231, 716,
	232, 716,
	233, 716,
	235, 716,
	236, 716,
	237, 716,
	238, 716,
	239, 716,
	241, 716,
	242, 716,
	243, 716,
	244, 716,
	245, 716,
	246, 716,
	247, 716,
	248, 716,
	250, 716,
	251, 716,
	252, 716,
	253, 716,
	254, 716,
	256, 716,
	257, 716,
	258, 716,
	259, 716,
	260, 716,
	261, 716,
	262, 716,
	264, 716,
	266, 716,
	267, 716,
	268, 716,
	269, 716,
	271, 716,
	272, 716,
	273, 716,
	274, 716,
	275, 716,
	277, 716,
	278, 716,
	279, 716,
	280, 716,
	281, 716,
	283, 716,
	284, 716,
	285, 716,
	286, 716,
	288, 716,
	289, 716,
	290, 716,
	291, 716,
	293, 716,
	294, 716,
	295, 716,
	296, 716,
	297, 716,
	298, 716,
	299, 716,
	300, 716,
	301, 716,
	302, 716,
	304, 716,
	306, 716,
	307, 716,
	308, 716,
	309, 716,
	310, 716,
	311, 716,
	312, 716,
	313, 716,
	315, 716,
	316, 716,
	317, 716,
	320, 716,
	321, 716,
	322, 716,
	323, 716,
	325, 716,
	326, 716,
	327, 716,
	328, 716,
	331, 716,
	332, 716,
	333, 716,
	334, 716,
	336, 716,
	338, 716,
	339, 716,
	340, 716,
	341, 716,
	342, 716,
	343, 716,
	346, 716,
	351, 716,
	352, 716,
	353, 716,
	354, 716,
	355, 716,
	-2, 0,
	-1, 124,
	1, 679,
	216, 679,
	263, 679,
	379, 679,
	381, 679,
	383, 679,
	384, 679,
	-2, 688,
	-1, 129,
	1, 613,
	169, 613,
	241, 613,
	245, 613,
	383, 613,
	384, 613,
	-2, 0,
	-1, 131,
	1, 613,
	383, 613,
	384, 613,
	-2, 0,
	-1, 132,
	1, 613,
	383, 613,
	384, 613,
	-2, 0,
	-1, 133,
	1, 617,
	383, 617,
	384, 617,
	-2, 0,
	-1, 140,
	4, 722,
	5, 722,
	6, 722,
	7, 722,
	8, 722,
	9, 722,
	20, 722,
	21, 722,
	23, 722,
	28, 722,
	29, 722,
	33, 722,
	34, 722,
	35, 722,
	36, 722,
	37, 722,
	38, 722,
	39, 722,
	40, 722,
	41, 722,
	42, 722,
	44, 722,
	45, 722,
	46, 722,
	47, 722,
	48, 722,
	49, 722,
	50, 722,
	51, 722,
	52, 722,
	53, 722,
	55, 722,
	56, 722,
	58, 722,
	60, 722,
	61, 722,
	62, 722,
	64, 722,
	65, 722,
	66, 722,
	67, 722,
	69, 722,
	71, 722,
	72, 722,
	74, 722,
	75, 722,
	76, 722,
	77, 722,
	79, 722,
	80, 722,
	81, 722,
	83, 722,
	84, 722,
	85, 722,
	86, 722,
	87, 722,
	88, 722,
	89, 722,
	90, 722,
	91, 722,
	92, 722,
	94, 722,
	96, 722,
	98, 722,
	101, 722,
	102, 722,
	104, 722,
	108, 722,
	109, 722,
	110, 722,
	111, 722,
	112, 722,
	113, 722,
	114, 722,
	115, 722,
	116, 722,
	122, 722,
	123, 722,
	124, 722,
	125, 722,
	126, 722,
	128, 722,
	130, 722,
	133, 722,
	135, 722,
	136, 722,
	138, 722,
	141, 722,
	142, 722,
	145, 722,
	146, 722,
	147, 722,
	148, 722,
	149, 722,
	151, 722,
	152, 722,
	154, 722,
	156, 722,
	157, 722,
	158, 722,
	159, 722,
	160, 722,
	161, 722,
	162, 722,
	163, 722,
	164, 722,
	166, 722,
	168, 722,
	169, 722,
	170, 722,
	171, 722,
	172, 722,
	173, 722,
	174, 722,
	175, 722,
	176, 722,
	177, 722,
	179, 722,
	180, 722,
	182, 722,
	183, 722,
	184, 722,
	185, 722,
	186, 722,
	188, 722,
	189, 722,
	192, 722,
	194, 722,
	195, 722,
	196, 722,
	197, 722,
	198, 722,
	199, 722,
	200, 722,
	201, 722,
	202, 722,
	203, 722,
	204, 722,
	205, 722,
	206, 722,
	208, 722,
	209, 722,
	210, 722,
	211, 722,
	212, 722,
	213, 722,
	215, 722,
	218, 722,
	221, 722,
	222, 722,
	223, 722,
	224, 722,
	225, 722,
	226, 722,
	227, 722,
	228, 722,
	229, 722,
	230, 722,
	231, 722,
	232, 722,
	233, 722,
	235, 722,
	236, 722,
	237, 722,
	238, 722,
	239, 722,
	241, 722,
	242, 722,
	243, 722,
	244, 722,
	245, 722,
	246, 722,
	247, 722,
	248, 722,
	250, 722,
	251, 722,
	252, 722,
	253, 722,
	254, 722,
	256, 722,
	257, 722,
	258, 722,
	259, 722,
	260, 722,
	261, 722,
	262, 722,
	264, 722,
	265, 722,
	266, 722,
	267, 722,
	268, 722,
	269, 722,
	271, 722,
	272, 722,
	273, 722,
	274, 722,
	275, 722,
	277, 722,
	278, 722,
	279, 722,
	280, 722,
	281, 722,
	282, 722,
	283, 722,
	284, 722,
	285, 722,
	286, 722,
	287, 722,
	288, 722,
	289, 722,
	290, 722,
	291, 722,
	293, 722,
	294, 722,
	295, 722,
	296, 722,
	297, 722,
	298, 722,
	299, 722,
	300, 722,
	301, 722,
	302, 722,
	304, 722,
	306, 722,
	307, 722,
	308, 722,
	309, 722,
	310, 722,
	311, 722,
	312, 722,
	313, 722,
	315, 722,
	316, 722,
	317, 722,
	320, 722,
	321, 722,
	322, 722,
	323, 722,
	324, 722,
	325, 722,
	326, 722,
	327, 722,
	328, 722,
	331, 722,
	332, 722,
	333, 722,
	334, 722,
	335, 722,
	336, 722,
	338, 722,
	339, 722,
	340, 722,
	341, 722,
	342, 722,
	343, 722,
	346, 722,
	351, 722,
	352, 722,
	353, 722,
	354, 722,
	355, 722,
	356, 722,
	366, 722,
	371, 722,
	372, 722,
	373, 722,
	380, 722,
	386, 722,
	-2, 0,
	-1, 143,
	1, 54,
	384, 54,
	-2, 714,
	-1, 517,
	132, 1337,
	318, 1337,
	361, 1337,
	382, 1337,
	-2, 0,
	-1, 518,
	132, 1284,
	318, 1284,
	361, 1284,
	382, 1284,
	-2, 0,
	-1, 520,
	132, 1398,
	318, 1398,
	361, 1398,
	382, 1398,
	-2, 0,
	-1, 522,
	132, 1421,
	318, 1421,
	361, 1421,
	382, 1421,
	-2, 0,
	-1, 529,
	132, 1342,
	318, 1342,
	361, 1342,
	382, 1342,
	-2, 333,
	-1, 555,
	1, 411,
	379, 411,
	381, 411,
	383, 411,
	384, 411,
	-2, 0,
	-1, 556,
	1, 463,
	129, 463,
	379, 463,
	381, 463,
	383, 463,
	384, 463,
	-2, 0,
	-1, 562,
	1, 425,
	379, 425,
	381, 425,
	383, 425,
	384, 425,
	-2, 0,
	-1, 564,
	1, 429,
	379, 429,
	381, 429,
	383, 429,
	384, 429,
	-2, 0,
	-1, 567,
	1, 437,
	379, 437,
	381, 437,
	383, 437,
	384, 437,
	-2, 0,
	-1, 568,
	1, 442,
	379, 442,
	381, 442,
	383, 442,
	384, 442,
	-2, 0,
	-1, 571,
	1, 452,
	379, 452,
	381, 452,
	383, 452,
	384, 452,
	-2, 0,
	-1, 587,
	117, 724,
	129, 724,
	187, 724,
	214, 724,
	-2, 683,
	-1, 590,
	117, 723,
	129, 723,
	187, 723,
	214, 723,
	-2, 680,
	-1, 647,
	380, 1262,
	-2, 1255,
	-1, 648,
	380, 1263,
	-2, 1256,
	-1, 654,
	5, 909,
	380, 909,
	-2, 1473,
	-1, 679,
	5, 868,
	-2, 1442,
	-1, 680,
	5, 903,
	380, 903,
	-2, 1444,
	-1, 681,
	5, 878,
	-2, 1445,
	-1, 682,
	5, 877,
	-2, 1446,
	-1, 683,
	5, 903,
	380, 903,
	-2, 1449,
	-1, 684,
	5, 903,
	380, 903,
	-2, 1450,
	-1, 685,
	5, 904,
	-2, 1453,
	-1, 686,
	5, 860,
	-2, 1454,
	-1, 687,
	5, 860,
	-2, 1455,
	-1, 688,
	5, 885,
	-2, 1459,
	-1, 689,
	5, 870,
	-2, 1460,
	-1, 690,
	5, 871,
	-2, 1461,
	-1, 691,
	5, 861,
	-2, 1467,
	-1, 692,
	5, 862,
	-2, 1468,
	-1, 693,
	5, 863,
	-2, 1469,
	-1, 694,
	5, 864,
	-2, 1470,
	-1, 695,
	5, 865,
	-2, 1471,
	-1, 696,
	5, 866,
	-2, 1472,
	-1, 697,
	5, 860,
	-2, 1479,
	-1, 698,
	5, 869,
	-2, 1484,
	-1, 699,
	5, 867,
	-2, 1487,
	-1, 700,
	5, 901,
	380, 901,
	-2, 1489,
	-1, 701,
	5, 905,
	-2, 1492,
	-1, 702,
	5, 907,
	-2, 1493,
	-1, 703,
	5, 900,
	380, 900,
	-2, 1498,
	-1, 888,
	230, 712,
	-2, 557,
	-1, 892,
	216, 1259,
	-2, 0,
	-1, 927,
	1, 216,
	379, 216,
	381, 216,
	383, 216,
	384, 216,
	-2, 687,
	-1, 934,
	4, 1497,
	10, 1497,
	11, 1497,
	13, 1497,
	14, 1497,
	15, 1497,
	16, 1497,
	17, 1497,
	18, 1497,
	20, 1497,
	21, 1497,
	23, 1497,
	26, 1497,
	28, 1497,
	30, 1497,
	33, 1497,
	34, 1497,
	35, 1497,
	36, 1497,
	37, 1497,
	38, 1497,
	39, 1497,
	40, 1497,
	41, 1497,
	42, 1497,
	44, 1497,
	45, 1497,
	46, 1497,
	47, 1497,
	48, 1497,
	51, 1497,
	52, 1497,
	53, 1497,
	55, 1497,
	56, 1497,
	57, 1497,
	60, 1497,
	61, 1497,
	62, 1497,
	63, 1497,
	64, 1497,
	65, 1497,
	66, 1497,
	67, 1497,
	69, 1497,
	70, 1497,
	71, 1497,
	72, 1497,
	74, 1497,
	75, 1497,
	76, 1497,
	77, 1497,
	85, 1497,
	86, 1497,
	87, 1497,
	88, 1497,
	89, 1497,
	90, 1497,
	91, 1497,
	92, 1497,
	94, 1497,
	96, 1497,
	98, 1497,
	101, 1497,
	102, 1497,
	104, 1497,
	108, 1497,
	109, 1497,
	110, 1497,
	111, 1497,
	112, 1497,
	113, 1497,
	114, 1497,
	118, 1497,
	119, 1497,
	120, 1497,
	121, 1497,
	122, 1497,
	123, 1497,
	124, 1497,
	125, 1497,
	126, 1497,
	127, 1497,
	128, 1497,
	130, 1497,
	133, 1497,
	135, 1497,
	136, 1497,
	138, 1497,
	141, 1497,
	142, 1497,
	145, 1497,
	146, 1497,
	147, 1497,
	148, 1497,
	149, 1497,
	150, 1497,
	151, 1497,
	152, 1497,
	154, 1497,
	156, 1497,
	157, 1497,
	158, 1497,
	159, 1497,
	160, 1497,
	161, 1497,
	162, 1497,
	163, 1497,
	164, 1497,
	166, 1497,
	168, 1497,
	169, 1497,
	170, 1497,
	171, 1497,
	172, 1497,
	173, 1497,
	174, 1497,
	175, 1497,
	176, 1497,
	177, 1497,
	179, 1497,
	180, 1497,
	182, 1497,
	183, 1497,
	184, 1497,
	185, 1497,
	186, 1497,
	188, 1497,
	189, 1497,
	192, 1497,
	193, 1497,
	194, 1497,
	196, 1497,
	197, 1497,
	198, 1497,
	199, 1497,
	200, 1497,
	201, 1497,
	202, 1497,
	203, 1497,
	204, 1497,
	205, 1497,
	209, 1497,
	210, 1497,
	211, 1497,
	212, 1497,
	213, 1497,
	215, 1497,
	218, 1497,
	219, 1497,
	221, 1497,
	222, 1497,
	224, 1497,
	226, 1497,
	227, 1497,
	228, 1497,
	229, 1497,
	230, 1497,
	231, 1497,
	232, 1497,
	233, 1497,
	235, 1497,
	236, 1497,
	237, 1497,
	238, 1497,
	239, 1497,
	241, 1497,
	242, 1497,
	243, 1497,
	244, 1497,
	245, 1497,
	246, 1497,
	247, 1497,
	248, 1497,
	250, 1497,
	251, 1497,
	252, 1497,
	253, 1497,
	254, 1497,
	255, 1497,
	256, 1497,
	257, 1497,
	258, 1497,
	259, 1497,
	260, 1497,
	261, 1497,
	262, 1497,
	264, 1497,
	265, 1497,
	266, 1497,
	267, 1497,
	268, 1497,
	269, 1497,
	270, 1497,
	271, 1497,
	272, 1497,
	273, 1497,
	274, 1497,
	275, 1497,
	277, 1497,
	278, 1497,
	279, 1497,
	280, 1497,
	281, 1497,
	283, 1497,
	284, 1497,
	285, 1497,
	286, 1497,
	287, 1497,
	288, 1497,
	289, 1497,
	290, 1497,
	291, 1497,
	293, 1497,
	294, 1497,
	295, 1497,
	296, 1497,
	297, 1497,
	298, 1497,
	299, 1497,
	300, 1497,
	301, 1497,
	302, 1497,
	304, 1497,
	306, 1497,
	307, 1497,
	308, 1497,
	309, 1497,
	310, 1497,
	311, 1497,
	312, 1497,
	313, 1497,
	315, 1497,
	316, 1497,
	317, 1497,
	320, 1497,
	321, 1497,
	322, 1497,
	323, 1497,
	325, 1497,
	326, 1497,
	327, 1497,
	328, 1497,
	331, 1497,
	332, 1497,
	333, 1497,
	334, 1497,
	336, 1497,
	338, 1497,
	339, 1497,
	340, 1497,
	341, 1497,
	342, 1497,
	343, 1497,
	346, 1497,
	351, 1497,
	352, 1497,
	353, 1497,
	354, 1497,
	355, 1497,
	356, 1497,
	357, 1497,
	359, 1497,
	360, 1497,
	361, 1497,
	362, 1497,
	363, 1497,
	364, 1497,
	365, 1497,
	366, 1497,
	368, 1497,
	369, 1497,
	370, 1497,
	371, 1497,
	372, 1497,
	373, 1497,
	374, 1497,
	375, 1497,
	376, 1497,
	378, 1497,
	381, 1497,
	382, 1497,
	385, 1497,
	386, 1497,
	-2, 0,
	-1, 947,
	132, 1398,
	318, 1398,
	361, 1398,
	382, 1398,
	-2, 0,
	-1, 964,
	132, 1421,
	318, 1421,
	361, 1421,
	382, 1421,
	-2, 0,
	-1, 965,
	169, 625,
	241, 625,
	245, 625,
	-2, 321,
	-1, 1037,
	117, 723,
	129, 723,
	187, 723,
	214, 723,
	-2, 684,
	-1, 1118,
	107, 689,
	117, 689,
	129, 689,
	165, 689,
	187, 689,
	214, 689,
	220, 689,
	329, 689,
	-2, 1038,
	-1, 1128,
	380, 1239,
	-2, 1227,
	-1, 1146,
	381, 1151,
	-2, 0,
	-1, 1170,
	169, 625,
	241, 625,
	245, 625,
	-2, 620,
	-1, 1198,
	381, 1151,
	-2, 0,
	-1, 1202,
	107, 689,
	117, 689,
	129, 689,
	165, 689,
	187, 689,
	214, 689,
	220, 689,
	329, 689,
	-2, 791,
	-1, 1344,
	169, 625,
	241, 625,
	245, 625,
	-2, 323,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 944,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 945,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 946,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 947,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 948,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 949,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 950,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 951,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 960,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 961,
	-1, 1470,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 962,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 967,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 969,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 973,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 974,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 975,
	-1, 1484,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 976,
	-1, 1553,
	132, 1162,
	380, 1262,
	-2, 1255,
	-1, 1554,
	132, 1163,
	-2, 1438,
	-1, 1555,
	132, 1164,
	-2, 1341,
	-1, 1556,
	132, 1165,
	-2, 1302,
	-1, 1557,
	132, 1166,
	-2, 1319,
	-1, 1558,
	132, 1167,
	-2, 1340,
	-1, 1559,
	132, 1168,
	-2, 1395,
	-1, 1635,
	1, 792,
	74, 792,
	107, 792,
	117, 792,
	129, 792,
	133, 792,
	137, 792,
	139, 792,
	156, 792,
	165, 792,
	172, 792,
	183, 792,
	187, 792,
	201, 792,
	214, 792,
	216, 792,
	220, 792,
	263, 792,
	265, 792,
	329, 792,
	337, 792,
	348, 792,
	349, 792,
	358, 792,
	379, 792,
	381, 792,
	383, 792,
	384, 792,
	385, 792,
	-2, 791,
	-1, 1783,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 968,
	-1, 1784,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 970,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 971,
	-1, 1807,
	225, 1122,
	-2, 1124,
	-1, 2040,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 972,
	-1, 2045,
	168, 0,
	-2, 988,
	-1, 2054,
	225, 1123,
	-2, 1125,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1015,
	-1, 2097,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1016,
	-1, 2098,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1017,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1021,
	-1, 2103,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1022,
	-1, 2104,
	13, 0,
	14, 0,
	15, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 1023,
	-1, 2240,
	168, 0,
	-2, 989,
	-1, 2243,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 992,
	-1, 2244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 994,
	-1, 2367,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 993,
	-1, 2368,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 995,
	-1, 2375,
	168, 0,
	-2, 1024,
	-1, 2454,
	168, 0,
	-2, 1025,
	-1, 2536,
	36, 0,
	149, 0,
	186, 0,
	287, 0,
	356, 0,
	366, 0,
	-2, 1441,
	-1, 2622,
	380, 1509,
	-2, 498,
}

const sqlPrivate = 57344

const sqlLast = 44130

var sqlAct = [...]int{

	648, 2604, 2602, 2335, 2334, 2618, 2535, 2544, 2619, 2585,
	1701, 2508, 2546, 2401, 2545, 1709, 2459, 2345, 2018, 2073,
	1242, 607, 2189, 1338, 2534, 2199, 1777, 73, 2221, 2308,
	1249, 882, 2156, 2228, 2294, 1284, 1984, 985, 2223, 638,
	1339, 2381, 182, 1698, 1680, 1630, 1196, 182, 1200, 1921,
	646, 2155, 1992, 752, 1986, 182, 2215, 1900, 779, 1710,
	2274, 1179, 1245, 1684, 182, 1648, 2126, 1674, 1908, 182,
	182, 1431, 459, 182, 645, 1873, 182, 1124, 1872, 1426,
	1685, 624, 1639, 1631, 182, 1773, 1756, 1818, 1285, 474,
	26, 1508, 599, 123, 1369, 968, 1238, 1205, 1042, 1509,
	1208, 1210, 1517, 1180, 618, 591, 1582, 1496, 1409, 1493,
	528, 1365, 758, 1407, 917, 456, 967, 1156, 1160, 1682,
	1527, 987, 914, 907, 928, 1703, 761, 1533, 1688, 1187,
	1604, 740, 508, 1617, 1549, 182, 182, 1113, 1043, 640,
	617, 1410, 124, 182, 1368, 1408, 173, 1170, 486, 1256,
	904, 521, 178, 1169, 596, 2309, 525, 123, 738, 549,
	1047, 2140, 1806, 2336, 2141, 1264, 1702, 125, 2336, 182,
	182, 182, 182, 781, 595, 1264, 2635, 182, 182, 1264,
	2628, 2634, 595, 2627, 2581, 2628, 1681, 2628, 1233, 2580,
	2579, 2561, 2556, 1233, 1233, 2307, 1724, 2555, 2552, 1197,
	2532, 1724, 1233, 2001, 1739, 2531, 2503, 2498, 2497, 1739,
	1732, 1233, 2359, 590, 2493, 2485, 500, 2038, 1233, 2307,
	2002, 183, 2456, 605, 1058, 1059, 1732, 2432, 2429, 1606,
	2427, 2307, 1233, 26, 2307, 2412, 123, 2411, 2389, 1233,
	755, 2307, 1233, 1675, 2386, 2369, 2330, 1061, 1233, 1732,
	1724, 2328, 2306, 1810, 1229, 1724, 2307, 1058, 1059, 1811,
	2287, 2242, 2640, 641, 1233, 1732, 588, 744, 2214, 745,
	2129, 1060, 1679, 1843, 1844, 2209, 2626, 1724, 2504, 1679,
	1061, 766, 770, 1739, 2136, 2049, 776, 600, 2137, 1724,
	2363, 587, 2012, 1973, 742, 1897, 1974, 1233, 2359, 1233,
	2129, 1605, 1058, 1059, 1060, 1088, 1089, 1090, 1098, 1099,
	1100, 1890, 1888, 1887, 1706, 1891, 1724, 1724, 1091, 2636,
	2029, 1675, 1058, 1059, 2615, 1061, 1858, 1886, 1102, 1743,
	1731, 1724, 1637, 1724, 1732, 2109, 1262, 2051, 1723, 1724,
	1678, 1066, 1724, 1233, 1679, 1061, 1611, 1817, 1739, 1060,
	1610, 140, 1277, 1058, 1059, 1080, 1278, 1974, 1776, 1098,
	1099, 1100, 1077, 1754, 870, 1347, 1174, 1512, 868, 1060,
	949, 143, 704, 2310, 1066, 946, 1061, 945, 1265, 1102,
	142, 1530, 944, 943, 706, 942, 941, 940, 1265, 939,
	1849, 938, 1265, 937, 782, 936, 935, 746, 743, 140,
	1060, 1366, 581, 598, 580, 579, 1080, 1081, 547, 546,
	1083, 1084, 1085, 1086, 545, 544, 543, 141, 542, 1066,
	541, 182, 540, 182, 182, 134, 182, 539, 142, 538,
	537, 182, 135, 1531, 536, 535, 534, 182, 533, 1066,
	1081, 1095, 1103, 532, 531, 516, 515, 514, 513, 512,
	182, 182, 182, 182, 182, 126, 1859, 447, 874, 931,
	1101, 1083, 1084, 1085, 1086, 141, 446, 445, 444, 443,
	1066, 2608, 428, 2001, 427, 419, 418, 417, 1093, 1843,
	1844, 182, 1605, 416, 1082, 1081, 596, 1532, 1529, 409,
	1058, 1059, 1095, 1103, 408, 182, 166, 140, 165, 164,
	1916, 163, 1270, 126, 162, 1081, 1546, 161, 160, 159,
	1372, 182, 1263, 1061, 2606, 158, 1400, 1082, 157, 156,
	155, 182, 154, 153, 152, 151, 142, 150, 149, 1093,
	148, 886, 147, 1860, 890, 146, 1081, 1060, 145, 144,
	1201, 980, 1544, 2551, 2533, 783, 1542, 1087, 1540, 906,
	2603, 2518, 931, 2513, 2451, 2430, 2364, 2352, 2273, 2272,
	910, 910, 1082, 141, 1054, 2268, 1534, 2267, 2260, 2259,
	881, 134, 2258, 2254, 911, 1843, 1844, 2253, 135, 1096,
	929, 2252, 1082, 182, 1070, 1062, 1063, 1064, 1065, 1067,
	1068, 2251, 983, 2245, 2220, 1281, 1849, 2123, 1087, 2118,
	2117, 1705, 1976, 2116, 2059, 950, 1972, 1066, 1929, 1925,
	1895, 1892, 1880, 1082, 1871, 1071, 1069, 1070, 1062, 1063,
	1064, 1065, 1067, 1068, 978, 1842, 1839, 1838, 753, 1836,
	1096, 1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851,
	921, 1823, 1822, 1807, 1504, 1528, 1635, 1054, 1094, 1132,
	596, 1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 1053,
	1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 1199,
	965, 1737, 962, 1081, 2629, 1037, 1198, 140, 2613, 2593,
	932, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 1125,
	2592, 1116, 1849, 1038, 41, 1033, 2016, 1248, 874, 1094,
	2075, 2625, 879, 2523, 2522, 2521, 142, 44, 2488, 1097,
	981, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068,
	2480, 2351, 1843, 1844, 2479, 1861, 1862, 1863, 2470, 2468,
	2444, 2443, 2442, 1039, 2398, 2377, 40, 1040, 182, 2360,
	182, 2339, 588, 141, 2327, 2313, 2265, 41, 2197, 2195,
	1082, 134, 2194, 2192, 1050, 1051, 1505, 2164, 135, 2163,
	44, 1055, 2144, 182, 182, 1367, 1772, 587, 2132, 2044,
	1962, 481, 1956, 932, 1771, 1858, 1185, 1942, 1941, 1927,
	1896, 126, 1870, 1832, 1831, 1828, 51, 1803, 1798, 1128,
	596, 1498, 1161, 1164, 1276, 1622, 1594, 1538, 1241, 1178,
	754, 1158, 1159, 1177, 1168, 66, 1162, 1154, 1153, 1152,
	1183, 1151, 1150, 1058, 1059, 62, 1165, 1149, 1148, 1147,
	1146, 1145, 63, 1144, 481, 64, 1143, 1142, 1141, 1942,
	1140, 933, 1139, 1138, 1137, 1136, 1061, 1129, 1117, 1849,
	1845, 1846, 1847, 1848, 1850, 1851, 1116, 961, 953, 2462,
	123, 1062, 1063, 1064, 1065, 1067, 1068, 925, 66, 1125,
	1060, 2358, 1865, 2247, 2219, 2139, 2135, 1809, 931, 182,
	1173, 1734, 2014, 1195, 1914, 781, 1623, 1114, 1843, 1844,
	1864, 182, 1171, 1199, 1987, 1545, 1742, 2362, 2361, 1203,
	2355, 67, 1218, 182, 2142, 1166, 2003, 1675, 1175, 182,
	1167, 182, 1282, 182, 977, 1859, 1530, 182, 1231, 1201,
	1031, 1247, 1965, 1240, 2365, 1959, 1955, 1894, 1893, 127,
	69, 1543, 70, 609, 933, 1541, 1036, 1539, 1782, 1741,
	1404, 974, 1134, 1234, 2019, 1246, 140, 1764, 1847, 1848,
	1850, 1851, 1353, 480, 67, 2382, 103, 1702, 182, 182,
	880, 448, 2076, 1814, 1518, 931, 1253, 182, 1531, 1157,
	182, 2611, 2610, 1997, 1025, 142, 1211, 2151, 1212, 2516,
	1728, 2576, 127, 69, 1411, 70, 2492, 2321, 2577, 1744,
	2423, 781, 1860, 735, 733, 1649, 1017, 433, 2422, 140,
	182, 2026, 731, 1758, 2420, 182, 480, 2419, 729, 103,
	182, 182, 141, 182, 1026, 182, 754, 182, 2183, 182,
	134, 906, 1532, 1529, 2180, 2148, 2147, 135, 142, 1827,
	182, 1232, 726, 1211, 1131, 1212, 182, 182, 1641, 1826,
	1211, 2333, 1212, 1825, 1641, 182, 452, 2175, 1824, 1373,
	126, 1785, 1727, 1640, 1670, 1666, 1663, 1213, 434, 1255,
	1480, 1172, 1258, 1219, 867, 141, 1598, 182, 1597, 594,
	1441, 781, 1652, 134, 2623, 1699, 1398, 705, 2015, 1397,
	135, 1855, 1856, 1857, 1216, 583, 1034, 495, 1354, 2187,
	1854, 1852, 1853, 1845, 1846, 1847, 1848, 1850, 1851, 932,
	975, 1534, 1217, 126, 1495, 1279, 782, 1495, 1280, 962,
	1374, 2491, 451, 1340, 1213, 574, 2188, 123, 2403, 1058,
	1059, 1213, 1344, 1227, 1358, 1969, 1341, 593, 1236, 1440,
	586, 1370, 585, 604, 2529, 167, 1843, 1844, 1747, 1226,
	1388, 1377, 1061, 976, 1502, 586, 1057, 2166, 960, 1500,
	1749, 1259, 1413, 2032, 596, 1534, 1381, 1432, 1439, 596,
	1224, 1378, 611, 2588, 1199, 2568, 1060, 1382, 2069, 1383,
	1240, 1384, 1750, 1385, 1995, 1386, 2500, 1964, 1225, 1994,
	1528, 1651, 595, 182, 1748, 182, 932, 1958, 182, 1068,
	1405, 1412, 1392, 1394, 1406, 1024, 1220, 2066, 575, 182,
	588, 2501, 2595, 588, 588, 421, 1567, 1518, 781, 1843,
	1844, 182, 782, 1515, 2473, 182, 875, 877, 182, 1222,
	170, 1994, 182, 1430, 2576, 1422, 182, 1291, 1423, 1424,
	1735, 1396, 182, 436, 435, 1513, 1066, 1011, 2027, 182,
	781, 653, 596, 1264, 182, 1774, 1775, 1534, 1362, 1155,
	933, 2067, 182, 1849, 1851, 1624, 1577, 783, 1267, 182,
	1506, 1269, 1503, 2567, 450, 1272, 1625, 2025, 1953, 1035,
	182, 1650, 182, 1030, 182, 1209, 1012, 182, 2548, 182,
	410, 182, 182, 2481, 182, 182, 171, 1694, 1560, 931,
	425, 592, 782, 182, 453, 1214, 1614, 2173, 1672, 2605,
	2603, 951, 1642, 1638, 449, 1653, 1655, 955, 1628, 737,
	2031, 576, 736, 727, 1016, 1600, 1601, 1660, 2586, 1859,
	2229, 727, 1843, 1844, 1609, 1668, 1849, 728, 2167, 1615,
	1534, 2373, 1291, 1291, 609, 1619, 1620, 933, 1658, 2482,
	2426, 1203, 1357, 1356, 1664, 1366, 1363, 2404, 1326, 990,
	1645, 727, 1214, 1671, 2336, 1111, 1704, 1618, 1704, 1214,
	1830, 1634, 1021, 783, 1223, 982, 1730, 574, 1345, 595,
	971, 2033, 2566, 2549, 1603, 1787, 2587, 172, 1494, 1399,
	123, 2030, 2234, 781, 1716, 604, 123, 910, 584, 910,
	494, 182, 1859, 577, 1708, 1719, 1860, 2547, 2589, 2230,
	1717, 2575, 1718, 1725, 1720, 1477, 2573, 182, 182, 182,
	929, 182, 1729, 1726, 1501, 2596, 1738, 1106, 1107, 1108,
	1109, 1110, 1736, 1045, 1376, 998, 578, 1119, 1056, 782,
	959, 1360, 505, 2550, 1022, 1041, 966, 1127, 168, 1849,
	182, 1755, 972, 783, 2344, 1696, 973, 956, 411, 1162,
	575, 1165, 484, 1326, 1326, 948, 1265, 1046, 1968, 442,
	1045, 782, 1159, 1158, 1058, 1059, 483, 1190, 2302, 1860,
	2414, 1722, 2105, 1745, 2413, 1922, 2601, 2396, 169, 437,
	1062, 1063, 1064, 1065, 1067, 1068, 484, 1061, 2263, 1023,
	1193, 2465, 123, 1044, 1854, 1852, 1853, 1845, 1846, 1847,
	1848, 1850, 1851, 487, 1332, 1859, 1616, 2303, 420, 2150,
	932, 1060, 2065, 2317, 1938, 1759, 1934, 1191, 1475, 1478,
	1046, 412, 1761, 1763, 2320, 1768, 492, 1361, 1697, 1767,
	1044, 2319, 488, 426, 1254, 971, 596, 487, 422, 1770,
	708, 1352, 1243, 2509, 1391, 1348, 1045, 707, 423, 1923,
	2200, 2614, 1181, 1181, 487, 1474, 884, 1046, 650, 609,
	492, 883, 1418, 576, 489, 2346, 488, 2397, 1852, 1853,
	1845, 1846, 1847, 1848, 1850, 1851, 175, 492, 1924, 2106,
	783, 1066, 1860, 488, 1944, 2107, 1943, 491, 1780, 991,
	1795, 2600, 1350, 1911, 1613, 503, 1788, 1786, 489, 1192,
	1612, 2264, 497, 971, 782, 1351, 1793, 972, 903, 971,
	596, 973, 783, 901, 1802, 489, 1044, 182, 781, 892,
	2298, 491, 2299, 182, 182, 1898, 2316, 182, 992, 1813,
	1904, 989, 182, 593, 2190, 182, 1816, 2337, 491, 999,
	2394, 1419, 1905, 182, 2318, 577, 1967, 2275, 2127, 182,
	182, 182, 1537, 2376, 2301, 182, 1476, 2262, 182, 479,
	34, 933, 2186, 2304, 182, 182, 182, 182, 182, 1020,
	1874, 2395, 478, 33, 182, 972, 1903, 182, 578, 973,
	1918, 182, 1917, 1845, 1846, 1847, 1848, 1850, 1851, 1790,
	182, 3, 438, 1009, 1928, 2043, 1877, 1878, 1879, 1791,
	182, 1970, 182, 1796, 182, 1837, 490, 182, 1007, 1367,
	1364, 182, 477, 30, 1902, 1913, 182, 1797, 182, 1899,
	1906, 1907, 1740, 1677, 1912, 182, 1669, 1186, 1005, 1510,
	1975, 1662, 1977, 1029, 439, 1935, 872, 1028, 182, 931,
	490, 873, 954, 596, 2300, 1939, 1875, 1041, 1765, 1930,
	931, 182, 1389, 869, 1380, 783, 1135, 490, 1536, 1954,
	2543, 1230, 493, 502, 440, 2506, 441, 1961, 2291, 1952,
	496, 1999, 2171, 902, 725, 2056, 2169, 2149, 900, 2011,
	609, 609, 1939, 476, 79, 1983, 1190, 475, 78, 1700,
	2020, 182, 1978, 1003, 1001, 1981, 493, 472, 22, 1019,
	473, 23, 995, 34, 471, 28, 470, 20, 1693, 1193,
	1990, 1274, 1996, 493, 1979, 1792, 33, 468, 19, 1273,
	1015, 2004, 1794, 1008, 2010, 1188, 1271, 1064, 1065, 1067,
	1068, 2013, 469, 18, 1985, 764, 1191, 2021, 1006, 782,
	899, 182, 1268, 1266, 2046, 1228, 2022, 2023, 1221, 1415,
	2024, 1420, 463, 15, 1189, 1215, 30, 1427, 1004, 2028,
	464, 16, 2437, 462, 14, 2034, 2036, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 2055,
	1479, 1778, 1481, 1482, 1483, 1484, 730, 732, 2052, 467,
	12, 461, 10, 2050, 466, 7, 2079, 2577, 1192, 1507,
	1291, 2357, 182, 1002, 1000, 2084, 1119, 79, 182, 2082,
	2077, 78, 994, 1432, 2080, 2061, 2062, 2063, 182, 182,
	2356, 22, 1432, 2085, 23, 1547, 1548, 1014, 28, 1564,
	20, 1576, 1578, 1583, 1586, 1587, 1588, 1291, 2111, 1048,
	932, 19, 2112, 2068, 2070, 2071, 1371, 1779, 465, 6,
	898, 932, 2216, 2138, 1641, 2115, 18, 2439, 2128, 2125,
	2110, 2130, 1491, 1656, 2143, 182, 2131, 182, 460, 5,
	783, 749, 2162, 1641, 182, 2185, 15, 931, 1489, 123,
	1657, 482, 1654, 2161, 16, 2177, 1291, 14, 2208, 2177,
	2196, 750, 182, 182, 1673, 2177, 2153, 2193, 1665, 2134,
	1661, 2210, 2146, 1402, 1403, 1766, 2475, 2160, 1058, 1059,
	182, 1325, 2310, 993, 2202, 2213, 1049, 1058, 1059, 2453,
	182, 1326, 781, 182, 182, 2425, 2174, 2176, 2191, 781,
	2201, 2181, 2204, 12, 2276, 10, 2205, 2184, 7, 1052,
	1061, 2203, 1667, 1659, 2005, 2006, 2206, 2007, 2008, 2505,
	2212, 2211, 1291, 504, 2236, 1060, 2342, 1707, 1326, 2217,
	2302, 1485, 1695, 2295, 1060, 1692, 182, 1602, 751, 1486,
	2241, 1487, 1343, 1283, 2293, 1492, 2584, 2599, 1027, 2297,
	2231, 1843, 1844, 1058, 1059, 1752, 1751, 2237, 1291, 1291,
	1902, 933, 6, 2388, 2281, 2218, 2124, 1291, 1291, 2303,
	2072, 1752, 933, 2017, 2145, 1919, 1889, 1326, 1753, 1599,
	1596, 1595, 5, 1526, 1122, 2249, 1325, 1325, 2064, 1980,
	182, 1132, 2296, 182, 1130, 1018, 1013, 1010, 996, 958,
	1291, 1346, 582, 781, 182, 182, 2402, 485, 182, 182,
	182, 1379, 997, 1186, 1915, 1621, 2499, 2255, 2261, 1829,
	2458, 2372, 1535, 1133, 55, 182, 2158, 627, 2292, 2152,
	182, 1687, 182, 1686, 182, 182, 182, 784, 1355, 649,
	1551, 182, 2280, 1326, 182, 1290, 1433, 931, 2311, 2285,
	2282, 2278, 724, 651, 1288, 182, 182, 1488, 652, 1421,
	1289, 2283, 931, 2162, 1490, 1163, 639, 1286, 932, 926,
	2332, 1711, 1190, 1359, 2161, 2314, 1499, 1516, 1812, 1326,
	1326, 1126, 2298, 619, 2299, 631, 630, 2277, 1326, 1326,
	2290, 1514, 2162, 952, 1920, 1193, 1993, 2162, 2160, 2348,
	2341, 2350, 1417, 2161, 2338, 1769, 1414, 2349, 2161, 2343,
	1989, 1188, 2168, 782, 424, 2347, 2301, 1840, 924, 1574,
	782, 1326, 1191, 2354, 2366, 2304, 1566, 2160, 1562, 1783,
	1784, 1032, 2160, 1184, 1112, 1789, 1712, 979, 2000, 1733,
	1189, 1176, 1425, 748, 747, 2170, 2612, 2172, 1349, 1746,
	1290, 1290, 182, 1105, 182, 1910, 781, 182, 1568, 2353,
	1104, 2378, 734, 2467, 970, 182, 969, 1808, 1291, 1244,
	1937, 781, 2594, 1815, 2474, 2165, 1819, 2515, 139, 2279,
	2385, 136, 138, 633, 137, 1966, 82, 32, 31, 2387,
	102, 2286, 101, 1833, 100, 2406, 99, 98, 2408, 97,
	2405, 1240, 1120, 96, 1192, 182, 2300, 2162, 931, 95,
	94, 2315, 182, 93, 2392, 92, 2371, 91, 2161, 933,
	182, 182, 931, 931, 782, 179, 182, 1119, 90, 2407,
	414, 89, 2390, 2177, 1583, 1583, 1583, 88, 429, 2162,
	87, 2340, 2160, 182, 86, 2435, 2436, 454, 182, 2446,
	2161, 2428, 498, 179, 85, 182, 506, 2449, 2445, 511,
	1181, 2434, 2447, 2448, 783, 609, 84, 530, 932, 2440,
	2416, 783, 526, 2455, 2160, 2424, 1909, 523, 81, 80,
	182, 182, 29, 932, 2469, 2464, 2463, 182, 25, 1326,
	106, 24, 2431, 2461, 77, 931, 76, 27, 17, 2471,
	182, 2484, 11, 21, 931, 931, 2487, 60, 61, 59,
	58, 57, 13, 2486, 53, 52, 623, 50, 741, 741,
	49, 48, 2490, 47, 1185, 9, 414, 2495, 2496, 182,
	596, 182, 2489, 105, 182, 2227, 781, 45, 2452, 8,
	43, 42, 104, 118, 1328, 115, 117, 114, 116, 120,
	119, 1327, 414, 414, 774, 414, 112, 1991, 2512, 2525,
	179, 871, 1287, 413, 2530, 182, 110, 2524, 2528, 111,
	2526, 113, 109, 108, 121, 783, 2472, 782, 39, 2009,
	38, 2541, 182, 182, 182, 2542, 2540, 2478, 2162, 1291,
	182, 37, 782, 36, 2517, 2553, 609, 609, 2438, 2161,
	2527, 35, 2, 2565, 182, 2562, 1, 0, 2560, 609,
	2563, 2564, 2450, 0, 0, 0, 0, 0, 2572, 933,
	0, 2574, 0, 2160, 0, 2578, 2035, 0, 0, 932,
	0, 1427, 0, 2583, 933, 2582, 0, 2039, 0, 0,
	2040, 0, 0, 932, 932, 1291, 2591, 2590, 0, 1328,
	1328, 2598, 2045, 0, 0, 0, 1327, 1327, 0, 759,
	0, 2053, 0, 0, 781, 2597, 781, 1287, 1287, 2057,
	0, 0, 2009, 0, 0, 0, 2616, 2617, 2624, 0,
	0, 0, 0, 0, 0, 768, 772, 0, 778, 2631,
	0, 2630, 2081, 0, 0, 2633, 2083, 2632, 2639, 2637,
	2638, 1291, 2641, 0, 0, 1275, 1568, 1568, 0, 0,
	1326, 0, 0, 0, 0, 0, 932, 2511, 0, 2417,
	2418, 0, 2607, 0, 2609, 932, 932, 0, 783, 2113,
	2114, 0, 602, 0, 574, 0, 0, 0, 2120, 2121,
	2122, 1342, 0, 783, 0, 0, 0, 0, 0, 0,
	1799, 1800, 604, 0, 0, 0, 0, 782, 0, 0,
	0, 0, 0, 0, 0, 2133, 1326, 0, 2557, 2558,
	2559, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	933, 0, 1568, 1568, 1568, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 933, 933, 2154, 1843, 1844, 0,
	0, 0, 0, 0, 530, 0, 888, 530, 0, 893,
	0, 1325, 0, 0, 896, 0, 0, 575, 0, 0,
	414, 0, 1326, 0, 0, 0, 1866, 1867, 1868, 0,
	0, 0, 0, 530, 530, 414, 918, 871, 1843, 1844,
	0, 1861, 1862, 1863, 0, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 2239, 0, 0, 0, 609, 0,
	1325, 0, 0, 0, 530, 0, 0, 933, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 933, 530, 0,
	0, 0, 0, 0, 0, 782, 0, 782, 0, 0,
	0, 1858, 0, 0, 957, 0, 0, 0, 2240, 0,
	0, 1120, 2243, 2244, 530, 0, 2246, 0, 783, 1520,
	0, 0, 0, 2248, 1849, 2250, 0, 0, 0, 0,
	0, 0, 1552, 1552, 1565, 0, 1325, 0, 1585, 0,
	576, 2257, 1589, 1590, 1592, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 772, 0, 1849, 0, 0, 0, 0,
	0, 0, 1325, 1325, 2266, 0, 414, 0, 778, 0,
	0, 1325, 1325, 0, 0, 1290, 0, 0, 0, 0,
	1859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 0, 0, 1568,
	1568, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	601, 0, 577, 0, 2312, 0, 0, 0, 0, 0,
	0, 1859, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 783, 0, 783, 0,
	0, 0, 0, 2041, 2042, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1860, 1568, 1568,
	1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
	1568, 1568, 1568, 1568, 1568, 1568, 1568, 0, 1568, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 74, 0,
	1290, 0, 0, 2367, 2368, 0, 0, 0, 1860, 772,
	0, 0, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 511, 2108, 741, 2380, 0, 1290, 1290, 0, 0,
	2383, 0, 0, 0, 0, 1290, 1290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 414, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 1853, 1845, 1846,
	1847, 1848, 1850, 1851, 0, 0, 0, 0, 1290, 0,
	0, 0, 1325, 0, 2415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1855, 1856, 1857,
	0, 0, 0, 0, 0, 0, 1854, 1852, 1853, 1845,
	1846, 1847, 1848, 1850, 1851, 0, 0, 0, 0, 0,
	0, 589, 0, 0, 597, 0, 1843, 1844, 0, 1861,
	1862, 1863, 0, 0, 0, 0, 0, 0, 0, 0,
	760, 74, 2238, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 179, 2466, 0, 1287, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 0, 0, 0, 0, 1858,
	0, 0, 0, 0, 1328, 0, 1252, 0, 1801, 759,
	1206, 1327, 414, 0, 414, 1804, 414, 0, 0, 0,
	1260, 0, 1287, 0, 0, 0, 0, 609, 0, 0,
	0, 0, 1820, 1821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	1327, 530, 179, 1849, 0, 0, 1290, 0, 0, 0,
	179, 1287, 0, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 1869, 0, 0, 2539, 2539, 0, 0, 1585,
	1585, 1585, 0, 0, 1882, 0, 0, 0, 0, 0,
	0, 2554, 0, 530, 1864, 0, 0, 0, 530, 0,
	0, 0, 0, 179, 530, 0, 530, 0, 530, 1328,
	530, 2539, 530, 1325, 0, 0, 1327, 1239, 0, 1859,
	0, 0, 0, 1390, 0, 0, 0, 1287, 0, 530,
	530, 0, 40, 0, 0, 772, 0, 1257, 414, 1257,
	0, 0, 0, 41, 0, 1328, 1328, 0, 0, 0,
	0, 0, 1327, 1327, 1328, 1328, 44, 0, 0, 2539,
	530, 1327, 1327, 1287, 1287, 0, 0, 0, 0, 1325,
	0, 0, 1287, 1287, 0, 0, 1843, 1844, 0, 1861,
	1862, 1863, 51, 0, 0, 0, 0, 1328, 2620, 0,
	0, 0, 2048, 0, 1327, 1568, 1860, 0, 0, 0,
	2620, 0, 0, 2620, 2620, 1287, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 63, 0,
	481, 64, 0, 0, 0, 1325, 0, 0, 0, 1858,
	0, 0, 0, 0, 40, 0, 1568, 0, 0, 2375,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	0, 1401, 0, 0, 0, 0, 511, 1290, 741, 0,
	2399, 871, 0, 0, 51, 1855, 1856, 1857, 0, 0,
	0, 0, 414, 1849, 1854, 1852, 1853, 1845, 1846, 1847,
	1848, 1850, 1851, 0, 1633, 0, 0, 0, 414, 1568,
	0, 414, 0, 62, 0, 1646, 0, 0, 0, 414,
	63, 0, 481, 64, 0, 414, 0, 0, 0, 0,
	0, 0, 414, 1290, 1864, 0, 0, 1676, 0, 0,
	67, 0, 0, 0, 0, 1683, 0, 0, 0, 0,
	0, 0, 871, 2454, 0, 1328, 66, 0, 0, 1859,
	0, 0, 1327, 414, 0, 1715, 0, 530, 127, 69,
	530, 70, 530, 1287, 414, 414, 0, 1721, 871, 0,
	0, 2119, 0, 0, 0, 140, 1646, 0, 0, 1290,
	0, 0, 480, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 0, 1115, 0,
	1118, 0, 0, 0, 0, 0, 1860, 1123, 0, 0,
	0, 759, 67, 0, 1636, 0, 0, 0, 0, 0,
	0, 141, 772, 0, 0, 0, 2179, 0, 772, 134,
	0, 0, 2182, 0, 0, 778, 135, 0, 0, 0,
	127, 69, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1757, 0, 0, 140, 0, 126,
	0, 1387, 0, 0, 480, 0, 1713, 103, 0, 0,
	414, 414, 414, 0, 414, 0, 0, 778, 778, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 1855, 1856, 1857, 0, 0,
	0, 0, 0, 414, 1854, 1852, 1853, 1845, 1846, 1847,
	1848, 1850, 1851, 1058, 1059, 0, 1088, 1089, 1090, 1098,
	1099, 1100, 0, 141, 0, 0, 0, 0, 0, 1091,
	0, 134, 0, 0, 0, 74, 1061, 0, 135, 1102,
	1202, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	1060, 126, 0, 0, 1287, 0, 1080, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 1843, 1844, 0, 1861,
	1862, 1863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2047, 1058, 1059, 0, 0, 0, 0, 0,
	0, 0, 1328, 1760, 778, 1762, 0, 772, 0, 1327,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	1287, 1083, 1084, 1085, 1086, 0, 0, 0, 0, 1858,
	1066, 0, 0, 0, 0, 0, 1781, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 1095, 1103, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 1287, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 414, 414, 0, 1093,
	414, 0, 0, 1849, 0, 1633, 1081, 0, 1633, 0,
	0, 1083, 1084, 1085, 1086, 0, 1926, 0, 0, 0,
	1066, 0, 414, 1932, 1933, 0, 0, 0, 1646, 0,
	0, 1940, 1092, 0, 0, 0, 0, 1945, 1946, 1948,
	1950, 1951, 0, 0, 1864, 0, 0, 414, 0, 457,
	1960, 0, 0, 0, 1963, 0, 2384, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 1087, 1859,
	40, 0, 0, 1252, 0, 1252, 0, 530, 0, 0,
	414, 41, 0, 1082, 1988, 0, 1081, 0, 0, 414,
	0, 1998, 0, 2410, 44, 0, 0, 0, 414, 0,
	1096, 0, 74, 0, 0, 0, 0, 2421, 0, 0,
	0, 1757, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 759, 1757, 0, 0, 0, 0, 759,
	759, 0, 0, 759, 0, 589, 0, 0, 589, 589,
	0, 0, 0, 0, 0, 0, 1860, 0, 1087, 62,
	0, 0, 0, 0, 0, 1931, 63, 0, 481, 64,
	0, 0, 0, 1082, 414, 0, 0, 0, 0, 1094,
	0, 0, 1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097,
	1957, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068,
	0, 1497, 66, 0, 0, 0, 1971, 0, 2269, 0,
	0, 0, 0, 0, 597, 0, 0, 0, 0, 1118,
	0, 0, 0, 1982, 2074, 0, 0, 0, 0, 0,
	0, 0, 1239, 0, 0, 0, 0, 0, 0, 0,
	0, 1239, 0, 2502, 0, 1855, 1856, 1857, 0, 0,
	0, 0, 0, 0, 1854, 1852, 1853, 1845, 1846, 1847,
	1848, 1850, 1851, 0, 0, 0, 0, 0, 0, 2519,
	2520, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068,
	0, 0, 0, 0, 0, 0, 760, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1202, 0, 0, 414, 0, 2037, 0, 0,
	0, 1633, 0, 0, 0, 74, 127, 69, 0, 70,
	0, 871, 1633, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 2157, 0, 0, 0,
	480, 0, 0, 103, 0, 0, 0, 0, 0, 2178,
	0, 0, 0, 2178, 74, 0, 74, 0, 0, 2178,
	0, 0, 142, 0, 0, 0, 0, 0, 1646, 0,
	1252, 0, 0, 0, 0, 74, 0, 2198, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 414, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 2224, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 2226, 0, 0, 2232, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 458, 759, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2256,
	0, 0, 0, 0, 0, 0, 0, 1843, 1844, 0,
	1861, 1862, 1863, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 871, 0, 1713, 759,
	1858, 0, 0, 0, 0, 0, 0, 1633, 871, 0,
	0, 2288, 2289, 1646, 0, 1843, 1844, 0, 1861, 1862,
	1863, 0, 0, 0, 0, 0, 0, 2157, 871, 0,
	2233, 0, 0, 2322, 0, 2323, 0, 414, 2325, 2326,
	0, 0, 0, 0, 414, 0, 1497, 2331, 0, 0,
	0, 0, 0, 0, 0, 0, 2157, 0, 871, 1683,
	0, 2157, 0, 0, 1849, 0, 1118, 0, 1858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 1059,
	0, 1088, 1089, 1090, 1098, 1099, 1100, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 1102, 1864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 759, 0, 0, 0,
	1859, 1080, 1849, 0, 0, 0, 0, 0, 1077, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1646, 0, 2391, 0, 0,
	2393, 0, 0, 0, 0, 0, 0, 0, 414, 0,
	2324, 2157, 0, 0, 760, 0, 0, 2329, 0, 0,
	760, 760, 0, 0, 760, 0, 1083, 1084, 1085, 1086,
	0, 0, 0, 0, 0, 1066, 0, 2178, 1859, 0,
	0, 0, 0, 2157, 0, 0, 0, 1860, 414, 0,
	0, 0, 0, 0, 0, 871, 0, 1095, 1103, 0,
	0, 0, 0, 2224, 2224, 0, 0, 74, 0, 871,
	0, 0, 0, 0, 0, 74, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2460, 0, 0, 0,
	0, 1633, 0, 0, 1093, 0, 0, 0, 1252, 0,
	74, 1081, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 1860, 0, 0, 0, 0,
	0, 0, 0, 2476, 2477, 0, 0, 1092, 0, 0,
	414, 0, 0, 0, 0, 0, 1855, 1856, 1857, 0,
	0, 2400, 0, 2494, 0, 1854, 1852, 1853, 1845, 1846,
	1847, 1848, 1850, 1851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 2510, 0, 871, 0, 0, 414, 1082, 0,
	0, 2433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2157, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 1855, 1856, 1857, 0, 2460, 0,
	0, 0, 0, 1854, 1852, 1853, 1845, 1846, 1847, 1848,
	1850, 1851, 0, 0, 0, 871, 871, 871, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2483, 1094, 0, 0, 1072, 1073, 1079,
	1078, 1074, 1075, 1076, 1097, 0, 1071, 1069, 1070, 1062,
	1063, 1064, 1065, 1067, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 1885, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	2514, 0, 0, 0, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1525,
	0, 647, 636, 637, 634, 635, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1713, 184, 185, 1522,
	186, 0, 0, 0, 0, 664, 629, 0, 0, 0,
	187, 188, 189, 350, 679, 352, 680, 190, 681, 682,
	0, 191, 356, 357, 192, 193, 632, 663, 683, 684,
	360, 0, 194, 675, 0, 655, 0, 195, 196, 197,
	760, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 709, 205, 206, 207, 0, 656, 657, 659, 0,
	658, 660, 208, 209, 415, 210, 685, 211, 686, 687,
	0, 212, 0, 213, 0, 214, 1523, 0, 678, 216,
	0, 217, 0, 0, 0, 620, 218, 220, 219, 221,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 222,
	223, 688, 689, 690, 0, 224, 0, 225, 0, 0,
	711, 0, 226, 676, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 672, 674, 713, 0, 375, 234,
	0, 231, 0, 712, 232, 691, 233, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 235, 236, 237, 715,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 677,
	716, 243, 244, 717, 0, 245, 246, 760, 0, 247,
	0, 248, 718, 249, 250, 252, 386, 251, 719, 253,
	254, 256, 255, 615, 0, 644, 673, 257, 697, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	720, 263, 721, 667, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 668, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 698, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 722, 294, 295, 621, 296, 74, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 661,
	309, 297, 298, 310, 723, 311, 699, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 700, 316, 317, 669,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 701, 702, 0, 0, 329, 330, 670,
	671, 642, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 662, 339, 0, 405, 340, 341, 342, 406,
	703, 1521, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 612, 613,
	1524, 0, 0, 0, 0, 0, 0, 622, 1519, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 780, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2441, 184, 185, 786, 186, 787, 788,
	789, 790, 349, 791, 792, 793, 794, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 795, 191, 356,
	357, 192, 193, 796, 797, 358, 359, 360, 798, 194,
	361, 799, 785, 800, 195, 196, 197, 0, 199, 200,
	201, 198, 801, 202, 0, 203, 204, 802, 709, 205,
	206, 207, 803, 804, 806, 805, 807, 808, 809, 208,
	209, 415, 210, 362, 211, 363, 364, 810, 212, 811,
	213, 812, 214, 813, 814, 215, 216, 815, 217, 816,
	1118, 817, 365, 218, 220, 219, 221, 366, 367, 818,
	710, 819, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 820, 225, 821, 822, 711, 823, 226,
	371, 824, 372, 825, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 713, 826, 375, 234, 827, 231, 828,
	712, 232, 376, 233, 377, 378, 379, 380, 381, 829,
	382, 830, 714, 235, 236, 237, 715, 383, 384, 238,
	239, 240, 831, 242, 241, 832, 385, 716, 243, 244,
	717, 833, 245, 246, 834, 835, 247, 0, 248, 718,
	249, 250, 252, 386, 251, 719, 253, 254, 256, 255,
	836, 837, 838, 387, 257, 388, 258, 259, 839, 260,
	840, 841, 261, 842, 843, 262, 389, 720, 263, 721,
	390, 264, 265, 266, 267, 268, 269, 270, 844, 271,
	391, 272, 392, 273, 845, 274, 275, 276, 277, 278,
	393, 279, 280, 846, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 847, 293, 722,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	848, 306, 395, 305, 307, 308, 849, 309, 297, 298,
	310, 723, 311, 396, 397, 312, 850, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 851, 320, 852,
	321, 322, 323, 324, 325, 326, 327, 328, 853, 400,
	401, 402, 854, 855, 329, 330, 403, 404, 856, 331,
	332, 333, 334, 857, 858, 335, 336, 337, 338, 859,
	339, 860, 405, 340, 341, 342, 406, 407, 861, 862,
	343, 863, 864, 865, 866, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 780, 0, 0, 0,
	0, 0, 1626, 0, 0, 0, 0, 0, 0, 0,
	0, 1627, 184, 185, 786, 186, 787, 788, 789, 790,
	349, 791, 792, 793, 794, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 795, 191, 356, 357, 192,
	193, 796, 797, 358, 359, 360, 798, 194, 361, 799,
	785, 800, 195, 196, 197, 0, 199, 200, 201, 198,
	801, 202, 0, 203, 204, 802, 709, 205, 206, 207,
	803, 804, 806, 805, 807, 808, 809, 208, 209, 415,
	210, 362, 211, 363, 364, 810, 212, 811, 213, 812,
	214, 813, 814, 215, 216, 815, 217, 816, 0, 817,
	365, 218, 220, 219, 221, 366, 367, 818, 710, 819,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 820, 225, 821, 822, 711, 823, 226, 371, 824,
	372, 825, 0, 227, 228, 0, 0, 229, 230, 373,
	374, 713, 826, 375, 234, 827, 231, 828, 712, 232,
	376, 233, 377, 378, 379, 380, 381, 829, 382, 830,
	714, 235, 236, 237, 715, 383, 384, 238, 239, 240,
	831, 242, 241, 832, 385, 716, 243, 244, 717, 833,
	245, 246, 834, 835, 247, 0, 248, 718, 249, 250,
	252, 386, 251, 719, 253, 254, 256, 255, 836, 837,
	838, 387, 257, 388, 258, 259, 839, 260, 840, 841,
	261, 842, 843, 262, 389, 720, 263, 721, 390, 264,
	265, 266, 267, 268, 269, 270, 844, 271, 391, 272,
	392, 273, 845, 274, 275, 276, 277, 278, 393, 279,
	280, 846, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 847, 293, 722, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 848, 306,
	395, 305, 307, 308, 849, 309, 297, 298, 310, 723,
	311, 396, 397, 312, 850, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 851, 320, 852, 321, 322,
	323, 324, 325, 326, 327, 328, 853, 400, 401, 402,
	854, 855, 329, 330, 403, 404, 856, 331, 332, 333,
	334, 857, 858, 335, 336, 337, 338, 859, 339, 860,
	405, 340, 341, 342, 406, 407, 861, 862, 343, 863,
	864, 865, 866, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 780, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2284, 184, 185, 786, 186, 787, 788, 789, 790, 349,
	791, 792, 793, 794, 187, 188, 189, 350, 351, 352,
	353, 190, 354, 355, 795, 191, 356, 357, 192, 193,
	796, 797, 358, 359, 360, 798, 194, 361, 799, 785,
	800, 195, 196, 197, 0, 199, 200, 201, 198, 801,
	202, 0, 203, 204, 802, 709, 205, 206, 207, 803,
	804, 806, 805, 807, 808, 809, 208, 209, 415, 210,
	362, 211, 363, 364, 810, 212, 811, 213, 812, 214,
	813, 814, 215, 216, 815, 217, 816, 0, 817, 365,
	218, 220, 219, 221, 366, 367, 818, 710, 819, 0,
	0, 0, 0, 222, 223, 368, 369, 370, 0, 224,
	820, 225, 821, 822, 711, 823, 226, 371, 824, 372,
	825, 0, 227, 228, 0, 0, 229, 230, 373, 374,
	713, 826, 375, 234, 827, 231, 828, 712, 232, 376,
	233, 377, 378, 379, 380, 381, 829, 382, 830, 714,
	235, 236, 237, 715, 383, 384, 238, 239, 240, 831,
	242, 241, 832, 385, 716, 243, 244, 717, 833, 245,
	246, 834, 835, 247, 0, 248, 718, 249, 250, 252,
	386, 251, 719, 253, 254, 256, 255, 836, 837, 838,
	387, 257, 388, 258, 259, 839, 260, 840, 841, 261,
	842, 843, 262, 389, 720, 263, 721, 390, 264, 265,
	266, 267, 268, 269, 270, 844, 271, 391, 272, 392,
	273, 845, 274, 275, 276, 277, 278, 393, 279, 280,
	846, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 847, 293, 722, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 848, 306, 395,
	305, 307, 308, 849, 309, 297, 298, 310, 723, 311,
	396, 397, 312, 850, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 851, 320, 852, 321, 322, 323,
	324, 325, 326, 327, 328, 853, 400, 401, 402, 854,
	855, 329, 330, 403, 404, 856, 331, 332, 333, 334,
	857, 858, 335, 336, 337, 338, 859, 339, 860, 405,
	340, 341, 342, 406, 407, 861, 862, 343, 863, 864,
	865, 866, 344, 345, 346, 347, 348, 0, 0, 780,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1235, 184, 185, 786, 186, 787,
	788, 789, 790, 349, 791, 792, 793, 794, 187, 188,
	189, 350, 351, 352, 353, 190, 354, 355, 795, 191,
	356, 357, 192, 193, 796, 797, 358, 359, 360, 798,
	194, 361, 799, 785, 800, 195, 196, 197, 0, 199,
	200, 201, 198, 801, 202, 0, 203, 204, 802, 709,
	205, 206, 207, 803, 804, 806, 805, 807, 808, 809,
	208, 209, 415, 210, 362, 211, 363, 364, 810, 212,
	811, 213, 812, 214, 813, 814, 215, 216, 815, 217,
	816, 0, 817, 365, 218, 220, 219, 221, 366, 367,
	818, 710, 819, 0, 0, 0, 0, 222, 223, 368,
	369, 370, 0, 224, 820, 225, 821, 822, 711, 823,
	226, 371, 824, 372, 825, 0, 227, 228, 0, 0,
	229, 230, 373, 374, 713, 826, 375, 234, 827, 231,
	828, 712, 232, 376, 233, 377, 378, 379, 380, 381,
	829, 382, 830, 714, 235, 236, 237, 715, 383, 384,
	238, 239, 240, 831, 242, 241, 832, 385, 716, 243,
	244, 717, 833, 245, 246, 834, 835, 247, 0, 248,
	718, 249, 250, 252, 386, 251, 719, 253, 254, 256,
	255, 836, 837, 838, 387, 257, 388, 258, 259, 839,
	260, 840, 841, 261, 842, 843, 262, 389, 720, 263,
	721, 390, 264, 265, 266, 267, 268, 269, 270, 844,
	271, 391, 272, 392, 273, 845, 274, 275, 276, 277,
	278, 393, 279, 280, 846, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 847, 293,
	722, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 848, 306, 395, 305, 307, 308, 849, 309, 297,
	298, 310, 723, 311, 396, 397, 312, 850, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 851, 320,
	852, 321, 322, 323, 324, 325, 326, 327, 328, 853,
	400, 401, 402, 854, 855, 329, 330, 403, 404, 856,
	331, 332, 333, 334, 857, 858, 335, 336, 337, 338,
	859, 339, 860, 405, 340, 341, 342, 406, 407, 861,
	862, 343, 863, 864, 865, 866, 344, 345, 346, 347,
	348, 647, 636, 637, 634, 635, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 664, 629, 0, 0, 0,
	187, 188, 189, 350, 679, 352, 680, 190, 681, 682,
	0, 191, 356, 357, 192, 193, 632, 663, 683, 684,
	360, 0, 194, 675, 0, 655, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 709, 205, 206, 207, 0, 656, 657, 659, 0,
	658, 660, 208, 209, 415, 210, 685, 211, 686, 687,
	610, 212, 0, 213, 0, 214, 0, 0, 678, 216,
	0, 217, 0, 0, 0, 620, 218, 220, 219, 221,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 222,
	223, 688, 689, 690, 0, 224, 0, 225, 0, 0,
	711, 0, 226, 676, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 672, 674, 713, 0, 375, 234,
	0, 231, 0, 712, 232, 691, 233, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 235, 236, 237, 715,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 677,
	716, 243, 244, 717, 0, 245, 246, 0, 0, 247,
	0, 248, 718, 249, 250, 252, 386, 251, 719, 253,
	254, 256, 255, 615, 0, 644, 673, 257, 697, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	720, 263, 721, 667, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 668, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 698, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 722, 294, 295, 621, 296, 0, 300, 301,
	302, 303, 304, 140, 306, 395, 305, 307, 308, 661,
	309, 297, 298, 310, 723, 311, 699, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 700, 316, 317, 669,
	0, 320, 142, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 701, 702, 0, 0, 329, 330, 670,
	671, 642, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 662, 339, 0, 405, 340, 341, 342, 934,
	703, 0, 0, 343, 0, 0, 0, 134, 344, 345,
	346, 347, 348, 616, 135, 598, 0, 647, 636, 637,
	634, 635, 626, 614, 0, 0, 0, 0, 612, 613,
	0, 0, 0, 184, 185, 0, 186, 1121, 0, 0,
	0, 664, 629, 625, 0, 0, 187, 188, 189, 350,
	679, 352, 680, 190, 681, 682, 0, 191, 356, 357,
	192, 193, 632, 663, 683, 684, 360, 0, 194, 675,
	0, 655, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 709, 205, 206,
	207, 0, 656, 657, 659, 0, 658, 660, 208, 209,
	415, 210, 685, 211, 686, 687, 0, 212, 0, 213,
	0, 214, 0, 0, 678, 216, 0, 217, 0, 0,
	0, 620, 218, 220, 219, 221, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 222, 223, 688, 689, 690,
	0, 224, 0, 225, 0, 0, 711, 0, 226, 676,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	672, 674, 713, 0, 375, 234, 0, 231, 0, 712,
	232, 691, 233, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 235, 236, 237, 715, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 677, 716, 243, 244, 717,
	0, 245, 246, 0, 0, 247, 0, 248, 718, 249,
	250, 252, 386, 251, 719, 253, 254, 256, 255, 615,
	0, 644, 673, 257, 697, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 720, 263, 721, 667,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 668,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 698,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 722, 294,
	295, 621, 296, 0, 300, 301, 302, 303, 304, 140,
	306, 395, 305, 307, 308, 661, 309, 297, 298, 310,
	723, 311, 699, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 700, 316, 317, 669, 0, 320, 142, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 701,
	702, 0, 0, 329, 330, 670, 671, 642, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 662, 339,
	0, 405, 340, 341, 342, 934, 703, 0, 0, 343,
	0, 0, 0, 134, 344, 345, 346, 347, 348, 616,
	135, 647, 636, 637, 634, 635, 626, 0, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 184, 185, 0,
	186, 0, 0, 1121, 0, 664, 629, 0, 0, 625,
	187, 188, 189, 350, 679, 352, 680, 190, 681, 682,
	0, 191, 356, 357, 192, 193, 632, 663, 683, 684,
	360, 0, 194, 675, 0, 655, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 709, 205, 206, 207, 0, 656, 657, 659, 0,
	658, 660, 208, 209, 415, 210, 685, 211, 686, 687,
	0, 212, 0, 213, 0, 214, 0, 0, 678, 216,
	0, 217, 0, 0, 0, 620, 218, 220, 219, 221,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 222,
	223, 688, 689, 690, 0, 224, 0, 225, 0, 0,
	711, 0, 226, 676, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 672, 674, 713, 0, 375, 234,
	0, 231, 0, 712, 232, 691, 233, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 235, 236, 237, 715,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 677,
	716, 243, 244, 717, 0, 245, 246, 0, 0, 247,
	0, 248, 718, 249, 250, 252, 386, 251, 719, 253,
	254, 256, 255, 615, 0, 644, 673, 257, 697, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	720, 263, 721, 667, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 668, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 698, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 722, 294, 295, 621, 296, 0, 300, 301,
	302, 303, 304, 140, 306, 395, 305, 307, 308, 661,
	309, 297, 298, 310, 723, 311, 699, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 700, 316, 317, 669,
	0, 320, 142, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 701, 702, 0, 0, 329, 330, 670,
	671, 642, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 662, 339, 0, 405, 340, 341, 342, 934,
	703, 0, 0, 343, 0, 0, 0, 134, 344, 345,
	346, 347, 348, 616, 135, 647, 636, 637, 634, 635,
	626, 0, 0, 614, 0, 0, 0, 0, 612, 613,
	0, 184, 185, 0, 186, 0, 0, 1121, 0, 664,
	629, 0, 0, 625, 187, 188, 189, 350, 679, 352,
	680, 190, 681, 682, 1579, 191, 356, 357, 192, 193,
	632, 663, 683, 684, 360, 0, 194, 675, 0, 655,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 709, 205, 206, 207, 0,
	656, 657, 659, 0, 658, 660, 208, 209, 415, 210,
	685, 211, 686, 687, 0, 212, 0, 213, 0, 214,
	0, 0, 678, 216, 0, 217, 0, 0, 0, 620,
	218, 220, 219, 221, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 222, 223, 688, 689, 690, 0, 224,
	0, 225, 0, 1584, 711, 0, 226, 676, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 672, 674,
	713, 0, 375, 234, 0, 231, 0, 712, 232, 691,
	233, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	235, 236, 237, 715, 383, 384, 238, 239, 240, 0,
	242, 241, 1580, 677, 716, 243, 244, 717, 0, 245,
	246, 0, 0, 247, 0, 248, 718, 249, 250, 252,
	386, 251, 719, 253, 254, 256, 255, 615, 0, 644,
	673, 257, 697, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 389, 720, 263, 721, 667, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 668, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 698, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 722, 294, 295, 621,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 661, 309, 297, 298, 310, 723, 311,
	699, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	700, 316, 317, 669, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 701, 702, 0,
	1581, 329, 330, 670, 671, 642, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 662, 339, 0, 405,
	340, 341, 342, 406, 703, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 616, 606, 0,
	647, 636, 637, 634, 635, 626, 0, 614, 0, 0,
	0, 0, 612, 613, 0, 0, 184, 185, 0, 186,
	0, 622, 0, 0, 664, 629, 0, 625, 0, 187,
	188, 189, 350, 679, 352, 680, 190, 681, 682, 0,
	191, 356, 357, 192, 193, 632, 663, 683, 684, 360,
	0, 194, 675, 0, 655, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	709, 205, 206, 207, 0, 656, 657, 659, 0, 658,
	660, 208, 209, 415, 210, 685, 211, 686, 687, 610,
	212, 0, 213, 0, 214, 0, 0, 678, 216, 0,
	217, 0, 0, 0, 620, 218, 220, 219, 221, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 222, 223,
	688, 689, 690, 0, 224, 0, 225, 0, 0, 711,
	0, 226, 676, 0, 372, 0, 0, 227, 228, 0,
	0, 229, 230, 672, 674, 713, 0, 375, 234, 0,
	231, 0, 712, 232, 691, 233, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 235, 236, 237, 715, 383,
	384, 238, 239, 240, 0, 242, 241, 0, 677, 716,
	243, 244, 717, 0, 245, 246, 0, 0, 247, 0,
	248, 718, 249, 250, 252, 386, 251, 719, 253, 254,
	256, 255, 615, 0, 644, 673, 257, 697, 258, 259,
	0, 260, 608, 0, 261, 0, 0, 262, 389, 720,
	263, 721, 667, 264, 265, 266, 267, 268, 269, 270,
	0, 271, 668, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 698, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 722, 294, 295, 621, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 661, 309,
	297, 298, 310, 723, 311, 699, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 700, 316, 317, 669, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 701, 702, 0, 0, 329, 330, 670, 671,
	642, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 662, 339, 0, 405, 340, 341, 342, 406, 703,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 616, 0, 647, 636, 637, 634, 635, 626,
	0, 0, 614, 0, 0, 0, 0, 612, 613, 0,
	184, 185, 0, 186, 0, 0, 622, 0, 664, 629,
	0, 0, 625, 187, 188, 189, 350, 679, 352, 680,
	190, 681, 682, 0, 191, 356, 357, 192, 193, 632,
	663, 683, 684, 360, 0, 194, 675, 0, 655, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 709, 205, 206, 207, 0, 656,
	657, 659, 0, 658, 660, 208, 209, 415, 210, 685,
	211, 686, 687, 0, 212, 0, 213, 0, 214, 0,
	0, 678, 216, 0, 217, 0, 0, 0, 620, 218,
	220, 219, 221, 665, 666, 643, 710, 0, 0, 0,
	0, 0, 222, 223, 688, 689, 690, 0, 224, 0,
	225, 0, 0, 711, 0, 226, 676, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 672, 674, 713,
	0, 375, 234, 0, 231, 0, 712, 232, 691, 233,
	692, 693, 694, 695, 696, 0, 654, 0, 714, 235,
	236, 237, 715, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 677, 716, 243, 244, 717, 0, 245, 246,
	0, 0, 247, 0, 248, 718, 249, 250, 252, 386,
	251, 719, 253, 254, 256, 255, 615, 2207, 644, 673,
	257, 697, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 720, 263, 721, 667, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 668, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 698, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 722, 294, 295, 621, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 661, 309, 297, 298, 310, 723, 311, 699,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 700,
	316, 317, 669, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 701, 702, 0, 0,
	329, 330, 670, 671, 642, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 662, 339, 0, 405, 340,
	341, 342, 406, 703, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 616, 0, 647, 636,
	637, 634, 635, 626, 0, 0, 614, 0, 0, 0,
	0, 612, 613, 1182, 184, 185, 0, 186, 0, 0,
	622, 0, 664, 629, 0, 0, 625, 187, 188, 189,
	350, 679, 352, 680, 190, 681, 682, 0, 191, 356,
	357, 192, 193, 632, 663, 683, 684, 360, 0, 194,
	675, 0, 655, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 709, 205,
	206, 207, 0, 656, 657, 659, 0, 658, 660, 208,
	209, 415, 210, 685, 211, 686, 687, 0, 212, 0,
	213, 0, 214, 0, 0, 678, 216, 0, 217, 0,
	0, 0, 620, 218, 220, 219, 221, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 222, 223, 688, 689,
	690, 0, 224, 0, 225, 0, 0, 711, 0, 226,
	676, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 672, 674, 713, 0, 375, 234, 1429, 231, 0,
	712, 232, 691, 233, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 235, 236, 237, 715, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 677, 716, 243, 244,
	717, 0, 245, 246, 0, 0, 247, 0, 248, 718,
	249, 250, 252, 386, 251, 719, 253, 254, 256, 255,
	615, 0, 644, 673, 257, 697, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 720, 263, 721,
	667, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	668, 272, 392, 273, 1428, 274, 275, 276, 277, 278,
	698, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 722,
	294, 295, 621, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 661, 309, 297, 298,
	310, 723, 311, 699, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 700, 316, 317, 669, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	701, 702, 0, 0, 329, 330, 670, 671, 642, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 662,
	339, 0, 405, 340, 341, 342, 406, 703, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	616, 0, 647, 636, 637, 634, 635, 626, 0, 0,
	614, 0, 0, 0, 0, 612, 613, 0, 184, 185,
	0, 186, 0, 0, 622, 0, 664, 629, 0, 0,
	625, 187, 188, 189, 350, 679, 352, 680, 190, 681,
	682, 0, 191, 356, 357, 192, 193, 632, 663, 683,
	684, 360, 0, 194, 675, 0, 655, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 709, 205, 206, 207, 0, 656, 657, 659,
	0, 658, 660, 208, 209, 415, 210, 685, 211, 686,
	687, 610, 212, 0, 213, 0, 214, 0, 0, 678,
	216, 0, 217, 0, 0, 0, 620, 218, 220, 219,
	221, 665, 666, 643, 710, 0, 0, 0, 0, 0,
	222, 223, 688, 689, 690, 0, 224, 0, 225, 0,
	0, 711, 0, 226, 676, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 672, 674, 713, 0, 375,
	234, 0, 231, 0, 712, 232, 691, 233, 692, 693,
	694, 695, 696, 0, 654, 0, 714, 235, 236, 237,
	715, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	677, 716, 243, 244, 717, 0, 245, 246, 0, 0,
	247, 0, 248, 718, 249, 250, 252, 386, 251, 719,
	253, 254, 256, 255, 615, 0, 644, 673, 257, 697,
	258, 259, 0, 260, 608, 0, 261, 0, 0, 262,
	389, 720, 263, 721, 667, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 668, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 698, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 722, 294, 295, 621, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	661, 309, 297, 298, 310, 723, 311, 699, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 700, 316, 317,
	669, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 701, 702, 0, 0, 329, 330,
	670, 671, 642, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 662, 339, 0, 405, 340, 341, 342,
	406, 703, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 616, 0, 647, 636, 637, 634,
	635, 626, 0, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 184, 185, 0, 186, 0, 0, 622, 0,
	664, 629, 0, 0, 625, 187, 188, 189, 350, 679,
	352, 680, 190, 681, 682, 0, 191, 356, 357, 192,
	193, 632, 663, 683, 684, 360, 0, 194, 675, 0,
	655, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 709, 205, 206, 207,
	0, 656, 657, 659, 0, 658, 660, 208, 209, 415,
	210, 685, 211, 686, 687, 2621, 212, 0, 213, 0,
	214, 0, 0, 678, 216, 0, 217, 0, 0, 0,
	620, 218, 220, 219, 221, 665, 666, 643, 710, 0,
	0, 0, 0, 0, 222, 223, 688, 689, 690, 0,
	224, 0, 225, 0, 0, 711, 0, 226, 676, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 672,
	674, 713, 0, 375, 234, 0, 231, 0, 712, 232,
	691, 233, 692, 693, 694, 695, 696, 0, 654, 0,
	714, 235, 236, 237, 715, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 677, 716, 243, 244, 717, 0,
	245, 246, 0, 0, 247, 0, 248, 2622, 249, 250,
	252, 386, 251, 719, 253, 254, 256, 255, 615, 0,
	644, 673, 257, 697, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 720, 263, 721, 667, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 668, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 698, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 722, 294, 295,
	621, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 661, 309, 297, 298, 310, 723,
	311, 699, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 700, 316, 317, 669, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 701, 702,
	0, 0, 329, 330, 670, 671, 642, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 662, 339, 0,
	405, 340, 341, 342, 406, 703, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 616, 0,
	647, 636, 637, 634, 635, 626, 0, 0, 614, 0,
	0, 0, 0, 612, 613, 0, 184, 185, 0, 186,
	0, 0, 622, 0, 664, 629, 0, 0, 625, 187,
	188, 189, 350, 679, 352, 680, 190, 681, 682, 0,
	191, 356, 357, 192, 193, 632, 663, 683, 684, 360,
	0, 194, 675, 0, 655, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	709, 205, 206, 207, 0, 656, 657, 659, 0, 658,
	660, 208, 209, 415, 210, 685, 211, 686, 687, 610,
	212, 0, 213, 0, 214, 0, 0, 678, 216, 0,
	217, 0, 0, 0, 620, 218, 220, 219, 221, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 222, 223,
	688, 689, 690, 0, 224, 0, 225, 0, 0, 711,
	0, 226, 676, 0, 372, 0, 0, 227, 228, 0,
	0, 229, 230, 672, 674, 713, 0, 375, 234, 0,
	231, 0, 712, 232, 691, 233, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 235, 236, 237, 715, 383,
	384, 238, 239, 240, 0, 242, 241, 0, 677, 716,
	243, 244, 717, 0, 245, 246, 0, 0, 247, 0,
	248, 718, 249, 250, 252, 386, 251, 719, 253, 254,
	256, 255, 615, 0, 644, 673, 257, 697, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 389, 720,
	263, 721, 667, 264, 265, 266, 267, 268, 269, 270,
	0, 271, 668, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 698, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 722, 294, 295, 621, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 661, 309,
	297, 298, 310, 723, 311, 699, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 700, 316, 317, 669, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 701, 702, 0, 0, 329, 330, 670, 671,
	642, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 662, 339, 0, 405, 340, 341, 342, 406, 703,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 616, 0, 647, 636, 637, 634, 635, 626,
	0, 0, 614, 0, 0, 0, 0, 612, 613, 0,
	184, 185, 0, 186, 0, 0, 622, 0, 664, 629,
	0, 0, 625, 187, 188, 189, 350, 679, 352, 680,
	190, 681, 682, 0, 191, 356, 357, 192, 193, 632,
	663, 683, 684, 360, 0, 194, 675, 0, 655, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 709, 205, 206, 207, 0, 656,
	657, 659, 0, 658, 660, 208, 209, 415, 210, 685,
	211, 686, 687, 0, 212, 0, 213, 0, 214, 0,
	0, 678, 216, 0, 217, 0, 0, 0, 620, 218,
	220, 219, 221, 665, 666, 643, 710, 0, 0, 0,
	0, 0, 222, 223, 688, 689, 690, 0, 224, 0,
	225, 0, 0, 711, 0, 226, 676, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 672, 674, 713,
	0, 375, 234, 0, 231, 0, 712, 232, 691, 233,
	692, 693, 694, 695, 696, 0, 654, 0, 714, 235,
	236, 237, 715, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 677, 716, 243, 244, 717, 0, 245, 246,
	0, 0, 247, 0, 248, 718, 249, 250, 252, 386,
	251, 719, 253, 254, 256, 255, 615, 0, 644, 673,
	257, 697, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 720, 263, 721, 667, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 668, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 698, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 722, 294, 295, 621, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 661, 309, 297, 298, 310, 723, 311, 699,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 700,
	316, 317, 669, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 701, 702, 0, 0,
	329, 330, 670, 671, 642, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 662, 339, 0, 405, 340,
	341, 342, 406, 703, 2060, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 616, 0, 647, 636,
	637, 634, 635, 626, 0, 0, 614, 0, 0, 0,
	0, 612, 613, 0, 184, 185, 0, 186, 0, 0,
	622, 0, 664, 629, 0, 0, 625, 187, 188, 189,
	350, 679, 352, 680, 190, 681, 682, 0, 191, 356,
	357, 192, 193, 632, 663, 683, 684, 360, 0, 194,
	675, 0, 655, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 709, 205,
	206, 207, 0, 656, 657, 659, 0, 658, 660, 208,
	209, 415, 210, 685, 211, 686, 687, 0, 212, 0,
	213, 0, 214, 0, 0, 678, 216, 0, 217, 0,
	0, 0, 620, 218, 220, 219, 221, 665, 666, 643,
	710, 0, 0, 0, 0, 0, 222, 223, 688, 689,
	690, 0, 224, 0, 225, 0, 0, 711, 0, 226,
	676, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 672, 674, 713, 0, 375, 234, 0, 231, 0,
	712, 232, 691, 233, 692, 693, 694, 695, 696, 0,
	654, 0, 714, 235, 236, 237, 715, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 677, 716, 243, 244,
	717, 0, 245, 246, 0, 0, 247, 0, 248, 718,
	249, 250, 252, 386, 251, 719, 253, 254, 256, 255,
	615, 0, 644, 673, 257, 697, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 720, 263, 721,
	667, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	668, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	698, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 722,
	294, 295, 621, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 661, 309, 297, 298,
	310, 723, 311, 699, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 700, 316, 317, 669, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	701, 702, 0, 0, 329, 330, 670, 671, 642, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 662,
	339, 0, 405, 340, 341, 342, 406, 703, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	616, 0, 647, 636, 637, 634, 635, 626, 0, 0,
	614, 0, 0, 0, 0, 612, 613, 1182, 184, 185,
	0, 186, 0, 0, 622, 0, 664, 629, 0, 0,
	625, 187, 188, 189, 350, 679, 352, 680, 190, 681,
	682, 0, 191, 356, 357, 192, 193, 632, 663, 683,
	684, 360, 0, 194, 675, 0, 655, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 709, 205, 206, 207, 0, 656, 657, 659,
	0, 658, 660, 208, 209, 415, 210, 685, 211, 686,
	687, 0, 212, 0, 213, 0, 214, 0, 0, 678,
	216, 0, 217, 0, 0, 0, 620, 218, 220, 219,
	221, 665, 666, 643, 710, 0, 0, 0, 0, 0,
	222, 223, 688, 689, 690, 0, 224, 0, 225, 0,
	1584, 711, 0, 226, 676, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 672, 674, 713, 0, 375,
	234, 0, 231, 0, 712, 232, 691, 233, 692, 693,
	694, 695, 696, 0, 654, 0, 714, 235, 236, 237,
	715, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	677, 716, 243, 244, 717, 0, 245, 246, 0, 0,
	247, 0, 248, 718, 249, 250, 252, 386, 251, 719,
	253, 254, 256, 255, 615, 0, 644, 673, 257, 697,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	389, 720, 263, 721, 667, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 668, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 698, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 722, 294, 295, 621, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	661, 309, 297, 298, 310, 723, 311, 699, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 700, 316, 317,
	669, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 701, 702, 0, 0, 329, 330,
	670, 671, 642, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 662, 339, 0, 405, 340, 341, 342,
	406, 703, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 616, 1629, 0, 647, 636, 637,
	634, 635, 626, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 0, 184, 185, 0, 186, 0, 622, 0,
	0, 664, 629, 0, 625, 0, 187, 188, 189, 350,
	679, 352, 680, 190, 681, 682, 0, 191, 356, 357,
	192, 193, 632, 663, 683, 684, 360, 0, 194, 675,
	0, 655, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 709, 205, 206,
	207, 0, 656, 657, 659, 0, 658, 660, 208, 209,
	415, 210, 685, 211, 686, 687, 0, 212, 0, 213,
	0, 214, 0, 0, 678, 216, 0, 217, 0, 0,
	0, 620, 218, 220, 219, 221, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 222, 223, 688, 689, 690,
	0, 224, 0, 225, 0, 0, 711, 0, 226, 676,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	672, 674, 713, 0, 375, 234, 0, 231, 0, 712,
	232, 691, 233, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 235, 236, 237, 715, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 677, 716, 243, 244, 717,
	0, 245, 246, 0, 0, 247, 0, 248, 718, 249,
	250, 252, 386, 251, 719, 253, 254, 256, 255, 615,
	0, 644, 673, 257, 697, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 720, 263, 721, 667,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 668,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 698,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 722, 294,
	295, 621, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 661, 309, 297, 298, 310,
	723, 311, 699, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 700, 316, 317, 669, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 701,
	702, 0, 0, 329, 330, 670, 671, 642, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 662, 339,
	0, 405, 340, 341, 342, 406, 703, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 616,
	1593, 0, 647, 636, 637, 634, 635, 626, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 0, 184, 185,
	0, 186, 0, 622, 0, 0, 664, 629, 0, 625,
	0, 187, 188, 189, 350, 679, 352, 680, 190, 681,
	682, 0, 191, 356, 357, 192, 193, 632, 663, 683,
	684, 360, 0, 194, 675, 0, 655, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 709, 205, 206, 207, 0, 656, 657, 659,
	0, 658, 660, 208, 209, 415, 210, 685, 211, 686,
	687, 0, 212, 0, 213, 0, 214, 0, 0, 678,
	216, 0, 217, 0, 0, 0, 620, 218, 220, 219,
	221, 665, 666, 643, 710, 0, 0, 0, 0, 0,
	222, 223, 688, 689, 690, 0, 224, 0, 225, 0,
	0, 711, 0, 226, 676, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 672, 674, 713, 0, 375,
	234, 0, 231, 0, 712, 232, 691, 233, 692, 693,
	694, 695, 696, 0, 654, 0, 714, 235, 236, 237,
	715, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	677, 716, 243, 244, 717, 0, 245, 246, 0, 0,
	247, 0, 248, 718, 249, 250, 252, 386, 251, 719,
	253, 254, 256, 255, 615, 0, 644, 673, 257, 697,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	389, 720, 263, 721, 667, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 668, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 698, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 722, 294, 295, 621, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	661, 309, 297, 298, 310, 723, 311, 699, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 700, 316, 317,
	669, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 701, 702, 0, 0, 329, 330,
	670, 671, 642, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 662, 339, 0, 405, 340, 341, 342,
	406, 703, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 616, 1591, 0, 647, 636, 637,
	634, 635, 626, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 0, 184, 185, 0, 186, 0, 622, 0,
	0, 664, 629, 0, 625, 0, 187, 188, 189, 350,
	679, 352, 680, 190, 681, 682, 0, 191, 356, 357,
	192, 193, 632, 663, 683, 684, 360, 0, 194, 675,
	0, 655, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 709, 205, 206,
	207, 0, 656, 657, 659, 0, 658, 660, 208, 209,
	415, 210, 685, 211, 686, 687, 0, 212, 0, 213,
	0, 214, 0, 0, 678, 216, 0, 217, 0, 0,
	0, 620, 218, 220, 219, 221, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 222, 223, 688, 689, 690,
	0, 224, 0, 225, 0, 0, 711, 0, 226, 676,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	672, 674, 713, 0, 375, 234, 0, 231, 0, 712,
	232, 691, 233, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 235, 236, 237, 715, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 677, 716, 243, 244, 717,
	0, 245, 246, 0, 0, 247, 0, 248, 718, 249,
	250, 252, 386, 251, 719, 253, 254, 256, 255, 615,
	0, 644, 673, 257, 697, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 720, 263, 721, 667,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 668,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 698,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 722, 294,
	295, 621, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 661, 309, 297, 298, 310,
	723, 311, 699, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 700, 316, 317, 669, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 701,
	702, 0, 0, 329, 330, 670, 671, 642, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 662, 339,
	0, 405, 340, 341, 342, 406, 703, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 616,
	1575, 0, 647, 636, 637, 634, 635, 626, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 0, 184, 185,
	0, 186, 0, 622, 0, 0, 664, 629, 0, 625,
	0, 187, 188, 189, 350, 679, 352, 680, 190, 681,
	682, 0, 191, 356, 357, 192, 193, 632, 663, 683,
	684, 360, 0, 194, 675, 0, 655, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 709, 205, 206, 207, 0, 656, 657, 659,
	0, 658, 660, 208, 209, 415, 210, 685, 211, 686,
	687, 0, 212, 0, 213, 0, 214, 0, 0, 678,
	216, 0, 217, 0, 0, 0, 620, 218, 220, 219,
	221, 665, 666, 643, 710, 0, 0, 0, 0, 0,
	222, 223, 688, 689, 690, 0, 224, 0, 225, 0,
	0, 711, 0, 226, 676, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 672, 674, 713, 0, 375,
	234, 0, 231, 0, 712, 232, 691, 233, 692, 693,
	694, 695, 696, 0, 654, 0, 714, 235, 236, 237,
	715, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	677, 716, 243, 244, 717, 0, 245, 246, 0, 0,
	247, 0, 248, 718, 249, 250, 252, 386, 251, 719,
	253, 254, 256, 255, 615, 0, 644, 673, 257, 697,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	389, 720, 263, 721, 667, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 668, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 698, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 722, 294, 295, 621, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	661, 309, 297, 298, 310, 723, 311, 699, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 700, 316, 317,
	669, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 701, 702, 0, 0, 329, 330,
	670, 671, 642, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 662, 339, 0, 405, 340, 341, 342,
	406, 703, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 616, 1563, 0, 647, 636, 637,
	634, 635, 626, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 0, 184, 185, 0, 186, 0, 622, 0,
	0, 664, 629, 0, 625, 0, 187, 188, 189, 350,
	679, 352, 680, 190, 681, 682, 0, 191, 356, 357,
	192, 193, 632, 663, 683, 684, 360, 0, 194, 675,
	0, 655, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 709, 205, 206,
	207, 0, 656, 657, 659, 0, 658, 660, 208, 209,
	415, 210, 685, 211, 686, 687, 0, 212, 0, 213,
	0, 214, 0, 0, 678, 216, 0, 217, 0, 0,
	0, 620, 218, 220, 219, 221, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 222, 223, 688, 689, 690,
	0, 224, 0, 225, 0, 0, 711, 0, 226, 676,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	672, 674, 713, 0, 375, 234, 0, 231, 0, 712,
	232, 691, 233, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 235, 236, 237, 715, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 677, 716, 243, 244, 717,
	0, 245, 246, 0, 0, 247, 0, 248, 718, 249,
	250, 252, 386, 251, 719, 253, 254, 256, 255, 615,
	0, 644, 673, 257, 697, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 720, 263, 721, 667,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 668,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 698,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 722, 294,
	295, 621, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 661, 309, 297, 298, 310,
	723, 311, 699, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 700, 316, 317, 669, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 701,
	702, 0, 0, 329, 330, 670, 671, 642, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 662, 339,
	0, 405, 340, 341, 342, 406, 703, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 616,
	1561, 0, 1553, 636, 637, 634, 635, 626, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 0, 184, 185,
	0, 186, 0, 622, 0, 0, 664, 629, 0, 625,
	0, 187, 188, 189, 350, 679, 352, 680, 190, 681,
	682, 0, 191, 356, 357, 192, 193, 632, 663, 683,
	684, 360, 0, 194, 675, 0, 655, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 709, 205, 206, 207, 0, 656, 657, 659,
	0, 658, 660, 208, 209, 415, 210, 685, 1556, 686,
	687, 0, 212, 0, 213, 0, 214, 0, 0, 678,
	216, 0, 217, 0, 0, 0, 620, 218, 220, 219,
	221, 665, 666, 643, 710, 0, 0, 0, 0, 0,
	222, 223, 688, 689, 690, 0, 224, 0, 225, 0,
	0, 711, 0, 226, 676, 0, 372, 0, 0, 227,
	1557, 0, 0, 229, 230, 672, 674, 713, 0, 375,
	234, 0, 231, 0, 712, 232, 691, 233, 692, 693,
	694, 695, 696, 0, 654, 0, 714, 235, 236, 237,
	715, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	677, 716, 243, 244, 717, 0, 245, 246, 0, 0,
	247, 0, 248, 718, 1558, 1555, 252, 386, 251, 719,
	253, 254, 256, 255, 615, 0, 644, 673, 257, 697,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	389, 720, 263, 721, 667, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 668, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 698, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 722, 294, 295, 621, 296, 0, 300,
	301, 302, 303, 1559, 0, 306, 395, 305, 307, 308,
	661, 309, 297, 298, 310, 723, 311, 699, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 700, 316, 317,
	669, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 701, 702, 0, 0, 329, 330,
	670, 671, 642, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 662, 339, 0, 405, 340, 341, 342,
	406, 703, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 1554, 348, 616, 1550, 0, 1553, 636, 637,
	634, 635, 626, 0, 614, 0, 0, 0, 0, 612,
	613, 0, 0, 184, 185, 0, 186, 0, 622, 0,
	0, 664, 629, 0, 625, 0, 187, 188, 189, 350,
	679, 352, 680, 190, 681, 682, 0, 191, 356, 357,
	192, 193, 632, 663, 683, 684, 360, 0, 194, 675,
	0, 655, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 709, 205, 206,
	207, 0, 656, 657, 659, 0, 658, 660, 208, 209,
	415, 210, 685, 1556, 686, 687, 0, 212, 0, 213,
	0, 214, 0, 0, 678, 216, 0, 217, 0, 0,
	0, 620, 218, 220, 219, 221, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 222, 223, 688, 689, 690,
	0, 224, 0, 225, 0, 0, 711, 0, 226, 676,
	0, 372, 0, 0, 227, 1557, 0, 0, 229, 230,
	672, 674, 713, 0, 375, 234, 0, 231, 0, 712,
	232, 691, 233, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 235, 236, 237, 715, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 677, 716, 243, 244, 717,
	0, 245, 246, 0, 0, 247, 0, 248, 718, 1558,
	1555, 252, 386, 251, 719, 253, 254, 256, 255, 615,
	0, 644, 673, 257, 697, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 720, 263, 721, 667,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 668,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 698,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 722, 294,
	295, 621, 296, 0, 300, 301, 302, 303, 1559, 0,
	306, 395, 305, 307, 308, 661, 309, 297, 298, 310,
	723, 311, 699, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 700, 316, 317, 669, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 701,
	702, 0, 0, 329, 330, 670, 671, 642, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 662, 339,
	0, 405, 340, 341, 342, 406, 703, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 1554, 348, 616,
	0, 647, 636, 637, 634, 635, 626, 0, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 184, 185, 0,
	186, 0, 0, 622, 0, 664, 629, 0, 0, 625,
	187, 188, 189, 350, 679, 352, 680, 190, 681, 682,
	0, 191, 356, 357, 192, 193, 632, 663, 683, 684,
	360, 0, 194, 675, 0, 655, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 709, 205, 206, 207, 0, 656, 657, 659, 0,
	658, 660, 208, 209, 415, 210, 685, 211, 686, 687,
	0, 212, 0, 213, 0, 214, 0, 0, 678, 216,
	0, 217, 0, 0, 0, 620, 218, 220, 219, 221,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 222,
	223, 688, 689, 690, 0, 224, 0, 225, 0, 0,
	711, 0, 226, 676, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 672, 674, 713, 0, 375, 234,
	0, 231, 0, 712, 232, 691, 233, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 235, 236, 237, 715,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 677,
	716, 243, 244, 717, 0, 245, 246, 0, 0, 247,
	0, 248, 718, 249, 250, 252, 386, 251, 719, 253,
	254, 256, 255, 615, 0, 644, 673, 257, 697, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	720, 263, 721, 667, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 668, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 698, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 722, 294, 295, 621, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 661,
	309, 297, 298, 310, 723, 311, 699, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 700, 316, 317, 669,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 701, 702, 0, 0, 329, 330, 670,
	671, 642, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 662, 339, 0, 405, 340, 341, 342, 406,
	703, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 616, 0, 647, 636, 637, 634, 635,
	626, 0, 0, 614, 0, 0, 0, 0, 612, 613,
	0, 184, 185, 1416, 186, 1125, 0, 622, 0, 664,
	629, 0, 0, 625, 187, 188, 189, 350, 679, 352,
	680, 190, 681, 682, 0, 191, 356, 357, 192, 193,
	632, 663, 683, 684, 360, 0, 194, 675, 0, 655,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 709, 205, 206, 207, 0,
	656, 657, 659, 0, 658, 660, 208, 209, 415, 210,
	685, 211, 686, 687, 0, 212, 0, 213, 0, 214,
	0, 0, 678, 216, 0, 217, 0, 0, 0, 620,
	218, 220, 219, 221, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 222, 223, 688, 689, 690, 0, 224,
	0, 225, 0, 0, 711, 0, 226, 676, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 672, 674,
	713, 0, 375, 234, 0, 231, 0, 712, 232, 691,
	233, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	235, 236, 237, 715, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 677, 716, 243, 244, 717, 0, 245,
	246, 0, 0, 247, 0, 248, 718, 249, 250, 252,
	386, 251, 719, 253, 254, 256, 255, 615, 0, 644,
	673, 257, 697, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 389, 720, 263, 721, 667, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 668, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 698, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 722, 294, 295, 621,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 661, 309, 297, 298, 310, 723, 311,
	699, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	700, 316, 317, 669, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 701, 702, 0,
	0, 329, 330, 670, 671, 642, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 662, 339, 0, 405,
	340, 341, 342, 406, 703, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 616, 878, 0,
	647, 636, 637, 634, 635, 626, 0, 614, 0, 0,
	0, 0, 612, 613, 0, 0, 184, 185, 0, 186,
	0, 622, 0, 0, 664, 629, 0, 625, 0, 187,
	188, 189, 350, 679, 352, 680, 190, 681, 682, 0,
	191, 356, 357, 192, 193, 632, 663, 683, 684, 360,
	0, 194, 675, 0, 655, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	709, 205, 206, 207, 0, 656, 657, 659, 0, 658,
	660, 208, 209, 415, 210, 685, 211, 686, 687, 0,
	212, 0, 213, 0, 214, 0, 0, 678, 216, 0,
	217, 0, 0, 0, 620, 218, 220, 219, 221, 665,
	666, 643, 710, 0, 0, 0, 0, 0, 222, 223,
	688, 689, 690, 0, 224, 0, 225, 0, 0, 711,
	0, 226, 676, 0, 372, 0, 0, 227, 228, 0,
	0, 229, 230, 672, 674, 713, 0, 375, 234, 0,
	231, 0, 712, 232, 691, 233, 692, 693, 694, 695,
	696, 0, 654, 0, 714, 235, 236, 237, 715, 383,
	384, 238, 239, 240, 0, 242, 241, 0, 677, 716,
	243, 244, 717, 0, 245, 246, 0, 0, 247, 0,
	248, 718, 249, 250, 252, 386, 251, 719, 253, 254,
	256, 255, 615, 0, 644, 673, 257, 697, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 389, 720,
	263, 721, 667, 264, 265, 266, 267, 268, 269, 270,
	0, 271, 668, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 698, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 722, 294, 295, 621, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 661, 309,
	297, 298, 310, 723, 311, 699, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 700, 316, 317, 669, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 701, 702, 0, 0, 329, 330, 670, 671,
	642, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 662, 339, 0, 405, 340, 341, 342, 406, 703,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 616, 876, 0, 647, 636, 637, 634, 635,
	626, 0, 614, 0, 0, 0, 0, 612, 613, 0,
	0, 184, 185, 0, 186, 0, 622, 0, 0, 664,
	629, 0, 625, 0, 187, 188, 189, 350, 679, 352,
	680, 190, 681, 682, 0, 191, 356, 357, 192, 193,
	632, 663, 683, 684, 360, 0, 194, 675, 0, 655,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 709, 205, 206, 207, 0,
	656, 657, 659, 0, 658, 660, 208, 209, 415, 210,
	685, 211, 686, 687, 0, 212, 0, 213, 0, 214,
	0, 0, 678, 216, 0, 217, 0, 0, 0, 620,
	218, 220, 219, 221, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 222, 223, 688, 689, 690, 0, 224,
	0, 225, 0, 0, 711, 0, 226, 676, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 672, 674,
	713, 0, 375, 234, 0, 231, 0, 712, 232, 691,
	233, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	235, 236, 237, 715, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 677, 716, 243, 244, 717, 0, 245,
	246, 0, 0, 247, 0, 248, 718, 249, 250, 252,
	386, 251, 719, 253, 254, 256, 255, 615, 0, 644,
	673, 257, 697, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 389, 720, 263, 721, 667, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 668, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 698, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 722, 294, 295, 621,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 661, 309, 297, 298, 310, 723, 311,
	699, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	700, 316, 317, 669, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 701, 702, 0,
	0, 329, 330, 670, 671, 642, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 662, 339, 0, 405,
	340, 341, 342, 406, 703, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 616, 0, 647,
	636, 637, 634, 635, 626, 0, 0, 614, 0, 0,
	0, 0, 612, 613, 0, 184, 185, 0, 186, 0,
	0, 622, 0, 664, 629, 0, 0, 625, 187, 188,
	189, 350, 679, 352, 680, 190, 681, 682, 0, 191,
	356, 357, 192, 193, 632, 663, 683, 684, 360, 0,
	194, 675, 0, 655, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 709,
	205, 206, 2538, 0, 656, 657, 659, 0, 658, 660,
	208, 209, 415, 210, 685, 211, 686, 687, 0, 212,
	0, 213, 0, 214, 0, 0, 678, 216, 0, 217,
	0, 0, 0, 620, 218, 220, 219, 221, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 222, 223, 688,
	689, 690, 0, 224, 0, 225, 0, 0, 711, 0,
	226, 676, 0, 372, 0, 0, 227, 228, 0, 0,
	229, 230, 672, 674, 713, 0, 375, 234, 0, 231,
	0, 712, 232, 691, 233, 692, 693, 694, 695, 696,
	0, 654, 0, 714, 235, 236, 237, 715, 383, 384,
	238, 239, 240, 0, 242, 241, 0, 677, 716, 243,
	244, 717, 0, 245, 246, 0, 0, 247, 0, 248,
	718, 249, 250, 252, 386, 251, 719, 253, 254, 256,
	255, 615, 0, 644, 673, 257, 697, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 389, 720, 263,
	721, 667, 264, 265, 266, 267, 268, 269, 270, 0,
	271, 668, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 698, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	722, 294, 295, 621, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 661, 309, 297,
	298, 310, 723, 311, 699, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 700, 316, 317, 669, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 701, 702, 0, 0, 329, 330, 670, 671, 642,
	331, 332, 2537, 334, 0, 0, 335, 336, 337, 338,
	662, 339, 0, 405, 340, 341, 342, 406, 703, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 616, 0, 647, 636, 637, 634, 635, 626, 0,
	0, 614, 0, 0, 0, 0, 612, 613, 0, 184,
	185, 0, 186, 0, 0, 622, 0, 664, 629, 0,
	0, 625, 187, 188, 189, 350, 679, 352, 680, 190,
	681, 682, 0, 191, 356, 357, 192, 193, 632, 663,
	683, 684, 360, 0, 194, 675, 0, 655, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 709, 205, 206, 207, 0, 656, 657,
	659, 0, 658, 660, 208, 209, 415, 210, 685, 211,
	686, 687, 0, 212, 0, 213, 0, 214, 0, 0,
	678, 216, 0, 217, 0, 0, 0, 620, 218, 220,
	219, 221, 665, 666, 643, 710, 0, 0, 0, 0,
	0, 222, 223, 688, 689, 690, 0, 224, 0, 225,
	0, 0, 711, 0, 226, 676, 0, 372, 0, 0,
	227, 228, 0, 0, 229, 230, 672, 674, 713, 0,
	375, 234, 0, 231, 0, 712, 232, 691, 233, 692,
	693, 694, 695, 696, 0, 654, 0, 714, 235, 236,
	237, 715, 383, 384, 238, 239, 240, 0, 242, 241,
	0, 677, 716, 243, 244, 717, 0, 245, 246, 0,
	0, 247, 0, 248, 718, 249, 250, 252, 386, 251,
	719, 253, 254, 256, 255, 615, 0, 644, 673, 257,
	697, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 389, 720, 263, 721, 667, 264, 265, 266, 267,
	268, 269, 270, 0, 271, 668, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 698, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 722, 294, 295, 621, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 661, 309, 297, 298, 310, 723, 311, 699, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 700, 316,
	317, 669, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 701, 702, 0, 0, 329,
	330, 670, 671, 642, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 662, 339, 0, 405, 340, 341,
	342, 406, 703, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 616, 0, 647, 636, 637,
	634, 635, 626, 0, 0, 614, 0, 0, 0, 0,
	612, 613, 0, 184, 185, 0, 186, 0, 0, 622,
	0, 664, 629, 0, 0, 625, 187, 188, 189, 2536,
	679, 352, 680, 190, 681, 682, 0, 191, 356, 357,
	192, 193, 632, 663, 683, 684, 360, 0, 194, 675,
	0, 655, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 709, 205, 206,
	2538, 0, 656, 657, 659, 0, 658, 660, 208, 209,
	415, 210, 685, 211, 686, 687, 0, 212, 0, 213,
	0, 214, 0, 0, 678, 216, 0, 217, 0, 0,
	0, 620, 218, 220, 219, 221, 665, 666, 643, 710,
	0, 0, 0, 0, 0, 222, 223, 688, 689, 690,
	0, 224, 0, 225, 0, 0, 711, 0, 226, 676,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	672, 674, 713, 0, 375, 234, 0, 231, 0, 712,
	232, 691, 233, 692, 693, 694, 695, 696, 0, 654,
	0, 714, 235, 236, 237, 715, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 677, 716, 243, 244, 717,
	0, 245, 246, 0, 0, 247, 0, 248, 718, 249,
	250, 252, 386, 251, 719, 253, 254, 256, 255, 615,
	0, 644, 673, 257, 697, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 720, 263, 721, 667,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 668,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 698,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 722, 294,
	295, 621, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 661, 309, 297, 298, 310,
	723, 311, 699, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 700, 316, 317, 669, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 701,
	702, 0, 0, 329, 330, 670, 671, 642, 331, 332,
	2537, 334, 0, 0, 335, 336, 337, 338, 662, 339,
	0, 405, 340, 341, 342, 406, 703, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 616,
	0, 647, 636, 637, 634, 635, 626, 0, 0, 614,
	0, 0, 0, 0, 612, 613, 0, 184, 185, 0,
	186, 0, 0, 622, 0, 664, 629, 0, 0, 625,
	187, 188, 189, 350, 679, 352, 680, 190, 681, 682,
	0, 191, 356, 357, 192, 193, 632, 663, 683, 684,
	360, 0, 194, 675, 0, 655, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 709, 205, 206, 207, 0, 656, 657, 659, 0,
	658, 660, 208, 209, 415, 210, 685, 211, 686, 687,
	0, 212, 0, 213, 0, 214, 0, 0, 678, 216,
	0, 217, 0, 0, 0, 620, 218, 220, 219, 221,
	665, 666, 643, 710, 0, 0, 0, 0, 0, 222,
	223, 688, 689, 690, 0, 224, 0, 225, 0, 0,
	711, 0, 226, 676, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 672, 674, 713, 0, 375, 234,
	0, 231, 0, 712, 232, 691, 233, 692, 693, 694,
	695, 696, 0, 654, 0, 714, 235, 236, 237, 715,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 677,
	716, 243, 244, 717, 0, 245, 246, 0, 0, 247,
	0, 248, 718, 249, 250, 252, 386, 251, 719, 253,
	254, 256, 255, 0, 0, 644, 673, 257, 697, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	720, 263, 721, 667, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 668, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 698, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 722, 294, 295, 1573, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 661,
	309, 297, 298, 310, 723, 311, 699, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 700, 316, 317, 669,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 701, 702, 0, 0, 329, 330, 670,
	671, 642, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 662, 339, 0, 405, 340, 341, 342, 406,
	703, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 647, 636, 637, 634, 635,
	626, 0, 0, 1571, 0, 0, 0, 0, 1569, 1570,
	0, 184, 185, 0, 186, 0, 0, 1572, 0, 664,
	629, 0, 0, 625, 187, 188, 189, 350, 679, 352,
	680, 190, 681, 682, 0, 191, 356, 357, 192, 193,
	0, 663, 683, 684, 360, 0, 194, 675, 0, 655,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 709, 205, 206, 207, 0,
	656, 657, 659, 0, 658, 660, 208, 209, 415, 210,
	685, 211, 686, 687, 0, 212, 0, 213, 0, 214,
	0, 0, 678, 216, 0, 217, 0, 0, 0, 365,
	218, 220, 219, 221, 665, 666, 643, 710, 0, 0,
	0, 0, 0, 222, 223, 688, 689, 690, 0, 224,
	0, 225, 0, 0, 711, 0, 226, 676, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 672, 674,
	713, 0, 375, 234, 0, 231, 0, 712, 232, 691,
	233, 692, 693, 694, 695, 696, 0, 654, 0, 714,
	235, 236, 237, 715, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 677, 716, 243, 244, 717, 0, 245,
	246, 0, 0, 247, 0, 248, 718, 249, 250, 252,
	386, 251, 719, 253, 254, 256, 255, 0, 0, 644,
	673, 257, 697, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 389, 720, 263, 721, 667, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 668, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 698, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 722, 294, 295, 1573,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 661, 309, 297, 298, 310, 723, 311,
	699, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	700, 316, 317, 669, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 701, 702, 0,
	0, 329, 330, 670, 671, 642, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 662, 339, 0, 405,
	340, 341, 342, 406, 703, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 647,
	636, 637, 634, 635, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 1572, 0, 664, 629, 0, 0, 625, 187, 188,
	189, 0, 679, 352, 680, 190, 681, 682, 0, 191,
	356, 357, 192, 193, 632, 663, 683, 684, 360, 0,
	194, 675, 0, 655, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 709,
	205, 206, 2538, 0, 656, 657, 659, 0, 658, 660,
	208, 209, 415, 210, 685, 211, 686, 687, 0, 212,
	0, 213, 0, 214, 0, 0, 678, 216, 0, 217,
	0, 0, 0, 620, 218, 220, 219, 221, 665, 666,
	643, 710, 0, 0, 0, 0, 0, 222, 223, 688,
	689, 690, 0, 224, 0, 225, 0, 0, 711, 0,
	226, 676, 0, 372, 0, 0, 227, 228, 0, 0,
	229, 230, 672, 674, 0, 0, 375, 234, 0, 231,
	0, 712, 232, 691, 233, 692, 693, 694, 695, 696,
	0, 654, 0, 0, 235, 236, 237, 715, 383, 384,
	238, 239, 240, 0, 242, 241, 0, 677, 716, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	718, 249, 250, 252, 386, 251, 719, 253, 254, 256,
	255, 615, 0, 644, 673, 257, 697, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 389, 720, 263,
	721, 667, 264, 265, 266, 267, 268, 269, 270, 0,
	271, 668, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 698, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	722, 294, 295, 621, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 661, 309, 297,
	298, 310, 0, 311, 699, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 700, 316, 317, 669, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 701, 702, 0, 0, 329, 330, 670, 671, 642,
	331, 332, 2537, 334, 0, 0, 335, 336, 337, 338,
	662, 339, 0, 405, 340, 341, 342, 406, 703, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 612, 613, 0, 184,
	185, 0, 186, 0, 0, 622, 0, 664, 0, 0,
	0, 625, 187, 188, 189, 350, 351, 352, 353, 190,
	354, 355, 0, 191, 356, 357, 192, 193, 0, 663,
	358, 359, 360, 0, 194, 675, 0, 655, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 709, 205, 206, 207, 0, 656, 657,
	659, 0, 658, 660, 208, 209, 415, 210, 362, 211,
	363, 364, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 365, 218, 220,
	219, 221, 665, 666, 0, 710, 0, 0, 0, 0,
	0, 222, 223, 368, 369, 370, 0, 224, 0, 225,
	0, 0, 711, 0, 226, 676, 0, 372, 0, 0,
	227, 228, 0, 0, 229, 230, 672, 674, 713, 0,
	375, 234, 0, 231, 0, 712, 232, 376, 233, 377,
	378, 379, 380, 381, 0, 382, 0, 714, 235, 236,
	237, 715, 383, 384, 238, 239, 240, 0, 242, 241,
	0, 677, 716, 243, 244, 717, 0, 245, 246, 0,
	0, 247, 0, 248, 718, 249, 250, 252, 386, 251,
	719, 253, 254, 256, 255, 0, 0, 0, 673, 257,
	388, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 389, 720, 263, 721, 667, 264, 265, 266, 267,
	268, 269, 270, 0, 271, 668, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 722, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 661, 309, 297, 298, 310, 723, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 669, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 670, 671, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 662, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 927, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 2159,
	0, 349, 0, 0, 0, 0, 187, 188, 189, 350,
	351, 352, 353, 190, 354, 355, 0, 191, 356, 357,
	192, 193, 0, 0, 358, 359, 360, 0, 194, 361,
	0, 785, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 709, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	415, 210, 362, 211, 363, 364, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 365, 218, 220, 219, 221, 366, 367, 0, 710,
	0, 0, 0, 0, 0, 222, 223, 368, 369, 370,
	0, 224, 0, 225, 0, 0, 711, 0, 226, 371,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	373, 374, 713, 0, 375, 234, 0, 231, 0, 712,
	232, 376, 233, 377, 378, 379, 380, 381, 0, 382,
	0, 714, 235, 236, 237, 715, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 385, 716, 243, 244, 717,
	0, 245, 246, 0, 0, 247, 0, 248, 718, 249,
	250, 252, 386, 251, 719, 253, 254, 256, 255, 0,
	0, 0, 387, 257, 388, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 720, 263, 721, 390,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 722, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 140,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	723, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 142, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 934, 407, 0, 0, 343,
	0, 0, 0, 134, 344, 345, 346, 347, 348, 598,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 126, 0, 349, 0, 0, 0, 0,
	187, 188, 189, 350, 351, 352, 353, 190, 354, 355,
	0, 191, 356, 357, 192, 193, 0, 0, 358, 359,
	360, 0, 194, 361, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 415, 210, 362, 211, 363, 364,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 365, 218, 220, 219, 221,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 368, 369, 370, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 371, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 373, 374, 0, 0, 375, 234,
	0, 231, 0, 0, 232, 376, 233, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 235, 236, 237, 0,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 385,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 386, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 387, 257, 388, 258,
	259, 0, 260, 0, 763, 261, 0, 0, 262, 389,
	0, 263, 0, 390, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 140, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 142, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 934,
	407, 0, 0, 343, 0, 0, 0, 134, 344, 345,
	346, 347, 348, 0, 135, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 757, 0, 1204, 0, 349,
	0, 0, 0, 0, 187, 188, 189, 350, 351, 352,
	353, 190, 354, 355, 0, 191, 356, 357, 192, 193,
	0, 0, 358, 359, 360, 0, 194, 361, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 415, 210,
	362, 211, 363, 364, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 365,
	218, 220, 219, 221, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 368, 369, 370, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 371, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 373, 374,
	0, 0, 375, 234, 0, 231, 0, 0, 232, 376,
	233, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	235, 236, 237, 0, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 385, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	386, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	387, 257, 388, 258, 259, 0, 260, 0, 763, 261,
	0, 0, 262, 389, 0, 263, 0, 390, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 140, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 142, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 934, 407, 0, 0, 343, 0, 0,
	0, 134, 344, 345, 346, 347, 348, 598, 135, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 757,
	0, 1204, 0, 349, 0, 0, 0, 0, 187, 188,
	189, 350, 351, 352, 353, 190, 354, 355, 0, 191,
	356, 357, 192, 193, 0, 0, 358, 359, 360, 0,
	194, 361, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 415, 210, 362, 211, 363, 364, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 365, 218, 220, 219, 221, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 368,
	369, 370, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 371, 0, 372, 0, 0, 227, 228, 0, 0,
	229, 230, 373, 374, 0, 0, 375, 234, 0, 231,
	0, 0, 232, 376, 233, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 235, 236, 237, 0, 383, 384,
	238, 239, 240, 0, 242, 241, 0, 385, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 386, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 387, 257, 388, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 389, 0, 263,
	0, 390, 264, 265, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 140, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	142, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 934, 407, 0,
	0, 343, 0, 0, 0, 134, 344, 345, 346, 347,
	348, 1901, 135, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 126, 0, 349, 0, 0,
	0, 0, 187, 188, 189, 350, 351, 352, 353, 190,
	354, 355, 0, 191, 356, 357, 192, 193, 0, 0,
	358, 359, 360, 0, 194, 361, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 415, 210, 362, 211,
	363, 364, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 365, 218, 220,
	219, 221, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 368, 369, 370, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 371, 0, 372, 0, 0,
	227, 228, 0, 0, 229, 230, 373, 374, 0, 0,
	375, 234, 0, 231, 0, 0, 232, 376, 233, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 235, 236,
	237, 0, 383, 384, 238, 239, 240, 0, 242, 241,
	0, 385, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 386, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 387, 257,
	388, 258, 259, 0, 260, 0, 763, 261, 0, 0,
	262, 389, 0, 263, 0, 390, 264, 265, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 756, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 757, 0, 762,
	0, 349, 0, 0, 0, 0, 187, 188, 189, 350,
	351, 352, 353, 190, 354, 355, 0, 191, 356, 357,
	192, 193, 0, 0, 358, 359, 360, 0, 194, 361,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	415, 210, 362, 211, 363, 364, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 365, 218, 220, 219, 221, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 368, 369, 370,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 371,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	373, 374, 0, 0, 375, 234, 0, 231, 0, 0,
	232, 376, 233, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 235, 236, 237, 0, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 385, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 386, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 387, 257, 388, 258, 259, 0, 260, 0,
	763, 261, 0, 0, 262, 389, 0, 263, 0, 390,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 757, 0, 762, 349, 0, 0, 0, 0, 187,
	188, 189, 350, 351, 352, 353, 190, 354, 355, 0,
	191, 356, 357, 192, 193, 0, 0, 358, 359, 360,
	0, 194, 361, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 415, 210, 362, 211, 363, 364, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 365, 218, 220, 219, 221, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	368, 369, 370, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 371, 0, 372, 0, 0, 227, 228, 0,
	0, 229, 230, 373, 374, 0, 0, 375, 234, 0,
	231, 0, 0, 232, 376, 233, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 235, 236, 237, 0, 383,
	384, 238, 239, 240, 0, 242, 241, 0, 385, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 386, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 387, 257, 388, 258, 259,
	0, 260, 0, 763, 261, 0, 0, 262, 389, 0,
	263, 0, 390, 264, 265, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 757, 0, 762, 349, 0, 0,
	0, 0, 187, 188, 189, 350, 351, 352, 353, 190,
	354, 355, 0, 191, 356, 357, 192, 193, 0, 0,
	358, 359, 360, 0, 194, 361, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 415, 210, 362, 211,
	363, 364, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 365, 218, 220,
	219, 221, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 368, 369, 370, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 371, 0, 372, 0, 0,
	227, 228, 0, 0, 229, 230, 373, 374, 0, 0,
	375, 234, 0, 231, 0, 0, 232, 376, 233, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 235, 236,
	237, 0, 383, 384, 238, 239, 240, 0, 242, 241,
	0, 385, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 386, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 387, 257,
	388, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 389, 0, 263, 0, 390, 264, 265, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 349,
	1237, 0, 0, 0, 187, 188, 189, 350, 351, 352,
	353, 190, 354, 355, 0, 191, 356, 357, 192, 193,
	0, 0, 358, 359, 360, 0, 194, 361, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 415, 210,
	362, 211, 363, 364, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 365,
	218, 220, 219, 221, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 368, 369, 370, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 371, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 373, 374,
	0, 0, 375, 234, 0, 231, 0, 0, 232, 376,
	233, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	235, 236, 237, 0, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 385, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	386, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	387, 257, 388, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 389, 0, 263, 0, 390, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 1714, 349, 0, 0, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 2075, 349, 0, 0, 0, 0,
	187, 188, 189, 350, 351, 352, 353, 190, 354, 355,
	0, 191, 356, 357, 192, 193, 0, 0, 358, 359,
	360, 0, 194, 361, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 415, 210, 362, 211, 363, 364,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 365, 218, 220, 219, 221,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 368, 369, 370, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 371, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 373, 374, 0, 0, 375, 234,
	0, 231, 0, 0, 232, 376, 233, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 235, 236, 237, 0,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 385,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 386, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 387, 257, 388, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	0, 263, 0, 390, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 647, 636, 637, 634, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 1207, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 679, 352, 680,
	190, 681, 682, 0, 191, 356, 357, 192, 193, 0,
	0, 683, 684, 360, 0, 194, 361, 0, 785, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 709, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 685,
	211, 686, 687, 0, 212, 0, 213, 0, 214, 0,
	0, 678, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 643, 710, 0, 0, 0,
	0, 0, 222, 223, 688, 689, 690, 0, 224, 0,
	225, 0, 0, 711, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 713,
	0, 375, 234, 0, 231, 0, 712, 232, 691, 233,
	692, 693, 694, 695, 696, 0, 654, 0, 714, 235,
	236, 237, 715, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 716, 243, 244, 717, 0, 245, 246,
	0, 0, 247, 0, 248, 718, 249, 250, 252, 386,
	251, 719, 253, 254, 256, 255, 0, 0, 644, 387,
	257, 697, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 720, 263, 721, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 698, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 722, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 723, 311, 699,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 700,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 701, 702, 0, 0,
	329, 330, 403, 404, 642, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 703, 0, 501, 343, 181, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 187, 188, 189, 350,
	351, 352, 353, 190, 354, 355, 0, 191, 356, 357,
	192, 193, 0, 0, 358, 359, 360, 0, 194, 361,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	177, 210, 362, 211, 363, 364, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 365, 218, 220, 219, 221, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 368, 369, 370,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 371,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	373, 374, 0, 0, 375, 234, 0, 231, 0, 0,
	232, 376, 233, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 235, 236, 237, 0, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 385, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 386, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 387, 257, 388, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 0, 263, 0, 390,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 176, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 174, 343,
	181, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 349, 0, 180, 0, 0, 187,
	188, 189, 350, 351, 352, 353, 190, 354, 355, 0,
	191, 356, 357, 192, 193, 0, 0, 358, 359, 360,
	0, 194, 361, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 177, 210, 362, 211, 363, 364, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 365, 218, 220, 219, 221, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	368, 369, 370, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 371, 0, 372, 0, 0, 227, 228, 0,
	0, 229, 230, 373, 374, 0, 0, 375, 234, 0,
	231, 0, 0, 232, 376, 233, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 235, 236, 237, 0, 383,
	384, 238, 239, 240, 0, 242, 241, 0, 385, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 386, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 387, 257, 388, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 389, 0,
	263, 0, 390, 264, 265, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 176, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 181, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 349, 0, 0, 0, 180,
	187, 188, 189, 350, 351, 352, 353, 190, 354, 355,
	0, 191, 356, 357, 192, 193, 0, 0, 358, 359,
	360, 0, 194, 361, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 177, 210, 362, 211, 363, 364,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 365, 218, 220, 219, 221,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 368, 369, 370, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 371, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 373, 374, 0, 0, 375, 234,
	0, 231, 0, 0, 232, 376, 233, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 235, 236, 237, 0,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 385,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 386, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 387, 257, 388, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	0, 263, 0, 390, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 176, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 181, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 349, 0, 0, 0,
	180, 187, 188, 189, 350, 351, 352, 353, 190, 354,
	355, 0, 191, 356, 357, 192, 193, 0, 0, 358,
	359, 360, 0, 194, 361, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 415, 210, 362, 211, 363,
	364, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 365, 218, 220, 219,
	221, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 368, 369, 370, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 371, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 373, 374, 0, 0, 375,
	234, 0, 231, 0, 0, 232, 376, 233, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 235, 236, 237,
	0, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	385, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 386, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 387, 257, 388,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	389, 0, 263, 0, 390, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 984, 0, 930, 988, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 0, 194, 361, 0,
	785, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 709, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 710, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 0, 0, 711, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 373,
	374, 713, 0, 375, 234, 0, 231, 0, 712, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	714, 235, 236, 237, 715, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 716, 243, 244, 717, 0,
	245, 246, 0, 0, 247, 0, 248, 718, 249, 250,
	252, 386, 251, 719, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 720, 263, 721, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 722, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 723,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 930, 988, 343, 0,
	0, 986, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 0, 194, 361, 0,
	785, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 709, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 710, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 0, 0, 711, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 373,
	374, 713, 0, 375, 234, 0, 231, 0, 712, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	714, 235, 236, 237, 715, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 716, 243, 244, 717, 0,
	245, 246, 0, 0, 247, 0, 248, 718, 249, 250,
	252, 386, 251, 719, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 720, 263, 721, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 722, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 723,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 930, 988, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 0, 194, 361, 0,
	785, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 709, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 710, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 0, 0, 711, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 373,
	374, 713, 0, 375, 234, 0, 231, 0, 712, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	714, 235, 236, 237, 715, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 716, 243, 244, 717, 0,
	245, 246, 0, 0, 247, 0, 248, 718, 249, 250,
	252, 386, 251, 719, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 720, 263, 721, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 722, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 723,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 930, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 0, 194, 361, 0,
	785, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 709, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 710, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 0, 0, 711, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 373,
	374, 713, 0, 375, 234, 0, 231, 0, 712, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	714, 235, 236, 237, 715, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 716, 243, 244, 717, 0,
	245, 246, 0, 0, 247, 0, 248, 718, 249, 250,
	252, 386, 251, 719, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 720, 263, 721, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 722, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 723,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 181, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 1649, 194, 361, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	1647, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 1691, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 1652, 0, 0, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 373,
	374, 0, 0, 375, 234, 1689, 231, 0, 0, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 235, 236, 237, 0, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 386, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 0, 263, 0, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 1651, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 1690, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 181, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 1649, 194, 361, 0,
	0, 1644, 195, 196, 197, 0, 199, 200, 201, 198,
	1647, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 1652, 0, 0, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 1643,
	374, 0, 0, 375, 234, 0, 231, 0, 0, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 235, 236, 237, 0, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 386, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 0, 263, 0, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 1651, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 1650, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 905, 343, 181,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 187, 188,
	189, 350, 351, 352, 353, 190, 354, 355, 0, 191,
	356, 357, 192, 193, 0, 0, 358, 359, 360, 0,
	194, 361, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 415, 210, 362, 211, 363, 364, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 365, 218, 220, 219, 221, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 368,
	369, 370, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 371, 0, 372, 0, 0, 227, 228, 0, 0,
	229, 230, 373, 374, 0, 0, 375, 234, 0, 231,
	0, 0, 232, 376, 233, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 235, 236, 237, 0, 383, 384,
	238, 239, 240, 0, 242, 241, 0, 385, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 386, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 387, 257, 388, 258, 259, 0,
	260, 0, 763, 261, 0, 0, 262, 389, 0, 263,
	0, 390, 264, 265, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	769, 343, 181, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 187, 188, 189, 350, 351, 352, 353, 190, 354,
	355, 0, 191, 356, 357, 192, 193, 0, 0, 358,
	359, 360, 0, 194, 361, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 415, 210, 362, 211, 363,
	364, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 365, 218, 220, 219,
	221, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 368, 369, 370, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 371, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 771, 374, 0, 0, 375,
	234, 0, 231, 0, 0, 232, 376, 233, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 235, 236, 237,
	0, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	385, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 386, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 387, 257, 388,
	258, 259, 0, 260, 0, 763, 261, 0, 0, 262,
	389, 0, 263, 0, 390, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 765, 343, 181, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 187, 188, 189, 350, 351, 352,
	353, 190, 354, 355, 0, 191, 356, 357, 192, 193,
	0, 0, 358, 359, 360, 0, 194, 361, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 415, 210,
	362, 211, 363, 364, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 365,
	218, 220, 219, 221, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 368, 369, 370, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 371, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 767, 374,
	0, 0, 375, 234, 0, 231, 0, 0, 232, 376,
	233, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	235, 236, 237, 0, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 385, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	386, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	387, 257, 388, 258, 259, 0, 260, 0, 763, 261,
	0, 0, 262, 389, 0, 263, 0, 390, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 432, 343, 181, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 431, 186, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 430, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 181, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 349, 0, 1632, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 181, 2225,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 181, 2225,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 0, 2222, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 181, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 763, 261, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 1395,
	343, 181, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	187, 188, 189, 350, 351, 352, 353, 190, 354, 355,
	0, 191, 356, 357, 192, 193, 0, 0, 358, 359,
	360, 0, 194, 361, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 415, 210, 362, 211, 363, 364,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 365, 218, 220, 219, 221,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 368, 369, 370, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 371, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 373, 374, 0, 0, 375, 234,
	0, 231, 0, 0, 232, 376, 233, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 235, 236, 237, 0,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 385,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 386, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 387, 257, 388, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	0, 263, 0, 390, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 1393, 343, 181, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 1375, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 527, 343, 181, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 187, 188, 189, 350,
	351, 352, 353, 190, 354, 355, 0, 191, 356, 357,
	192, 193, 0, 0, 358, 359, 963, 0, 194, 361,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	415, 210, 362, 211, 363, 364, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 365, 218, 220, 219, 221, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 368, 369, 370,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 371,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	373, 374, 0, 0, 375, 234, 0, 231, 0, 0,
	232, 376, 233, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 235, 236, 237, 0, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 385, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 386, 529, 0, 253, 254, 256, 255, 0,
	0, 0, 387, 257, 388, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 0, 263, 0, 390,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 524, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 1251, 343,
	181, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 187,
	188, 189, 350, 351, 352, 353, 190, 354, 355, 0,
	191, 356, 357, 192, 193, 0, 0, 358, 359, 360,
	0, 194, 361, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 415, 210, 362, 211, 363, 364, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 365, 218, 220, 219, 221, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	368, 369, 370, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 371, 0, 372, 0, 0, 227, 228, 0,
	0, 229, 230, 1250, 374, 0, 0, 375, 234, 0,
	231, 0, 0, 232, 376, 233, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 235, 236, 237, 0, 383,
	384, 238, 239, 240, 0, 242, 241, 0, 385, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 386, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 387, 257, 388, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 389, 0,
	263, 0, 390, 264, 265, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 527, 343, 181, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 187, 188, 189, 350, 351, 352, 353, 190,
	354, 355, 0, 191, 356, 357, 192, 193, 0, 0,
	358, 359, 963, 0, 194, 361, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 415, 210, 362, 211,
	363, 364, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 365, 218, 220,
	219, 221, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 368, 369, 370, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 371, 0, 372, 0, 0,
	227, 228, 0, 0, 229, 230, 373, 374, 0, 0,
	375, 234, 0, 231, 0, 0, 232, 376, 233, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 235, 236,
	237, 0, 383, 384, 238, 239, 240, 0, 242, 241,
	0, 385, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 386, 529,
	0, 253, 254, 256, 255, 0, 0, 0, 387, 257,
	388, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 389, 0, 263, 0, 390, 264, 265, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 524, 401, 402, 0, 0, 329,
	964, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 527, 343, 181, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 0, 518, 361, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 373,
	374, 0, 0, 375, 234, 0, 231, 0, 0, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 235, 236, 237, 0, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 386, 529, 0, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 0, 263, 0, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 947, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 524, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 923, 343, 181,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 187, 188,
	189, 350, 351, 352, 353, 190, 354, 355, 0, 191,
	356, 357, 192, 193, 0, 0, 358, 359, 360, 0,
	194, 361, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 415, 210, 362, 211, 363, 364, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 365, 218, 220, 219, 221, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 368,
	369, 370, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 371, 0, 372, 0, 0, 227, 228, 0, 0,
	229, 230, 922, 374, 0, 0, 375, 234, 0, 231,
	0, 0, 232, 376, 233, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 235, 236, 237, 0, 383, 384,
	238, 239, 240, 0, 242, 241, 0, 385, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 386, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 387, 257, 388, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 389, 0, 263,
	0, 390, 264, 265, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	920, 343, 181, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 187, 188, 189, 350, 351, 352, 353, 190, 354,
	355, 0, 191, 356, 357, 192, 193, 0, 0, 358,
	359, 360, 0, 194, 361, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 415, 210, 362, 211, 363,
	364, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 365, 218, 220, 219,
	221, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 368, 369, 370, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 371, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 919, 374, 0, 0, 375,
	234, 0, 231, 0, 0, 232, 376, 233, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 235, 236, 237,
	0, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	385, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 386, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 387, 257, 388,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	389, 0, 263, 0, 390, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 394, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 307, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 916, 343, 181, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 187, 188, 189, 350, 351, 352,
	353, 190, 354, 355, 0, 191, 356, 357, 192, 193,
	0, 0, 358, 359, 360, 0, 194, 361, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 415, 210,
	362, 211, 363, 364, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 365,
	218, 220, 219, 221, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 368, 369, 370, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 371, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 915, 374,
	0, 0, 375, 234, 0, 231, 0, 0, 232, 376,
	233, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	235, 236, 237, 0, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 385, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	386, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	387, 257, 388, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 389, 0, 263, 0, 390, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 300, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 913, 343, 181, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 912, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 909,
	343, 181, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	187, 188, 189, 350, 351, 352, 353, 190, 354, 355,
	0, 191, 356, 357, 192, 193, 0, 0, 358, 359,
	360, 0, 194, 361, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 415, 210, 362, 211, 363, 364,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 365, 218, 220, 219, 221,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 368, 369, 370, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 371, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 908, 374, 0, 0, 375, 234,
	0, 231, 0, 0, 232, 376, 233, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 235, 236, 237, 0,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 385,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 386, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 387, 257, 388, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	0, 263, 0, 390, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 181, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 184, 185, 897,
	186, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	187, 188, 189, 350, 351, 352, 353, 190, 354, 355,
	0, 191, 356, 357, 192, 193, 0, 0, 358, 359,
	360, 0, 194, 361, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 415, 210, 362, 211, 363, 364,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 365, 218, 220, 219, 221,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 368, 369, 370, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 371, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 373, 374, 0, 0, 375, 234,
	0, 231, 0, 0, 232, 376, 233, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 235, 236, 237, 0,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 385,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 386, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 387, 257, 388, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	0, 263, 0, 390, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 895, 343, 181, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 894, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 891, 343, 181, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 187, 188, 189, 350,
	351, 352, 353, 190, 354, 355, 0, 191, 356, 357,
	192, 193, 0, 0, 358, 359, 360, 0, 194, 361,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	415, 210, 362, 211, 363, 364, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 365, 218, 220, 219, 221, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 368, 369, 370,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 371,
	0, 372, 0, 0, 227, 228, 0, 0, 229, 230,
	373, 374, 0, 0, 375, 234, 0, 231, 0, 0,
	232, 376, 233, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 235, 236, 237, 0, 383, 384, 238, 239,
	240, 0, 242, 241, 0, 385, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 386, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 387, 257, 388, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 389, 0, 263, 0, 390,
	264, 265, 266, 267, 268, 269, 270, 0, 271, 391,
	272, 392, 273, 0, 274, 275, 276, 277, 278, 393,
	279, 280, 0, 281, 282, 283, 284, 285, 0, 287,
	288, 286, 289, 290, 291, 292, 0, 293, 0, 294,
	295, 394, 296, 0, 300, 301, 302, 303, 304, 0,
	306, 395, 305, 307, 308, 0, 309, 297, 298, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 299,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 889, 343,
	181, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 187,
	188, 189, 350, 351, 352, 353, 190, 354, 355, 0,
	191, 356, 357, 192, 193, 0, 0, 358, 359, 360,
	0, 194, 361, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 415, 210, 362, 211, 363, 364, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 365, 218, 220, 219, 221, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	368, 369, 370, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 371, 0, 372, 0, 0, 227, 228, 0,
	0, 229, 230, 373, 374, 0, 0, 375, 234, 0,
	231, 0, 0, 232, 376, 233, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 235, 236, 237, 0, 383,
	384, 238, 239, 240, 0, 242, 241, 0, 385, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 386, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 387, 257, 388, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 389, 0,
	263, 0, 390, 264, 265, 266, 267, 268, 269, 270,
	0, 271, 391, 272, 392, 273, 0, 274, 275, 276,
	277, 278, 393, 279, 280, 0, 281, 282, 283, 284,
	285, 0, 287, 288, 286, 289, 290, 291, 292, 0,
	293, 0, 294, 295, 394, 296, 0, 300, 301, 302,
	303, 304, 0, 306, 395, 305, 307, 308, 0, 309,
	297, 298, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 299, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 885, 343, 181, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 187, 188, 189, 350, 351, 352, 353, 190,
	354, 355, 0, 191, 356, 357, 192, 193, 0, 0,
	358, 359, 360, 0, 194, 361, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 415, 210, 362, 211,
	363, 364, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 365, 218, 220,
	219, 221, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 368, 369, 370, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 371, 0, 372, 0, 0,
	227, 228, 0, 0, 229, 230, 887, 374, 0, 0,
	375, 234, 0, 231, 0, 0, 232, 376, 233, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 235, 236,
	237, 0, 383, 384, 238, 239, 240, 0, 242, 241,
	0, 385, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 386, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 387, 257,
	388, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 389, 0, 263, 0, 390, 264, 265, 266, 267,
	268, 269, 270, 0, 271, 391, 272, 392, 273, 0,
	274, 275, 276, 277, 278, 393, 279, 280, 0, 281,
	282, 283, 284, 285, 0, 287, 288, 286, 289, 290,
	291, 292, 0, 293, 0, 294, 295, 394, 296, 0,
	300, 301, 302, 303, 304, 0, 306, 395, 305, 307,
	308, 0, 309, 297, 298, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 299, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 775, 343, 181, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 187, 188, 189, 350, 351,
	352, 353, 190, 354, 355, 0, 191, 356, 357, 192,
	193, 0, 0, 358, 359, 360, 0, 194, 361, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 415,
	210, 362, 211, 363, 364, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	365, 218, 220, 219, 221, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 368, 369, 370, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 371, 0,
	372, 0, 0, 227, 228, 0, 0, 229, 230, 777,
	374, 0, 0, 375, 234, 0, 231, 0, 0, 232,
	376, 233, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 235, 236, 237, 0, 383, 384, 238, 239, 240,
	0, 242, 241, 0, 385, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 386, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 387, 257, 388, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 389, 0, 263, 0, 390, 264,
	265, 266, 267, 268, 269, 270, 0, 271, 391, 272,
	392, 273, 0, 274, 275, 276, 277, 278, 393, 279,
	280, 0, 281, 282, 283, 284, 285, 0, 287, 288,
	286, 289, 290, 291, 292, 0, 293, 0, 294, 295,
	394, 296, 0, 300, 301, 302, 303, 304, 0, 306,
	395, 305, 307, 308, 0, 309, 297, 298, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 299, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 773, 343, 181,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 187, 188,
	189, 350, 351, 352, 353, 190, 354, 355, 0, 191,
	356, 357, 192, 193, 0, 0, 358, 359, 360, 0,
	194, 361, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 415, 210, 362, 211, 363, 364, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 365, 218, 220, 219, 221, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 368,
	369, 370, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 371, 0, 372, 0, 0, 227, 228, 0, 0,
	229, 230, 373, 374, 0, 0, 375, 234, 0, 231,
	0, 0, 232, 376, 233, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 235, 236, 237, 0, 383, 384,
	238, 239, 240, 0, 242, 241, 0, 385, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 386, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 387, 257, 388, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 389, 0, 263,
	0, 390, 264, 265, 266, 267, 268, 269, 270, 0,
	271, 391, 272, 392, 273, 0, 274, 275, 276, 277,
	278, 393, 279, 280, 0, 281, 282, 283, 284, 285,
	0, 287, 288, 286, 289, 290, 291, 292, 0, 293,
	0, 294, 295, 394, 296, 0, 300, 301, 302, 303,
	304, 0, 306, 395, 305, 307, 308, 0, 309, 297,
	298, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 299, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	527, 343, 181, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 187, 188, 189, 350, 351, 352, 353, 190, 354,
	355, 0, 191, 356, 357, 192, 193, 0, 0, 358,
	359, 360, 0, 518, 361, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 415, 210, 362, 211, 363,
	364, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 365, 218, 220, 219,
	221, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 368, 369, 370, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 371, 0, 372, 0, 0, 227,
	228, 0, 0, 229, 230, 373, 374, 0, 0, 375,
	234, 0, 231, 0, 0, 232, 376, 233, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 235, 236, 237,
	0, 383, 384, 238, 239, 240, 0, 242, 241, 0,
	385, 0, 243, 244, 0, 0, 245, 517, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 386, 529, 0,
	253, 254, 256, 255, 0, 0, 0, 387, 257, 388,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	389, 0, 263, 0, 390, 264, 265, 266, 267, 268,
	269, 270, 0, 271, 391, 272, 392, 273, 0, 274,
	275, 276, 277, 278, 393, 279, 280, 0, 281, 282,
	283, 284, 285, 0, 287, 288, 286, 289, 290, 291,
	292, 0, 293, 0, 294, 295, 519, 296, 0, 300,
	301, 302, 303, 304, 0, 306, 395, 305, 520, 308,
	0, 309, 297, 298, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 299, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 524, 401, 402, 0, 0, 329, 522,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 509, 343, 181, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 187, 188, 189, 350, 351, 352,
	353, 190, 354, 355, 0, 191, 356, 357, 192, 193,
	0, 0, 358, 359, 360, 0, 194, 361, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 415, 210,
	362, 211, 363, 364, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 365,
	218, 220, 219, 221, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 368, 369, 370, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 371, 0, 372,
	0, 0, 227, 228, 0, 0, 229, 230, 373, 374,
	0, 0, 375, 234, 0, 231, 0, 0, 232, 376,
	233, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	235, 236, 237, 0, 383, 384, 238, 239, 240, 0,
	242, 241, 0, 385, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	386, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	387, 257, 388, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 389, 0, 263, 0, 390, 264, 265,
	266, 267, 268, 269, 270, 0, 271, 391, 272, 392,
	273, 0, 274, 275, 276, 277, 278, 393, 279, 280,
	0, 281, 282, 283, 284, 285, 0, 287, 288, 286,
	289, 290, 291, 292, 0, 293, 0, 294, 295, 394,
	296, 0, 510, 301, 302, 303, 304, 0, 306, 395,
	305, 307, 308, 0, 309, 297, 298, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 299, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 507, 343, 181, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 187, 188, 189,
	350, 351, 352, 353, 190, 354, 355, 0, 191, 356,
	357, 192, 193, 0, 0, 358, 359, 360, 0, 194,
	361, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 415, 210, 362, 211, 363, 364, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 365, 218, 220, 219, 221, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 368, 369,
	370, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	371, 0, 372, 0, 0, 227, 228, 0, 0, 229,
	230, 373, 374, 0, 0, 375, 234, 0, 231, 0,
	0, 232, 376, 233, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 235, 236, 237, 0, 383, 384, 238,
	239, 240, 0, 242, 241, 0, 385, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 386, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 387, 257, 388, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 389, 0, 263, 0,
	390, 264, 265, 266, 267, 268, 269, 270, 0, 271,
	391, 272, 392, 273, 0, 274, 275, 276, 277, 278,
	393, 279, 280, 0, 281, 282, 283, 284, 285, 0,
	287, 288, 286, 289, 290, 291, 292, 0, 293, 0,
	294, 295, 394, 296, 0, 300, 301, 302, 303, 304,
	0, 306, 395, 305, 307, 308, 0, 309, 297, 298,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	299, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 499,
	343, 181, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	187, 188, 189, 350, 351, 352, 353, 190, 354, 355,
	0, 191, 356, 357, 192, 193, 0, 0, 358, 359,
	360, 0, 194, 361, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 415, 210, 362, 211, 363, 364,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 365, 218, 220, 219, 221,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 368, 369, 370, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 371, 0, 372, 0, 0, 227, 228,
	0, 0, 229, 230, 373, 374, 0, 0, 375, 234,
	0, 231, 0, 0, 232, 376, 233, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 235, 236, 237, 0,
	383, 384, 238, 239, 240, 0, 242, 241, 0, 385,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 386, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 387, 257, 388, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 389,
	0, 263, 0, 390, 264, 265, 266, 267, 268, 269,
	270, 0, 271, 391, 272, 392, 273, 0, 274, 275,
	276, 277, 278, 393, 279, 280, 0, 281, 282, 283,
	284, 285, 0, 287, 288, 286, 289, 290, 291, 292,
	0, 293, 0, 294, 295, 394, 296, 0, 300, 301,
	302, 303, 304, 0, 306, 395, 305, 307, 308, 0,
	309, 297, 298, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 299, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 455, 343, 181, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 1949, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 1947, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 1936, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 510, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	1261, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 0, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 266,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 277, 278, 393, 739, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 296,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 181, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 187, 188, 189, 350, 351, 352, 353,
	190, 354, 355, 0, 191, 356, 357, 192, 193, 0,
	0, 358, 359, 360, 0, 194, 361, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 415, 210, 362,
	211, 363, 364, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 365, 218,
	220, 219, 221, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 368, 369, 370, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 371, 0, 372, 0,
	0, 227, 228, 0, 0, 229, 230, 373, 374, 0,
	0, 375, 234, 0, 231, 0, 0, 232, 376, 233,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 235,
	236, 237, 0, 383, 384, 238, 239, 240, 0, 242,
	241, 0, 385, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 386,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 387,
	257, 388, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 389, 0, 263, 0, 390, 264, 265, 0,
	267, 268, 269, 270, 0, 271, 391, 272, 392, 273,
	0, 274, 275, 276, 0, 278, 393, 279, 280, 0,
	281, 282, 283, 284, 285, 0, 287, 288, 286, 289,
	290, 291, 292, 0, 293, 0, 294, 295, 394, 0,
	0, 300, 301, 302, 303, 304, 0, 306, 395, 305,
	307, 308, 0, 309, 297, 298, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 299, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 1058, 1059, 0, 1088,
	1089, 1090, 1098, 1099, 1100, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099, 1100,
	0, 0, 0, 1060, 0, 0, 0, 1091, 0, 1080,
	0, 0, 0, 0, 1061, 0, 1077, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1084, 1085, 1086, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 1103, 0, 0, 1083,
	1084, 1085, 1086, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1101, 0, 0, 1058, 1059, 0,
	1088, 1089, 1090, 1098, 1099, 1100, 0, 0, 0, 0,
	1095, 1103, 1093, 1091, 0, 0, 0, 0, 0, 1081,
	1061, 0, 0, 1102, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 1092, 0, 1093, 0, 0,
	1080, 0, 0, 0, 1081, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1084, 1085, 1086, 0,
	0, 0, 0, 1096, 1066, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1095, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 0, 0, 0, 0,
	1081, 0, 1094, 0, 0, 1072, 1073, 1079, 1078, 1074,
	1075, 1076, 1097, 0, 1071, 1069, 1070, 1062, 1063, 1064,
	1065, 1067, 1068, 0, 0, 0, 1092, 0, 0, 0,
	0, 1884, 0, 0, 0, 0, 0, 1094, 0, 0,
	1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0, 1071,
	1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 0, 0,
	0, 0, 1087, 0, 0, 0, 1883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 1058,
	1059, 0, 1088, 1089, 1090, 1098, 1099, 1100, 0, 0,
	0, 0, 0, 0, 1096, 1091, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 1072, 1073, 1079, 1078,
	1074, 1075, 1076, 1097, 0, 1071, 1069, 1070, 1062, 1063,
	1064, 1065, 1067, 1068, 0, 0, 0, 1083, 1084, 1085,
	1086, 0, 1835, 0, 0, 0, 1066, 0, 0, 0,
	0, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099, 1100,
	0, 0, 0, 0, 0, 0, 0, 1091, 1095, 1103,
	0, 0, 0, 0, 1061, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 1080, 1093, 0, 0, 0, 0,
	0, 1077, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	1084, 1085, 1086, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1095, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 1101,
	1058, 1059, 0, 1088, 1089, 1090, 1098, 1099, 1100, 0,
	0, 0, 0, 0, 0, 0, 1091, 1093, 0, 0,
	0, 0, 0, 1061, 1081, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1092, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 1094, 0, 0, 1072, 1073,
	1079, 1078, 1074, 1075, 1076, 1097, 0, 1071, 1069, 1070,
	1062, 1063, 1064, 1065, 1067, 1068, 1087, 0, 0, 0,
	2507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 1083, 1084,
	1085, 1086, 0, 0, 0, 0, 0, 1066, 1096, 0,
	0, 0, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099,
	1100, 0, 0, 0, 0, 0, 0, 0, 1091, 1095,
	1103, 0, 0, 0, 0, 1061, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 1080, 1093, 0, 0, 0,
	0, 0, 1077, 1081, 0, 0, 0, 1094, 0, 0,
	1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0, 1071,
	1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 0, 1092,
	0, 0, 2457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 1084, 1085, 1086, 0, 0, 0, 0, 0, 1066,
	0, 0, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1095, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	1101, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099, 1100,
	0, 0, 0, 0, 0, 0, 0, 1091, 1093, 0,
	0, 0, 0, 0, 1061, 1081, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 1092, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 1077, 0, 0, 0, 0, 1094, 0, 0, 1072,
	1073, 1079, 1078, 1074, 1075, 1076, 1097, 0, 1071, 1069,
	1070, 1062, 1063, 1064, 1065, 1067, 1068, 1087, 0, 0,
	0, 2409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 1083,
	1084, 1085, 1086, 0, 0, 0, 0, 0, 1066, 1096,
	0, 0, 0, 1058, 1059, 0, 1088, 1089, 1090, 1098,
	1099, 1100, 0, 0, 0, 0, 0, 0, 0, 1091,
	1095, 1103, 0, 0, 0, 0, 1061, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 1080, 1093, 0, 0,
	0, 0, 0, 1077, 1081, 0, 0, 0, 1094, 0,
	0, 1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0,
	1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 0,
	1092, 0, 0, 2379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1084, 1085, 1086, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 1095, 1103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 1101, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099,
	1100, 0, 0, 0, 0, 0, 0, 0, 1091, 1093,
	0, 0, 0, 0, 0, 1061, 1081, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 1092, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 1077, 0, 0, 0, 0, 1094, 0, 0,
	1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0, 1071,
	1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 1087, 0,
	0, 0, 2374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	1083, 1084, 1085, 1086, 0, 0, 0, 0, 0, 1066,
	1096, 0, 0, 0, 1058, 1059, 0, 1088, 1089, 1090,
	1098, 1099, 1100, 0, 0, 0, 0, 0, 0, 0,
	1091, 1095, 1103, 0, 0, 0, 0, 1061, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 1080, 1093, 0,
	0, 0, 0, 0, 1077, 1081, 0, 0, 0, 1094,
	0, 0, 1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097,
	0, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068,
	0, 1092, 0, 0, 2370, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 1084, 1085, 1086, 0, 0, 0, 0,
	0, 1066, 0, 0, 0, 0, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1095, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 1101, 1058, 1059, 0, 1088, 1089, 1090, 1098,
	1099, 1100, 0, 0, 0, 0, 0, 0, 0, 1091,
	1093, 0, 0, 0, 0, 0, 1061, 1081, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 1092, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 1094, 0,
	0, 1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0,
	1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 1087,
	0, 0, 0, 2305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 0,
	0, 1083, 1084, 1085, 1086, 0, 0, 0, 0, 0,
	1066, 1096, 0, 0, 0, 1058, 1059, 0, 1088, 1089,
	1090, 1098, 1099, 1100, 0, 0, 0, 0, 0, 0,
	0, 1091, 1095, 1103, 0, 0, 0, 0, 1061, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 1080, 1093,
	0, 0, 0, 0, 0, 1077, 1081, 0, 0, 0,
	1094, 0, 0, 1072, 1073, 1079, 1078, 1074, 1075, 1076,
	1097, 0, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067,
	1068, 0, 1092, 0, 0, 2271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 1084, 1085, 1086, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 1095, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 1101, 1058, 1059, 0, 1088, 1089, 1090,
	1098, 1099, 1100, 0, 0, 0, 0, 0, 0, 0,
	1091, 1093, 0, 0, 0, 0, 0, 1061, 1081, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 1092, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 1094,
	0, 0, 1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097,
	0, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068,
	1087, 0, 0, 0, 2270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 1083, 1084, 1085, 1086, 0, 0, 0, 0,
	0, 1066, 1096, 0, 0, 0, 1058, 1059, 0, 1088,
	1089, 1090, 1098, 1099, 1100, 0, 0, 0, 0, 0,
	0, 0, 1091, 1095, 1103, 0, 0, 0, 0, 1061,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 1080,
	1093, 0, 0, 0, 0, 0, 1077, 1081, 0, 0,
	0, 1094, 0, 0, 1072, 1073, 1079, 1078, 1074, 1075,
	1076, 1097, 0, 1071, 1069, 1070, 1062, 1063, 1064, 1065,
	1067, 1068, 0, 1092, 0, 0, 2235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1084, 1085, 1086, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1095, 1103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 1101, 1058, 1059, 0, 1088, 1089,
	1090, 1098, 1099, 1100, 0, 0, 0, 0, 0, 0,
	0, 1091, 1093, 0, 0, 0, 0, 0, 1061, 1081,
	0, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 1092, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	1094, 0, 0, 1072, 1073, 1079, 1078, 1074, 1075, 1076,
	1097, 0, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067,
	1068, 1087, 0, 0, 0, 2078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 1083, 1084, 1085, 1086, 0, 0, 0,
	0, 0, 1066, 1096, 0, 0, 0, 1058, 1059, 0,
	1088, 1089, 1090, 1098, 1099, 1100, 0, 0, 0, 0,
	0, 0, 0, 1091, 1095, 1103, 0, 0, 0, 0,
	1061, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	1080, 1093, 0, 0, 0, 0, 0, 1077, 1081, 0,
	0, 0, 1094, 0, 0, 1072, 1073, 1079, 1078, 1074,
	1075, 1076, 1097, 0, 1071, 1069, 1070, 1062, 1063, 1064,
	1065, 1067, 1068, 0, 1092, 0, 0, 2054, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1084, 1085, 1086, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1095, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 0, 0, 1101, 0, 0, 1058, 1059,
	0, 1088, 1089, 1090, 1098, 1099, 1100, 0, 0, 0,
	0, 0, 0, 1093, 1091, 0, 0, 0, 0, 0,
	1081, 1061, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 1059, 0, 1088,
	1089, 1090, 1098, 1099, 1100, 1060, 1092, 0, 0, 0,
	0, 1080, 1091, 0, 0, 0, 0, 0, 1077, 1061,
	0, 1094, 1102, 0, 1072, 1073, 1079, 1078, 1074, 1075,
	1076, 1097, 0, 1071, 1069, 1070, 1062, 1063, 1064, 1065,
	1067, 1068, 1087, 1060, 0, 0, 1511, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 1077, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 1084, 1085, 1086,
	0, 0, 0, 0, 1096, 1066, 2570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1095, 1103, 0,
	0, 0, 0, 0, 1083, 1084, 1085, 1086, 0, 0,
	0, 0, 0, 1066, 0, 1875, 1101, 0, 1874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 1095, 1103, 0, 0, 0,
	0, 1081, 0, 1094, 0, 0, 1072, 1073, 1079, 1078,
	1074, 1075, 1076, 1097, 1101, 1071, 1069, 1070, 1062, 1063,
	1064, 1065, 1067, 1068, 0, 0, 1805, 1092, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 2569, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 0, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 1058,
	1059, 0, 1088, 1089, 1090, 1098, 1099, 1100, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 0,
	1778, 0, 1061, 0, 1094, 1102, 0, 1072, 1073, 1079,
	1078, 1074, 1075, 1076, 1097, 0, 1071, 1069, 1070, 1062,
	1063, 1064, 1065, 1067, 1068, 0, 1060, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 1077,
	0, 0, 1094, 0, 0, 1072, 1073, 1079, 1078, 1074,
	1075, 1076, 1097, 0, 1071, 1069, 1070, 1062, 1063, 1064,
	1065, 1067, 1068, 0, 0, 0, 1779, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 1084, 1085,
	1086, 0, 0, 0, 0, 1608, 1066, 0, 0, 0,
	0, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099, 1100,
	0, 0, 0, 0, 0, 0, 0, 1091, 1095, 1103,
	0, 1607, 0, 0, 1061, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 1080, 1093, 0, 0, 0, 0,
	0, 1077, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	1084, 1085, 1086, 0, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1095, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1194, 1096, 0, 0, 1101,
	1058, 1059, 0, 1088, 1089, 1090, 1098, 1099, 1100, 0,
	0, 40, 0, 0, 0, 0, 1091, 1093, 0, 0,
	0, 0, 41, 1061, 1081, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1092, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	1077, 51, 0, 0, 0, 1094, 0, 0, 1072, 1073,
	1079, 1078, 1074, 1075, 1076, 1097, 0, 1071, 1069, 1070,
	1062, 1063, 1064, 1065, 1067, 1068, 1087, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 63, 0, 481,
	64, 1082, 0, 0, 0, 0, 0, 0, 1083, 1084,
	1085, 1086, 0, 0, 0, 0, 0, 1066, 1096, 0,
	0, 0, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099,
	1100, 0, 0, 66, 0, 0, 0, 0, 1091, 1095,
	1103, 0, 0, 0, 0, 1061, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 1080, 1093, 0, 0, 0,
	0, 0, 1077, 1081, 0, 0, 0, 1094, 0, 0,
	1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0, 1071,
	1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 0, 1092,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 1084, 1085, 1086, 0, 0, 0, 0, 0, 1066,
	0, 0, 0, 0, 0, 1087, 0, 127, 69, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1095, 1103, 0, 140, 0, 0, 0, 0, 0,
	0, 480, 0, 0, 103, 0, 0, 1096, 0, 0,
	1101, 1058, 1059, 0, 1088, 1089, 1090, 1098, 1099, 1100,
	0, 0, 0, 142, 0, 0, 0, 1091, 1093, 0,
	0, 0, 0, 0, 1061, 1081, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	141, 1092, 0, 0, 1080, 0, 0, 0, 134, 0,
	0, 1077, 0, 0, 0, 135, 1094, 0, 0, 1072,
	1073, 1079, 1078, 1074, 1075, 1076, 1097, 0, 1071, 1069,
	1070, 1062, 1063, 1064, 1065, 1067, 1068, 1087, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 1083,
	1084, 1085, 1086, 0, 0, 0, 0, 0, 1066, 1096,
	0, 0, 0, 1881, 0, 0, 0, 1058, 1059, 0,
	1088, 1089, 1090, 1098, 1099, 1100, 0, 0, 0, 0,
	1095, 1103, 0, 1091, 0, 0, 2058, 1876, 0, 0,
	1061, 0, 0, 1102, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 1093, 0, 0,
	1080, 0, 0, 0, 1081, 0, 0, 1077, 1094, 0,
	0, 1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0,
	1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 0,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1084, 1085, 1086, 0,
	0, 0, 0, 0, 1066, 0, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1095, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 1101, 1058, 1059, 0, 1088,
	1089, 1090, 1098, 1099, 1100, 0, 0, 0, 0, 0,
	0, 0, 1091, 1093, 0, 0, 0, 0, 0, 1061,
	1081, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 1092, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 1077, 1094, 0, 0,
	1072, 1073, 1079, 1078, 1074, 1075, 1076, 1097, 0, 1071,
	1069, 1070, 1062, 1063, 1064, 1065, 1067, 1068, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 1083, 1084, 1085, 1086, 0, 0,
	0, 0, 0, 1066, 1096, 0, 0, 0, 1058, 1059,
	0, 1088, 1089, 1090, 1098, 1099, 1100, 0, 0, 0,
	0, 0, 0, 0, 1091, 1095, 1103, 0, 1834, 0,
	0, 1061, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 1080, 1093, 0, 0, 0, 0, 0, 1077, 1081,
	0, 0, 0, 1094, 0, 0, 1072, 1073, 1079, 1078,
	1074, 1075, 1076, 1097, 0, 1071, 1069, 1070, 1062, 1063,
	1064, 1065, 1067, 1068, 0, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1841, 0, 0, 0, 0, 0, 1083, 1084, 1085, 1086,
	0, 0, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1095, 1103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 1101, 1058, 1059, 0,
	1088, 1089, 1090, 1098, 1099, 1100, 0, 0, 0, 0,
	0, 0, 0, 1091, 1093, 0, 0, 0, 0, 0,
	1061, 1081, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 1092, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 1094, 0, 0, 1072, 1073, 1079, 1078, 1074,
	1075, 1076, 1097, 0, 1071, 1069, 1070, 1062, 1063, 1064,
	1065, 1067, 1068, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 1083, 1084, 1085, 1086, 0,
	0, 0, 0, 0, 1066, 1096, 0, 0, 0, 1058,
	1059, 0, 1088, 1089, 1090, 1098, 1099, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 1103, 0, 0,
	0, 0, 1061, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 1080, 1093, 0, 0, 0, 0, 0, 1077,
	1081, 0, 0, 0, 1094, 0, 0, 1072, 1073, 1079,
	1078, 1074, 1075, 1076, 1097, 0, 1071, 1069, 1070, 1062,
	1063, 1064, 1065, 1067, 1068, 0, 1092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 1084, 1085,
	1086, 0, 0, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 1095, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 1093, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 41, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 1094, 51, 0, 1072, 1073, 1079, 1078,
	1074, 1075, 1076, 1097, 0, 1071, 1069, 1070, 1062, 1063,
	1064, 1065, 1067, 1068, 1087, 54, 0, 0, 0, 56,
	0, 0, 0, 62, 0, 0, 132, 0, 0, 1082,
	63, 0, 122, 64, 1058, 1059, 0, 1088, 1089, 1090,
	1098, 1099, 1100, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 1061, 0, 0,
	1102, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 1072, 1073,
	1079, 1078, 1074, 1075, 1076, 1097, 0, 1071, 1069, 1070,
	1062, 1063, 1064, 1065, 1067, 1068, 0, 0, 0, 0,
	0, 0, 1083, 1084, 1085, 1086, 0, 0, 0, 0,
	0, 1066, 67, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 1103, 0, 0, 0, 0, 75,
	127, 69, 0, 70, 0, 71, 0, 133, 0, 0,
	0, 0, 72, 0, 0, 0, 1306, 140, 0, 0,
	0, 0, 0, 0, 83, 0, 0, 103, 0, 0,
	1093, 0, 0, 0, 0, 0, 130, 1081, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 1314,
	1303, 1333, 1292, 1324, 1323, 0, 0, 1294, 1293, 0,
	0, 0, 0, 1335, 1334, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 135, 1087,
	0, 1329, 0, 1321, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 1082, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 4, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 1318, 1316, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1302, 0, 0, 0, 0, 0, 0,
	1307, 1305, 1308, 1309, 1310, 1311, 1312, 0, 1332, 0,
	0, 0, 0, 0, 0, 1296, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 1072, 1073, 1079, 1078, 1074, 1075, 1076,
	1097, 1298, 1071, 1069, 1070, 1062, 1063, 1064, 1065, 1067,
	1068, 0, 0, 1322, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 1436, 1434, 1435, 1438, 1437, 0, 0, 0,
	0, 1314, 1303, 1333, 1292, 1324, 1323, 0, 0, 1294,
	1293, 0, 0, 0, 0, 1335, 1334, 0, 0, 0,
	1299, 0, 0, 0, 0, 548, 0, 574, 0, 0,
	0, 1313, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 553, 0, 0, 0, 0,
	0, 0, 0, 1329, 1297, 1321, 1320, 551, 1330, 1331,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	1301, 0, 0, 554, 0, 1336, 0, 0, 1318, 1316,
	1317, 560, 561, 0, 0, 0, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 555, 0, 0, 0, 1302, 0, 0, 0, 0,
	0, 0, 1307, 1305, 1308, 1309, 1310, 1311, 1312, 0,
	1332, 0, 0, 573, 0, 0, 0, 1296, 1295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 0,
	0, 0, 0, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 557, 558, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 0, 0, 0, 0, 559,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 0, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	1330, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 550, 567, 577, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 572, 0, 0, 0, 0, 578, 0,
	0, 0, 0, 565, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
}
var sqlPact = [...]int{

	43241, -1000, -13, -1000, -1000, -1000, 156, -1000, -1000, -1000,
	-1000, 155, 152, 149, -1000, 147, 145, 144, 142, 141,
	140, 139, 137, 136, 135, 132, -1000, 126, -1000, -1000,
	-1000, -1000, 125, 124, 121, 118, 116, 115, 113, -1000,
	1123, 22356, 111, 106, 1268, -1000, 36390, 100, 94, 93,
	92, 1193, 91, 89, 26464, 891, 1447, 86, 85, 84,
	83, 74, 949, 36050, 3987, 1454, 1075, 1590, 35707, 22013,
	1583, 1420, 35364, -1000, -1000, 35021, 66, 65, 64, 63,
	62, -1000, -1000, 34678, 61, 60, 55, 53, 52, 51,
	47, 46, 44, 39, 37, 35, 33, 32, -1000, 31,
	26, 25, -1000, 43793, 22, 21, 19, 1073, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 849, 123, -1000, 952, 401, 2670, 8216, 1020,
	996, 990, 982, 981, 38430, 36390, 15, -116, 14, -1000,
	1979, 626, 19553, 43241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26121, 25778,
	34335, 33992, 6445, 736, -1000, -17, 23038, 36390, -1000, 76,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14951, 14596, 570, 76, -1000, -1000, -1000, -1000, -1000,
	33649, -1000, 33306, 32963, 1456, 32620, -1000, -1000, -1000, -1000,
	32277, -1000, -1000, 1828, 1601, 1596, 25435, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31937,
	31594, 31251, 30908, 30565, 477, -1000, -1000, -1000, 17783, -1000,
	-1000, -1000, -1000, 13, -1000, 12, -1000, 10, 8, 6,
	4, -1000, 3, 2, -1000, 0, -1, -1000, -6, -8,
	30222, 834, 1229, -1000, -1000, -15, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36390, -1000, 15659, -1000, 468, -1000,
	1600, -1000, 15659, -1000, 1221, -1000, -1000, -1000, -1000, -1000,
	36390, -1000, -1000, -1000, -1000, -1000, -1000, 2137, 1136, 467,
	29879, -1000, 1424, -1000, 576, 772, -1000, -1000, -1000, 9278,
	159, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1353, 23392, 1337, 1968, 1790, 2136, 1413, 1782, 1781, 1716,
	1696, 1681, 2135, 985, 2134, 1808, 984, 2133, 1657, 1183,
	659, 2086, 1595, 1591, -1000, -1000, -1000, -1000, 908, -1000,
	-1000, -1000, 27824, -1000, -1000, 771, 904, 952, -1000, -1000,
	-1000, 1296, 1927, 1927, 1927, 2005, 278, 266, -1000, 123,
	-1000, 1101, -1000, 1134, -1000, -1000, -1000, -1000, -1000, 42957,
	-1000, -1000, 15659, 15659, 15659, 15659, 15659, 1120, 499, -1000,
	466, 458, 7507, -1000, -1000, 2117, -1000, -1000, -1000, 311,
	-1000, -1000, 15659, 76, -1000, -1000, -1000, -1000, 457, 2129,
	-1000, 644, -1000, -1000, -1000, 581, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1617, 455, 454, 453, -1000,
	452, -1000, -1000, 450, 448, 447, 446, 443, 441, 440,
	439, 438, 437, 432, 431, 429, 428, 427, 1001, -1000,
	613, -1000, -1000, 613, 613, -1000, 412, 412, 413, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 412, -1000, -1000,
	-1000, 543, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 424, 1191, -1000, -1000, 1191, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 733, 37750, -19, 36390,
	-1000, 423, -19, -1000, -1000, 420, -1000, 10694, 10694, -1000,
	-1000, -1000, -1000, -1000, 9986, 1643, -1000, 42108, -187, 296,
	552, -1000, 18491, 21317, -1000, -1000, 1009, 1737, 781, -1000,
	930, 1730, 510, -1000, 1098, -1000, 857, 1727, -132, 1640,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 23732, 23038, -17,
	-42, -1000, -1000, -1000, 6091, 42957, -1000, 42957, -1000, 821,
	20259, 76, -1000, -1000, -1000, -1000, 418, 1326, 585, -1000,
	317, -1000, 29536, 585, 1318, -1000, -1000, -1000, 27824, -1000,
	36390, -1000, 36390, -1000, 858, -1000, 38090, 127, 1725, -1000,
	-1000, 127, 1724, -1000, 117, 1708, -1000, -1000, 1185, 1701,
	-1000, -42, 1693, -1000, -1000, 15659, -29, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 626, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 29193, 22697, 1471,
	522, 42957, 2053, 43734, 23732, 42957, 22697, -1000, -1000, 36390,
	-1000, 15659, -1000, 2052, 1356, -20, -1000, -1000, -1000, -1000,
	-1000, 1350, 1390, 725, 1328, 9278, 9278, 1879, -1000, 128,
	6445, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28850,
	-1000, -1000, -1000, 1129, 36390, -1000, -1000, 1615, -1000, 22697,
	36390, -1000, 36390, -1000, 36390, -1000, 36390, -1000, 36390, -1000,
	-1000, -1000, -1000, -1000, 3431, -1000, 1613, -1000, -1000, 36390,
	-1000, 1349, -1000, -1000, -1000, 28510, 28167, -1000, 916, 761,
	-1000, -1000, 131, -1000, 36390, 1949, 575, -1000, 1296, 1333,
	1608, 642, 1233, 1419, 14241, 1429, 15659, 123, -1000, -1000,
	123, 123, 8924, -1000, -1000, -1000, 36390, -1000, 43512, 43734,
	6445, 745, 15659, 15659, 15659, 15659, 15659, 15659, 15659, 15659,
	15659, 15659, 15659, 15659, 15659, 15659, 15659, 15659, 15659, 15659,
	15659, 15659, 15659, 15659, 15659, 15659, 15659, 15659, 15659, 15659,
	15659, 15659, 15659, 15659, 1359, 15659, 732, 15659, 15659, 15659,
	15659, 1873, 1065, 411, 1112, -1000, 2083, 2083, 2083, 43079,
	43079, 376, 499, -1000, 15659, -1000, 75, 15659, 266, 41225,
	-18, 7153, -1000, -1000, -1000, 13887, 607, 42957, 76, 4967,
	-1000, 2116, 816, 1626, 1505, 417, 546, 544, 540, 504,
	15659, 15659, 13533, 13178, 12823, 16367, 12468, 15659, 7861, 15659,
	15659, 15659, 15659, 12113, 11758, -1000, 416, -1000, -1000, -1000,
	-1000, 2114, -1000, -1000, 2113, -1000, 743, 741, 2112, -1000,
	-20, -1000, 37750, -1000, 36390, -19, 2047, 36390, -1000, 97,
	-1000, 41951, -1000, 97, -35, -1000, 1418, 1412, 19906, 1324,
	1124, 1124, 1124, -1000, 415, 497, 552, 5364, 11403, -1000,
	26804, 1130, 183, 265, 18137, 1643, -1000, 36390, -53, 975,
	-1000, 25092, 1924, 1905, 1922, 27824, 2020, 75, 1944, 1589,
	728, 27824, 1942, 727, 2019, 75, 1584, 726, 36390, 6445,
	1938, 539, -1000, 36390, -1000, -1000, -1000, 1581, -41, -1000,
	-1000, 24752, 2045, 1690, -1000, 1047, -1000, 2042, 36390, 1219,
	1312, -1000, -1000, 757, 1671, 599, 221, 2037, 221, 20611,
	-1000, 36390, -1000, 36390, -1000, -1000, 36390, -1000, 36390, -1000,
	36390, 36390, -1000, 36390, 36390, -43, 42957, 3329, 24412, 724,
	-1000, 633, 24752, 660, -51, -1000, 842, -1000, -1000, -1000,
	-1000, 291, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 413, 1001,
	412, 412, 412, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	543, -1000, -1000, 613, 613, 613, -1000, -1000, -37, -1000,
	1580, 568, -52, 658, -20, -1000, 1191, -1000, 883, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2126, -1000, 2088, -1000, -1000, 2111, -22, -1000,
	-22, -1000, 6445, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36390, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 713,
	-1000, -1000, -1000, -1000, -1000, -1000, 36390, 36390, 36390, -1000,
	27824, 587, 1609, -1000, 1950, 1333, 1608, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42957, -1000, 394, -1000, -1000,
	42957, 967, 1458, -1000, 1458, -27, -1000, 41829, 1403, 36390,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 573, 1444, 1444, 803, 803, 803, 803, 2017, 214,
	480, 312, 343, 343, 343, 343, 343, 343, 343, 343,
	247, 1099, 1099, 247, 247, 247, 247, 247, 343, 343,
	343, 43079, 292, 3833, 15659, 15659, 723, 1062, 411, 3833,
	15659, 3833, 3833, 3833, 3833, -1000, 1481, -1000, -1000, -1000,
	-1000, 1575, 408, 16367, 16367, -1000, -1000, -1000, 7507, 16721,
	-1000, -1000, -1000, -1000, 407, 15659, -1000, 41347, -227, 262,
	-108, -1000, 15659, 488, -126, -1000, 850, -1000, 15659, -1000,
	-38, 15659, 15659, 15659, 261, -1000, 260, -1000, 720, -1000,
	715, 711, 701, -1000, 405, 1126, 404, 403, 15659, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42798, 39277, 248,
	-1000, 1563, -108, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	246, -1000, 245, -1000, 42676, -108, 244, 712, -1000, 16367,
	16367, 16367, 7507, 402, 233, -1000, 41546, -1000, 42517, 11048,
	11048, 11048, 231, 42391, 15659, -108, 39151, 39116, 4528, -54,
	-68, -1000, -69, -1000, 2109, -70, 230, 563, 562, 229,
	-1000, -1000, 400, -86, 599, 10694, 19199, 6445, -1000, 599,
	9986, -1000, 19906, 19906, 2079, 1411, 19906, -1000, -1000, -1000,
	-1000, 26804, 493, 552, 26804, -1000, 2108, 1335, 228, -1000,
	-1000, -1000, 36390, 399, -1000, 552, 227, 945, 36390, 36390,
	36390, -1000, -1000, 1300, 37410, 1298, 43734, 36390, -1000, 398,
	397, 1401, 1399, 36390, 36390, 37070, 36730, 36390, 1002, 75,
	-1000, 561, 392, 36390, 921, 560, 36390, 75, -1000, 390,
	36390, 911, -1000, 557, 1490, 1236, -1000, 818, 1559, 36390,
	225, -88, -28, 43734, -1000, -1000, -1000, -1000, -1000, 36390,
	449, 36390, 75, 36390, 2124, 75, 36390, 1667, 1720, 523,
	36390, 1419, 15659, 948, -1000, 18845, 621, 36390, 906, 88,
	-1000, -1000, -1000, 535, 36390, -1000, -1000, 127, 127, -1000,
	117, 1185, -42, -1000, 15659, -1000, -1000, 36390, 23732, -89,
	-1000, -1000, 43734, -1000, 494, 689, -1000, 2106, 584, 23732,
	36390, 9278, 9278, -1000, 1430, -1000, -1000, 929, -1000, 983,
	-1000, -1000, -1000, -1000, 9278, -1000, -65, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1153, 1056, -1000, -1000, -1000, 967,
	-1000, 15659, 2104, -1000, -1000, -1000, 8924, -1000, -1000, -1000,
	36390, -169, 15659, 3833, 3833, 15659, 16367, 16367, -1000, 3833,
	-1000, -1000, -1000, -1000, -1000, 1553, 389, 15659, 43734, 3816,
	3386, -96, -1000, 15659, -48, -1000, 15659, -1000, 41066, -1000,
	-1000, 481, 1660, -1000, 15659, 42232, 223, 10340, -1000, 42110,
	-46, -46, -1000, 2123, 1305, 1045, 962, 870, 2103, -1000,
	20964, 604, 1139, 40944, 43512, 43734, -1000, 15659, -1000, -1000,
	1528, 15659, -1000, 43512, 43734, 16367, 16367, 16367, 16367, 16367,
	16367, 16367, 16367, 16367, 16367, 16367, 16367, 16367, 16367, 16367,
	16367, 16367, 16367, 16367, 1363, 16367, 2081, 2081, 2081, -50,
	15659, -1000, 1607, 1528, 15659, 15659, 43734, 222, 219, 218,
	-1000, 15659, -108, 15659, 15659, 15659, -1000, -1000, -1000, 216,
	-1000, 2099, -1000, -1000, -1000, -1000, 660, -1000, 1501, -1000,
	-115, -1000, 1643, -1000, 1501, -1000, -1000, 2079, -1000, 388,
	15659, 19906, -1000, 487, -1000, -97, -1000, 26804, -1000, 486,
	-224, -1000, 533, -1000, -1000, 552, 382, 36390, 26804, -1000,
	-1000, -1000, 698, 697, 1659, -1000, 1293, -1000, 628, -1000,
	931, 15659, 17429, 379, 377, 1035, -1000, 1658, 1185, 1654,
	1185, -1000, -53, 969, -1000, 21670, 15659, -1000, 696, 21670,
	-1000, -1000, 15659, -1000, 690, 21670, 584, 1520, 775, -1000,
	809, -1000, 1472, -1000, 24752, 373, 36390, 372, -1000, 369,
	-1000, -1000, 368, 36390, 1360, 523, 24072, -1000, 585, 906,
	-1000, 42957, -1000, 906, 8570, 1931, -106, -1000, -1000, -1000,
	599, 20611, 19906, 9986, -113, -1000, -1000, -1000, -1000, 42957,
	-65, 1887, 1887, -1000, 2098, -1000, 485, 213, -1000, 27484,
	-1000, -65, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36390,
	1157, 6445, 36390, 36390, 1155, 40785, -1000, 1860, 6445, 2008,
	3833, 3146, 2768, 15659, 43734, 43344, -120, 15659, 15659, -1000,
	212, 15659, 484, 42957, -1000, -1000, -1000, 42957, 15659, 2120,
	15659, 210, 200, 196, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 192, -1000, -1000, 38770, 15659, 191, -1000, 188,
	187, 42957, 1607, 42957, -1000, -1000, 565, 565, 868, 868,
	868, 868, 2081, 2727, 1302, 1189, 263, 263, 263, 1116,
	469, 469, 263, 263, 263, 1515, 1379, 366, 4397, 15659,
	186, -1000, -1000, 42957, 42957, 184, -1000, -1000, -1000, -108,
	3753, 40663, 40504, -1000, 178, 177, 1498, 2000, -1000, 19906,
	1498, -1000, 36390, 42957, -1000, -187, -1000, 2097, -1000, -1000,
	1335, -1000, 5732, 26804, 36390, -121, -1000, 36390, 36390, 36390,
	1650, -1000, 2016, -1000, 40382, -129, -1000, 316, 1965, 15659,
	-1000, -1000, 365, 17429, 36390, -1000, 1410, 1428, 651, 36390,
	-1000, 36390, -1000, 36390, 36390, 36390, -1000, 364, 76, -130,
	36390, -1000, -135, 36390, -1000, -1000, 23732, 716, -1000, 1115,
	1477, -1000, 17429, 361, 36390, 24752, 2036, 17429, 1218, 1376,
	523, 24072, -1000, 757, -1000, -1000, -84, -1000, 341, 75,
	906, -1000, -85, -1000, 529, 1844, -1000, 1825, 482, -1000,
	-1000, -87, 359, -1000, 527, 526, -1000, -95, -1000, 534,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1860, 15659, 15659,
	43344, -136, -1000, 3833, 3833, -1000, 40223, -1000, 42957, -1000,
	42110, -1000, -1000, -1000, -1000, 1092, -1000, 40101, -1000, -1000,
	-1000, -1000, 16367, 1511, 355, 43734, 39942, -1000, -1000, 15659,
	-1000, -1000, -1000, -1000, 596, 15659, 15659, 1643, 596, -137,
	552, -1000, -1000, -1000, 2096, -1000, -143, -1000, -1000, -1000,
	-1000, 36390, -1000, 36390, -1000, 6445, 36390, 1514, 1259, -1000,
	-1000, 1382, 354, 16367, 36390, -1000, 1036, 17429, 1860, 76,
	6445, 1860, 39820, 4967, -144, -146, 1256, -1000, 1252, 15659,
	-1000, 43734, 1185, 1185, -1000, 679, 676, 15659, 670, -1000,
	662, -1000, -102, 21670, -1000, -1000, 1991, 1103, -151, 17429,
	-153, 174, 75, -154, 36390, -1000, 523, 24072, -1000, 1720,
	1752, 36390, 1899, -1000, -1000, 352, 351, 350, -1000, 27144,
	27144, 23732, 23732, 1157, -1000, 36390, -1000, 3833, 3833, -1000,
	-1000, 173, 1139, 1985, -1000, 4465, 16367, 43734, -159, -1000,
	39661, -1000, 36390, 42957, -108, -1000, -1000, 26804, 470, -1000,
	-1000, 1404, -1000, -1000, 36390, 1275, -1000, -1000, 15659, 4397,
	349, 1472, 348, -1000, -1000, -1000, -1000, -1000, -1000, 1965,
	-38, -1000, 955, -1000, -1000, 42957, 1959, -1000, -1000, 36390,
	36390, -46, 344, 340, -1000, 1085, 36390, 1036, -166, -1000,
	1472, -1000, 1036, 328, 24072, -1000, 1360, 769, -167, 36390,
	-1000, -1000, 6797, 23732, 23732, -1000, -173, -1000, -1000, -1000,
	-174, -1000, 922, 15659, 4465, -175, -1000, -1000, -107, -1000,
	2029, -1000, -1000, -1000, -1000, 1647, 39539, 1339, 36390, -1000,
	36390, 1860, 172, 36390, 632, 6445, -1000, -1000, 170, 15659,
	15659, 325, 324, 323, 1472, 1036, -1000, 1472, 17429, -1000,
	1376, 841, -1000, 599, -1000, -176, -181, -1000, -1000, 163,
	16013, 16013, -108, -1000, 36390, 320, 1634, -1000, 1171, 1135,
	162, -183, -1000, -1000, 317, -1000, 15659, -1000, 2120, -184,
	-189, 36390, 36390, 36390, -1000, 1472, -1000, -190, -1000, 20611,
	-1000, 584, 584, -1000, -1000, -1000, 17075, 1125, 887, 41508,
	-1000, -1000, -1000, 36390, -1000, 1180, 1175, 882, -1000, -1000,
	-1000, -1000, -1000, 1339, 42957, -1000, -1000, -191, -192, -197,
	-1000, 1036, -182, -1000, -1000, 2060, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1811, -1000, 639, 1105, 1105, 1171, 310,
	299, 1144, 1472, -1000, 15305, -1000, 2067, -1000, -1000, 1373,
	-1000, -1000, 1061, 1060, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 133, 6445, 90, 6445, -1000, 620, -1000, 619,
	298, 1357, -61, 9632, 751, 321, -109, -1000, -198, -1000,
	42957, -1000, -1000, 294, -1000, 9632, 1061, -1000, 9632, 9632,
	-200, -1000, -1000, -205, -1000, -66, 1060, -123, -1000, -1000,
	1060, -1000,
}
var sqlPgo = [...]int{

	0, 2546, 2542, 1681, 1978, 2541, 2533, 2531, 2520, 2518,
	2514, 2513, 2512, 2511, 2509, 2506, 2496, 2490, 2489, 2488,
	2487, 2486, 2485, 2483, 1958, 2482, 1904, 2481, 2480, 2479,
	2477, 2475, 33, 2473, 2465, 1901, 2463, 2461, 2460, 2457,
	2455, 2454, 1899, 2452, 1853, 2451, 2450, 2449, 2448, 2447,
	1850, 2443, 72, 115, 1842, 2442, 2438, 1822, 1807, 1796,
	2437, 1794, 2436, 2434, 1790, 1787, 2431, 89, 2430, 2428,
	2422, 1777, 1773, 2419, 2418, 2417, 151, 2412, 1702, 2406,
	2394, 2384, 2380, 2377, 2371, 2368, 2357, 2355, 2353, 2350,
	2349, 2343, 2339, 2337, 2336, 2334, 2332, 2330, 159, 2328,
	2327, 1662, 1649, 2326, 2325, 38, 28, 18, 56, 27,
	167, 3027, 142, 2324, 2322, 2321, 2318, 2317, 2315, 26,
	101, 100, 2314, 336, 2312, 2310, 43, 36, 25, 17,
	2309, 95, 2306, 2304, 2323, 30, 2303, 2302, 132, 2300,
	39, 29, 2456, 152, 149, 114, 122, 2293, 2289, 2288,
	44, 119, 22, 4, 3, 2, 1, 2286, 5, 8,
	2284, 2283, 20, 87, 105, 2282, 51, 186, 2281, 2279,
	130, 2278, 57, 96, 1566, 110, 123, 1719, 99, 2277,
	61, 15, 59, 2276, 2274, 155, 31, 2273, 53, 66,
	145, 113, 2271, 52, 160, 133, 68, 129, 134, 2268,
	2266, 2259, 106, 2258, 120, 127, 2257, 2254, 82, 2252,
	98, 138, 2250, 141, 108, 2246, 2245, 85, 2242, 125,
	2241, 2236, 153, 147, 116, 13, 80, 63, 10, 1551,
	1546, 137, 91, 46, 49, 2234, 794, 1196, 1152, 81,
	104, 78, 75, 107, 60, 77, 139, 35, 2233, 2231,
	140, 2226, 2225, 2223, 2221, 2218, 102, 2217, 2216, 21,
	2213, 83, 45, 48, 79, 32, 97, 126, 112, 150,
	103, 2211, 67, 124, 2209, 88, 2207, 2206, 1548, 118,
	2205, 2200, 2198, 1537, 1530, 1231, 263, 2194, 2193, 1067,
	384, 2192, 2186, 71, 2180, 117, 111, 94, 144, 156,
	58, 2179, 121, 37, 2178, 40, 23, 0, 372, 221,
	2177, 128, 65, 2173, 2171, 2169, 2168, 34, 11, 7,
	9, 12, 14, 74, 50, 2167, 2166, 131, 92, 62,
	2164, 158, 2163, 2162, 2161, 41, 2160, 16, 2159, 19,
	2157, 2156, 24, 6, 2155, 2154, 146, 2152, 86, 2151,
	1991, 2147, 148, 2146, 2142, 1764, 2141, 54, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 305, 305, 306, 306, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 43, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 49, 49, 49, 47, 47, 47, 46, 46,
	46, 45, 45, 45, 48, 48, 48, 176, 176, 175,
	175, 179, 179, 50, 50, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	274, 274, 273, 51, 51, 248, 248, 54, 54, 203,
	203, 55, 55, 55, 55, 55, 56, 56, 66, 66,
	346, 346, 346, 350, 350, 351, 351, 352, 352, 352,
	352, 352, 352, 352, 348, 348, 61, 61, 61, 61,
	62, 62, 62, 63, 63, 103, 103, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 29, 30, 30, 31,
	31, 32, 32, 32, 72, 72, 72, 74, 71, 71,
	71, 73, 73, 73, 73, 75, 75, 76, 76, 76,
	76, 76, 77, 77, 299, 297, 297, 298, 298, 148,
	148, 148, 148, 148, 149, 149, 149, 304, 304, 304,
	304, 304, 304, 303, 303, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 90, 90, 90, 98, 98, 98, 98, 98,
	98, 98, 79, 79, 84, 84, 84, 84, 84, 80,
	80, 85, 85, 86, 86, 87, 87, 87, 87, 87,
	87, 81, 81, 81, 81, 89, 89, 89, 89, 88,
	88, 94, 94, 94, 94, 94, 94, 91, 91, 91,
	91, 92, 92, 92, 95, 95, 95, 95, 82, 82,
	83, 83, 96, 96, 97, 97, 97, 97, 97, 93,
	93, 93, 347, 347, 349, 349, 59, 59, 38, 38,
	39, 39, 150, 150, 151, 151, 227, 227, 227, 227,
	152, 152, 124, 124, 124, 153, 153, 154, 154, 155,
	155, 155, 157, 157, 158, 158, 159, 159, 159, 156,
	156, 156, 226, 315, 315, 316, 316, 316, 316, 316,
	316, 317, 317, 317, 317, 317, 317, 317, 313, 313,
	314, 311, 311, 312, 312, 312, 312, 353, 353, 225,
	225, 162, 162, 318, 318, 318, 318, 319, 319, 319,
	319, 319, 322, 321, 320, 320, 320, 320, 320, 260,
	260, 260, 100, 100, 40, 40, 130, 130, 41, 41,
	37, 37, 37, 207, 207, 166, 166, 265, 265, 265,
	141, 141, 119, 119, 119, 17, 13, 13, 13, 13,
	13, 13, 23, 23, 21, 21, 208, 208, 209, 209,
	60, 60, 64, 64, 69, 69, 99, 99, 99, 99,
	99, 99, 25, 25, 25, 25, 33, 33, 33, 33,
	68, 68, 355, 355, 137, 137, 137, 137, 138, 138,
	222, 222, 223, 223, 356, 356, 224, 224, 224, 132,
	131, 133, 133, 36, 36, 36, 126, 126, 127, 127,
	128, 128, 129, 129, 357, 357, 57, 57, 57, 102,
	102, 144, 144, 219, 219, 219, 221, 221, 220, 220,
	220, 193, 193, 193, 101, 101, 171, 171, 181, 181,
	182, 182, 271, 183, 183, 67, 67, 111, 111, 109,
	109, 109, 109, 109, 109, 109, 109, 110, 110, 110,
	112, 112, 112, 112, 112, 112, 112, 115, 115, 115,
	116, 116, 116, 114, 114, 328, 328, 328, 331, 331,
	327, 329, 329, 330, 330, 354, 354, 194, 194, 194,
	161, 160, 160, 164, 164, 163, 165, 165, 264, 264,
	264, 191, 191, 190, 190, 190, 190, 212, 212, 210,
	210, 211, 211, 215, 215, 216, 216, 216, 217, 217,
	218, 218, 189, 189, 244, 244, 214, 214, 213, 113,
	113, 113, 170, 170, 170, 172, 172, 234, 234, 234,
	234, 235, 235, 233, 233, 233, 233, 266, 266, 266,
	266, 266, 266, 266, 266, 344, 344, 344, 345, 345,
	263, 263, 267, 267, 267, 267, 267, 267, 261, 261,
	261, 261, 262, 262, 272, 272, 197, 197, 197, 197,
	195, 195, 196, 196, 268, 268, 268, 268, 192, 192,
	269, 269, 269, 228, 228, 275, 275, 275, 293, 293,
	169, 169, 169, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 277, 277, 277, 277, 279, 279,
	279, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 292,
	292, 292, 292, 292, 280, 280, 287, 287, 288, 288,
	289, 290, 281, 281, 282, 282, 283, 284, 291, 291,
	291, 291, 295, 295, 285, 285, 285, 285, 285, 286,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 205, 205, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 238, 238,
	238, 238, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 323, 323, 323, 323, 323, 323, 323,
	323, 325, 325, 326, 326, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 332, 332, 333, 333, 335,
	335, 336, 336, 337, 338, 338, 338, 339, 340, 340,
	334, 334, 341, 341, 341, 342, 342, 343, 343, 343,
	343, 343, 250, 250, 251, 252, 258, 258, 258, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 139, 139, 139, 139, 139,
	178, 178, 177, 177, 247, 247, 245, 245, 249, 249,
	198, 198, 294, 294, 294, 294, 294, 294, 294, 199,
	199, 199, 206, 200, 200, 201, 201, 201, 201, 201,
	241, 242, 202, 202, 202, 243, 243, 253, 257, 257,
	256, 255, 255, 254, 254, 231, 231, 232, 232, 230,
	229, 186, 186, 185, 185, 184, 184, 358, 358, 259,
	259, 187, 187, 188, 180, 180, 270, 270, 270, 270,
	173, 173, 146, 146, 174, 174, 142, 142, 145, 145,
	143, 143, 143, 143, 167, 167, 168, 168, 140, 140,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 296, 296, 296, 246, 134, 134, 134, 135, 135,
	136, 136, 301, 301, 301, 302, 302, 302, 302, 300,
	300, 300, 300, 300, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 7, 1,
	3, 2, 4, 1, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 4, 3, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 2, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 2, 3, 7, 7, 7, 4, 5, 5,
	5, 5, 2, 0, 2, 0, 3, 2, 8, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 1, 0, 9, 9, 6,
	7, 5, 3, 5, 1, 3, 1, 1, 1, 10,
	11, 9, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 3, 3, 0, 6, 3,
	11, 14, 4, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 4, 4, 2, 3, 5, 5, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 1, 0, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 1, 0, 2, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	3, 3, 1, 5, 5, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 1, 3, 3, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	1, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 383, -4, -24, -26, -29, -34,
	-35, -55, -42, -43, -44, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -36, -37, -38,
	-39, 73, -40, -41, 94, -330, 98, -45, -46, -47,
	-49, -48, 102, 109, 112, 134, 145, 231, 239, 260,
	262, 264, 271, -109, -111, 258, -62, -63, -71, -72,
	-73, -74, -103, 283, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, 286, -25, -33, -68, 325, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -328, -112, -110, 380, 259, 334, 35,
	295, 61, 105, 266, 350, 357, -115, -113, -114, -116,
	276, 342, 305, 384, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 2, 305, 345,
	87, 153, 244, -346, 2, -174, 305, 87, -143, -134,
	373, 4, -307, -309, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 175, 176,
	177, 180, 179, 184, 185, 188, 189, 192, 194, 196,
	197, 200, 198, 202, 203, 205, 204, 210, 212, 213,
	215, 218, 221, 224, 227, 228, 229, 230, 231, 232,
	233, 235, 237, 239, 241, 242, 243, 244, 245, 247,
	248, 250, 251, 252, 253, 254, 258, 256, 257, 259,
	260, 261, 262, 264, 266, 267, 269, 284, 285, 296,
	271, 272, 273, 274, 275, 279, 277, 280, 281, 283,
	286, 288, 291, 294, 295, 297, 300, 301, 298, 293,
	304, 306, 307, 308, 309, 310, 311, 312, 313, 320,
	321, 325, 326, 327, 328, 331, 332, 333, 334, 336,
	339, 340, 341, 346, 351, 352, 353, 354, 355, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 89, 91, 92, 108, 113, 114, 124, 125,
	126, 136, 138, 147, 148, 151, 158, 160, 161, 162,
	163, 164, 166, 173, 174, 182, 199, 209, 211, 222,
	226, 236, 238, 246, 268, 278, 289, 290, 299, 302,
	315, 316, 317, 322, 323, 338, 342, 343, 383, 383,
	2, 170, 243, -142, -134, 87, 383, 383, 383, 383,
	305, 2, 335, 345, -207, 87, 330, 383, 383, -134,
	239, 22, 2, 96, 157, 333, 332, 22, 235, 277,
	307, 309, 2, 383, 383, 383, 383, 383, 2, 345,
	305, 153, 87, 335, -134, 2, -53, 2, 380, -52,
	-4, -35, -44, -54, -50, -24, -26, -42, -58, -57,
	-59, -61, -65, -64, -67, -71, -72, -78, -101, -102,
	283, 111, -350, 2, 22, -351, -352, 73, 102, 134,
	276, 157, 96, 332, 305, 2, 170, 2, -134, 2,
	-346, 2, 170, 2, -350, 2, -134, 2, -138, 2,
	271, -134, 383, 383, 383, 383, 383, 189, 55, 268,
	280, -76, 321, -75, 315, -299, -77, 2, -175, 200,
	-134, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 2, -98,
	280, 34, 55, 22, 60, 88, 135, 153, 154, 176,
	68, 69, 242, 189, 171, 320, 177, 281, 306, 321,
	73, 336, 310, 110, 4, 87, 200, 282, 315, 383,
	383, 383, -354, 2, 305, 273, 286, -110, -112, -111,
	-163, -164, 329, 165, 107, 220, -109, -111, 2, -328,
	-98, 280, 2, 55, 22, -297, 2, -259, 216, -236,
	93, -238, 371, 372, 366, 206, 356, -250, -240, -253,
	108, 268, 380, -142, -239, 386, 9, -325, -111, 29,
	-251, -252, 49, -134, 7, 8, 5, 6, -140, -277,
	-246, -286, 324, 115, 208, -323, -324, 4, -307, -301,
	-278, -288, -282, -285, 166, 58, 79, 80, 83, 81,
	84, 282, 335, 50, 28, 113, 114, 226, 236, 302,
	322, 323, 147, 209, 148, 56, 136, 182, 101, 37,
	39, 41, 42, 51, 52, 89, 91, 92, 124, 125,
	126, 158, 160, 161, 162, 163, 164, 211, 246, 289,
	299, 316, 317, 343, -308, -289, -290, -283, -284, 74,
	116, 133, 156, 149, 168, 172, 183, 186, 195, 201,
	223, 225, 265, 287, -291, -355, 2, 321, 321, 2,
	-355, 2, -355, 2, -137, 2, 321, 318, -331, 247,
	-327, -134, -331, 383, 383, 385, 383, -160, -161, 2,
	22, 99, -188, 2, 380, -266, 2, 378, -268, -142,
	-111, -267, 380, 217, -3, 2, -268, 147, -142, 2,
	-268, 147, -142, 2, -134, 2, -145, 147, -142, -300,
	4, -307, -309, -308, -310, 58, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 68, 73, 78, 79, 81, 80, 82, 83, 84,
	93, 95, 97, 99, 100, 103, 105, 107, 115, 117,
	129, 131, 132, 134, 137, 139, 150, 153, 155, 165,
	167, 178, 181, 187, 190, 191, 206, 207, 208, 214,
	216, 217, 219, 220, 234, 240, 249, 263, 276, 282,
	292, 303, 305, 314, 318, 319, 324, 329, 330, 335,
	337, 344, 345, 347, 348, 349, 350, 318, 385, -174,
	-167, -134, -230, -229, 382, -236, 2, -236, 2, 132,
	380, -185, -186, -229, -230, 2, -175, 147, -134, 2,
	-175, 2, 153, -134, 147, 2, -134, 22, 132, 2,
	167, 2, 167, 2, -269, 2, -268, -176, 147, 2,
	-175, -176, 147, 2, -146, 147, 2, -145, -134, 147,
	2, -167, 147, 2, -203, 380, -274, 2, -273, -302,
	4, -307, -309, -308, 342, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 280, 216, 385,
	-175, -236, -248, 380, 132, -236, 216, -134, 2, 284,
	2, 380, -76, 53, 321, -223, 2, -224, -131, -132,
	-133, 169, 241, 245, 355, 318, 361, 132, -297, -179,
	382, -98, 2, -305, 2, -303, 9, -302, 5, 284,
	2, 242, 281, 55, 132, 2, 2, -347, 2, 216,
	132, 2, 132, 2, 132, 2, 132, 2, 132, 2,
	2, 242, 281, 2, 129, 2, 320, 2, 2, 132,
	2, 169, 241, 296, 2, 305, 345, 2, 132, 132,
	355, 2, -192, -268, 305, 355, 22, -163, -164, -213,
	-190, 129, -210, -211, 187, 117, 214, -194, 22, 99,
	-194, -194, 44, 381, 381, -98, 284, 2, 10, 11,
	57, 33, 371, 372, 373, 374, 127, 375, 376, 369,
	370, 368, 359, 360, 363, 364, 365, 70, 362, 361,
	63, 193, 270, 118, 119, 120, 121, 255, 13, 14,
	15, 26, 219, 186, 356, 149, 287, 366, 16, 17,
	18, 168, 36, 150, -139, -147, -236, -236, -236, -236,
	-236, 225, -184, -231, 378, -111, 380, 380, -111, -236,
	-177, 380, 7, -111, -245, 378, -254, -236, -185, 380,
	5, 380, 5, -332, 351, 129, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 238, -295, 346, -295, -295,
	-279, 380, -279, -280, 380, -279, 352, 357, 380, -222,
	-223, -222, 318, -138, 385, -331, -168, 380, -188, -180,
	-270, -236, 373, -180, -187, -259, 74, -197, 172, 201,
	133, 183, 265, 156, 7, -53, -233, 386, 380, 373,
	-263, 357, -111, -267, 380, -266, -142, 380, -121, 256,
	-120, 21, 23, 102, 340, 108, 293, 311, 111, 272,
	256, 108, 111, 256, 293, 311, 272, 256, 108, 386,
	111, -305, -143, 385, -300, 373, 297, 381, -173, -142,
	-186, 380, -162, 206, -130, -329, 350, -162, 380, -135,
	147, 2, -134, -329, 206, -269, -144, -142, -144, 283,
	-134, 30, -123, 385, 48, 261, 108, -123, 108, -123,
	385, 108, -123, 108, 108, -177, -236, 381, 385, -346,
	-352, 73, 380, 30, -247, -275, -276, -278, -287, -281,
	-285, -286, 40, 46, 45, 174, 173, 312, 199, 278,
	290, 338, 151, 38, 215, 159, 4, 158, 160, 161,
	162, 163, 164, 289, 37, 246, 125, 126, 124, 101,
	92, 91, 211, 42, 41, -289, -290, -283, -284, 89,
	316, 317, 166, 39, 52, 51, 343, 299, -306, -305,
	-346, -299, -177, 30, -223, 2, -356, 385, 185, -149,
	192, 205, 141, 217, 353, -304, 5, 4, -246, -260,
	93, 189, -286, 8, 372, -296, 7, 371, -298, -297,
	-298, 77, 382, -300, -175, 22, 285, 2, -299, -349,
	129, -346, -299, -299, -299, -299, -299, 280, -53, 129,
	-134, 185, -299, 2, -299, 2, 305, 153, 305, -123,
	385, -142, 64, 65, 355, -213, -190, -191, -190, -214,
	-213, 332, -211, -210, -215, -236, 22, -218, 123, 202,
	-236, -238, -110, -110, -110, -165, -264, -236, 240, 153,
	-299, -293, -275, -292, 251, 252, 250, 254, 253, -275,
	-300, 315, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, 186, 149, 287, 36, 150, -236,
	318, -236, -236, -236, -236, 198, 206, 208, 324, 115,
	331, 99, 212, -358, 303, 32, -243, -111, 380, -258,
	27, 292, 22, -250, 268, 380, -231, -236, -232, -178,
	-177, 381, 385, -178, -249, -245, -257, -256, 347, 381,
	-177, 344, 22, 99, 373, 2, 7, -204, 354, 197,
	90, 142, 196, -205, 275, -333, 122, 137, 380, 381,
	2, 381, 2, 381, 2, 381, 2, -236, -236, -198,
	2, -294, -177, 4, 354, 197, 90, 142, 196, 275,
	-198, 2, -199, 2, -236, -177, -200, -237, -238, 371,
	372, 366, 380, 268, -201, 2, -236, -178, -236, 43,
	181, 319, -202, -236, 132, -177, -236, -236, -236, -177,
	-177, 2, -177, 2, 380, 7, 7, 315, 315, 7,
	-138, -327, 30, -167, -170, 385, 132, 30, 4, -170,
	385, 381, 172, 172, -266, -197, 172, -195, 223, -195,
	-195, -344, 380, 379, -263, -300, 378, 387, -178, 2,
	-262, -261, 30, -134, 221, 381, -142, 385, 318, -208,
	68, 59, -226, 147, 59, -311, -134, 68, -312, 54,
	330, 240, 131, -208, 68, -208, 68, 68, -268, 33,
	-67, 66, 132, 318, -268, 66, 318, 33, -67, 132,
	318, -145, -300, 66, -272, 358, -134, 132, 381, 385,
	-150, -167, -151, -134, -227, -226, -313, -314, -311, 153,
	330, 116, 30, 108, 230, 30, 216, 206, -126, 308,
	108, -228, 348, -219, -67, 380, 93, 30, -219, -181,
	-182, -271, -183, -142, 380, -134, -175, -176, -176, -145,
	-146, -134, -167, 381, 385, -53, -273, 318, 337, -151,
	-52, 381, 385, -169, 29, 378, -204, 380, -272, 385,
	132, 361, 318, 381, 321, -224, -148, 245, 291, 257,
	279, 8, 7, 7, 385, -300, -348, -134, 280, -53,
	-142, -145, -142, -268, 350, 129, 65, -191, -214, -216,
	-296, 380, 372, -217, 268, 269, 385, -119, 31, 97,
	175, -142, 355, -236, -236, 318, -358, 303, -243, -236,
	198, 208, 324, 115, 331, 99, 212, 132, 380, -237,
	-237, -177, -240, 380, -177, 379, 389, 381, -236, 379,
	379, 385, -255, -256, 103, -236, -164, 385, -163, -236,
	-177, -177, 381, 381, 318, 318, 318, 318, 380, -338,
	224, 380, 380, -236, 30, 385, 381, 132, 381, 381,
	-206, 234, 381, 10, 11, 371, 372, 373, 374, 127,
	375, 376, 369, 370, 368, 359, 360, 361, 63, 193,
	270, 13, 14, 15, 168, 150, -237, -237, -237, -177,
	380, 381, -241, -242, 132, 129, 30, -202, -202, -202,
	381, 132, -177, 385, 385, 385, 381, 381, 381, 7,
	381, 385, 381, 355, 355, 381, 380, 381, -228, -270,
	-172, 2, -266, -300, -228, -259, -266, -266, -196, 337,
	216, 172, -266, -261, 381, -345, 7, -263, -262, 7,
	-235, -234, 130, 204, 233, 381, -134, 380, -263, 381,
	-120, -142, -134, -134, 206, -226, 147, -125, 206, -275,
	-134, 380, 380, 175, 175, -134, -134, 147, -134, 147,
	-134, -134, -121, 256, -67, 355, 380, -142, 256, 355,
	-134, -67, 380, -134, 256, 355, -104, 146, 212, 297,
	132, -142, 381, 381, 385, -135, 153, -135, -67, -175,
	5, -67, -142, 108, -127, 104, -357, 361, -134, -212,
	-210, -236, -193, -221, 263, 216, -173, 342, -134, -193,
	-171, 385, 132, 361, -173, -123, -123, -123, -123, -236,
	-348, -305, 381, -275, 378, 379, 7, 7, -107, 350,
	-305, -348, -297, -297, -131, 328, 62, 245, -297, 385,
	218, 244, 87, 305, -217, -236, -264, -142, 386, -236,
	-236, -237, -237, 132, 380, -236, -247, 26, 26, 381,
	-178, 385, -232, -236, 381, -245, 105, -236, 314, 381,
	344, -164, -164, -164, 5, 197, 142, 196, -205, 196,
	-205, -205, 7, -339, -134, 380, 348, -163, 381, -293,
	-275, -236, -241, -236, -293, -275, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, 99, 206, 212, -237, 385,
	-178, -242, -241, -236, -236, -275, 381, 381, 381, -177,
	-236, -236, -236, 381, 7, -52, -189, 137, -272, 385,
	-189, -196, 380, -236, -266, 379, 381, 385, -262, 379,
	385, 388, 361, -263, 380, -167, -261, 318, 318, 108,
	206, 339, -315, -312, -236, -166, -265, -134, -326, 380,
	-323, -324, -140, 380, 380, -118, 102, 283, -209, 108,
	-123, 108, -123, 318, -208, 68, -239, -140, -134, -177,
	318, -239, -177, 318, -239, -107, 132, 304, 297, -152,
	152, -227, 380, -135, 380, 380, -162, 380, -134, -128,
	180, -357, -303, -329, -193, -193, -180, 207, 67, 381,
	-228, -182, -172, -259, 381, -108, 75, -108, 7, 379,
	381, -106, 218, -105, -134, 5, -134, -31, -32, 153,
	232, -300, -134, -142, 217, 381, -119, -300, 26, 26,
	-236, -247, 381, -236, -236, 381, -236, 379, -236, 5,
	-236, 381, 381, 381, 381, -340, -134, -236, 381, 381,
	381, -242, 132, 99, 212, 380, -236, 381, 381, 385,
	381, 381, 381, 381, -244, 139, 44, -266, -244, -167,
	-233, 7, -234, -300, 378, -262, -167, 381, -134, -134,
	-226, 108, -316, 68, -317, 57, 116, 73, 206, 208,
	330, 240, 54, 93, 249, 381, 381, 385, -141, -185,
	57, -141, -236, 380, -166, -167, 206, 93, 206, 93,
	86, 326, -134, -134, -142, -134, -134, 380, 381, -142,
	381, -134, -306, 315, -153, -154, 229, 150, -166, 380,
	-167, -150, 30, -166, 216, -129, 179, -357, -303, -126,
	-220, 380, 216, -67, -193, 361, 86, 86, 379, 385,
	380, 361, 361, 385, 22, 380, -119, -236, -236, 381,
	381, -164, -334, 229, 381, -237, 132, 380, -247, 381,
	-236, -335, 349, -236, -177, -335, 381, -263, 7, 381,
	-226, -134, -300, -134, 116, 147, 208, 175, 380, -237,
	-142, -225, -353, 72, 301, -265, -119, -300, -119, 381,
	-177, 381, 381, 208, 208, -236, -275, -123, -123, 318,
	318, -177, 318, 318, -239, 44, 227, 381, -166, 381,
	381, -67, 381, -142, -357, -303, -127, 100, -167, 68,
	-188, -111, 380, 380, 380, -105, -106, -305, -305, -32,
	-167, 381, -164, 44, -237, -247, 381, 381, -336, -337,
	-134, -262, 379, -317, -135, 206, -236, -136, 380, -152,
	380, -141, -164, 249, -122, 57, -134, -134, -164, 380,
	380, 188, 244, -142, -225, 381, -152, -225, 380, -303,
	-128, 332, 207, 381, -134, -306, -306, 381, 381, -341,
	244, 269, -177, 381, 385, 30, 108, 381, -318, 194,
	-134, -167, -119, 381, -142, -117, 337, -300, 381, -177,
	-177, 380, 380, 380, -152, -225, -152, -166, -129, 283,
	-228, 381, 381, 381, -342, -343, 36, 327, 77, -236,
	-342, -337, -339, 116, -319, -322, -321, 216, 133, 228,
	288, 381, 381, -162, -236, 381, 381, -167, -167, -167,
	-152, 381, -181, -107, -107, -343, 237, 128, 268, 237,
	128, -134, -321, 216, -322, 216, 332, 96, -318, 381,
	381, 381, -225, -228, 26, -320, 203, 261, 48, 283,
	-320, -319, 380, 380, -124, 48, 261, -152, -343, 20,
	208, 93, -155, 229, -156, 229, 381, -300, 381, -300,
	342, 342, -157, 380, 184, 385, -154, -153, -158, -159,
	-236, 93, 195, 313, -155, 380, 385, 381, 385, 380,
	-158, -155, -159, -158, 381, 381, 385, -154, -153, -156,
	385, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 675, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 355, 357, 359, 361, 363, 365,
	367, 369, 371, 373, 375, 377, 379, 381, 383, 384,
	386, 388, 390, 0, 596, 598, 600, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 713, -2, 724, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 690, 692, 694, 696,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1300, 1224, 1230,
	1231, 1255, 1256, 1257, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 151, 153,
	154, 0, 0, 0, 1226, 1300, 160, 162, 164, 166,
	0, 172, 0, 0, 0, 0, 563, 169, 171, 261,
	1364, 263, 265, 0, 0, 0, 0, 175, 176, 177,
	178, 179, 180, 182, 184, 186, 188, 190, 191, 0,
	0, 0, 0, 0, 260, 258, 213, 214, 0, 243,
	244, 245, 246, 247, 249, 217, 219, 220, 222, 224,
	226, 228, 229, 231, 233, 234, 236, 238, 239, 241,
	0, 0, 0, 267, 273, 274, 275, 277, 278, 279,
	280, 281, 282, 283, 0, 131, 0, 467, 256, 254,
	0, 127, 0, 593, 0, 269, 594, 595, 590, 591,
	1391, 619, 287, 289, 298, 300, 302, -2, -2, 1485,
	-2, 319, -2, 327, 1491, 0, 330, 331, 334, -2,
	209, 356, 358, 360, 362, 364, 366, 368, 370, 372,
	374, 376, 378, 380, 382, 385, 387, 389, 391, 392,
	0, 0, 0, 396, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 395, 397, 398, 399, 0, 597,
	599, 601, 0, 553, 715, 0, 0, -2, 688, 689,
	-2, 0, 719, 719, 719, 0, 0, 689, 687, 0,
	290, 0, 292, 0, 396, 295, 296, 335, 336, 1209,
	1210, 926, 0, 0, 0, 0, 0, 0, 1028, 1030,
	1456, 1485, 0, 1032, 1033, 0, 1035, 1037, 1038, 0,
	1041, 1042, 1194, 1226, 1240, 1241, 1242, 1243, 0, 0,
	1246, 0, 1248, 1249, 1250, 1096, 1052, -2, -2, 1238,
	854, 855, 856, 857, -2, 1499, 1056, 1059, 1062, 1065,
	1066, 1069, 1070, 0, 1440, 1457, 1458, 1481, 1482, 1490,
	1494, 1495, 1464, 1478, 1465, 1452, 1462, 1476, 1306, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1264, 888, 889, 894, 895, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 897, 621, 603, 612, 621, 605,
	606, 607, 608, 609, 610, 611, 614, 0, 705, 1370,
	708, 1237, 706, 691, 693, 0, 695, 0, 0, 699,
	721, 720, 759, 760, 0, 703, 704, 714, 776, 814,
	791, 782, 0, 0, 2, 71, 0, 1464, 814, 73,
	0, 1464, 814, 76, 0, 82, 0, 1464, 1229, 0,
	1269, 1270, 1271, 1272, 1273, 1499, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 0, 0, 271,
	272, 1234, 1232, 1233, 0, 155, 156, 157, 158, 0,
	0, 1227, 1203, 1201, 1202, 167, 532, 1464, -2, 555,
	532, 559, -2, 712, 1464, 635, 262, 264, 0, 174,
	0, 648, 0, 650, 0, 665, 820, 117, 1464, 194,
	207, 117, 1464, 197, 117, 1464, 200, 1222, 117, 1464,
	203, 204, 1464, 206, 257, 0, 0, -2, 250, 252,
	1265, 1266, 1267, 1268, -2, 248, 218, 221, 223, 225,
	227, 230, 232, 235, 237, 240, 242, -2, 0, 0,
	0, 466, 0, 0, 0, 592, 0, 618, 305, 0,
	316, 0, 318, 1451, -2, -2, 322, 622, 626, 627,
	628, 0, 0, 0, 0, 0, 0, 0, 332, 210,
	0, 393, 394, 402, 403, 132, 133, 353, 354, 0,
	406, 427, 439, 0, 0, 410, 412, 465, 414, 0,
	0, 416, 0, 418, 0, 420, 0, 422, 0, 424,
	426, 428, 440, 430, 714, 432, 0, 434, 438, 0,
	443, 0, 445, 446, 447, 0, 0, 453, 0, 0,
	400, 401, 117, 818, 0, 0, 0, -2, 0, 732,
	757, 0, 735, 736, 0, 0, 0, 0, 717, 718,
	0, 0, 0, 677, 678, 291, 0, 294, 0, 0,
	0, 0, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1138,
	1135, 1136, 1139, 1140, 0, 0, 0, 0, 0, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 1142, 1143,
	1144, 0, 0, 1146, 0, 1148, 0, 0, 0, 0,
	0, 0, 1208, 0, 0, 1145, 931, 932, 933, 965,
	966, 0, 1029, 1205, 1198, 1031, 0, 1151, -2, 1152,
	0, 0, 1034, 1039, 1040, 1151, 0, 1193, -2, 0,
	1245, 0, 923, 1098, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1174, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 891, 902, 899, 898,
	875, 0, 874, 872, 0, 876, 0, 0, 0, 602,
	-2, 604, 0, 616, 0, 707, 0, 0, 761, 764,
	1214, 1218, 1219, 764, 0, 1211, 0, 0, 0, 0,
	811, 811, 811, 809, 785, 0, 791, 0, -2, 815,
	803, 0, -2, 782, 0, 0, 816, 0, 83, 587,
	96, 0, 587, 587, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 805, 1225, 0, 1199, 1200, 147, 0, 0, 1220,
	1204, 473, 0, 0, 554, 0, 711, 0, 0, 0,
	1464, 562, 1258, 637, 0, 824, 0, 651, 0, 0,
	821, 0, 192, 0, 115, 116, 0, 195, 0, 198,
	0, 0, 201, 0, 0, 0, 1152, 714, 0, 0,
	276, 0, 0, 714, 0, 1154, 832, 833, 834, 835,
	836, 923, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 885, 0,
	860, 860, 860, 877, 878, 886, 887, 892, 893, 904,
	905, 907, 909, 903, 903, 903, 900, 901, 805, 134,
	0, 0, 0, 0, -2, 324, 0, 624, 0, 629,
	344, 345, 346, 631, 632, 328, 347, 348, 349, 350,
	351, 352, 0, 549, 0, 551, 1251, 0, 325, 337,
	326, 329, 0, 211, 404, 405, 407, 408, 409, 413,
	0, 462, 415, 417, 419, 421, 423, 431, 435, 714,
	441, 444, 448, 449, 450, 451, 0, 0, 0, 552,
	0, 307, 0, 457, 0, 732, 757, 681, 731, 682,
	756, 758, 733, 734, 739, 743, 744, 747, 750, 751,
	741, 926, 700, 701, 702, 725, 726, 574, 0, 0,
	293, 927, 828, 829, 879, 880, 881, 882, 883, 928,
	929, 0, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, -2, -2, -2, -2, -2, -2, -2, -2,
	952, 953, 954, 955, 956, 957, 958, 959, -2, -2,
	-2, 963, 964, -2, 1147, 1149, 0, 1208, 0, -2,
	0, -2, -2, -2, -2, 977, 0, 979, 982, 984,
	986, 0, 0, 0, 0, 1207, 996, 1185, 0, 0,
	1126, 1127, 1128, 981, 0, 0, 1206, 1197, 0, 0,
	1150, 1036, 0, 0, 0, 1158, 1192, 1188, 0, 1043,
	724, 0, 0, 0, 0, 1050, 0, 1254, 910, 911,
	912, 913, 914, 915, 924, 1106, 0, 0, 0, 1057,
	1058, 1060, 1061, 1063, 1064, 1067, 1068, 0, 0, 0,
	1074, 0, 1161, -2, -2, -2, -2, -2, -2, -2,
	0, 1076, 0, 1078, 1152, 1171, 0, 0, 999, 0,
	0, 0, 0, 1485, 0, 1081, 1152, 1179, 0, 0,
	0, 0, 0, 1152, 0, 1184, 0, 0, 0, 0,
	0, 1092, 0, 1094, 0, 0, 0, 0, 0, 0,
	615, 709, 0, 0, 824, 0, 0, 0, 1217, 824,
	0, 1213, 0, 0, 0, 0, 0, 806, 810, 807,
	808, 0, 0, 791, 803, 773, 0, 0, 0, 780,
	781, 802, 0, 801, 790, -2, 0, 0, 0, 0,
	0, 586, 98, 1464, 0, 119, 0, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 1228, 0, 137, 0, 1235, 0, 0, 0,
	0, 0, 472, 1234, 474, 476, 477, 478, 479, 1259,
	0, 1259, 0, 0, 0, 0, 0, 0, 639, 645,
	0, 738, 0, 663, 653, 0, 0, 0, 663, 667,
	668, 670, 671, 0, 0, 822, 208, 117, 117, 1223,
	117, 117, 205, 259, 0, 215, 251, 0, 0, 0,
	253, 255, 0, 825, 827, 0, 837, 0, 146, 0,
	0, 0, 0, 317, 0, 623, 630, 0, 341, 0,
	343, 550, 1253, 1252, 0, 212, 464, 284, 433, 436,
	459, 460, 461, 819, 0, 0, 458, 685, 686, 0,
	745, 0, 0, 742, 748, 749, 0, 728, 572, 573,
	0, 0, 0, -2, -2, 0, 0, 0, 997, -2,
	978, 980, 983, 985, 987, 0, 0, 0, 0, 0,
	0, 0, 998, 1151, 0, 1195, 1198, -2, 1153, 1156,
	1157, 0, 0, 1189, 0, 0, 0, 0, 723, 724,
	724, 724, 1049, 0, 0, 0, 0, 0, 0, 1051,
	0, 0, 0, 0, 0, 0, 1073, 0, 1075, 1077,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1002, 1003, 1004, 0,
	1151, 1080, 1177, 1178, 0, 0, 0, 0, 0, 0,
	1086, 0, 1183, 0, 0, 0, 1090, 1091, 1093, 0,
	858, 0, 884, 906, 908, 896, 714, 1236, 753, 1215,
	805, 763, 765, 1216, 753, 1212, 793, 0, 795, 0,
	0, 0, 797, 0, 786, 0, 788, 803, 778, 0,
	0, 771, 0, 769, 770, 791, 799, 0, 0, 817,
	97, 576, 0, 0, 0, 100, 1464, 108, 0, 504,
	0, 0, 0, 0, 0, 589, 109, 1464, 117, 1464,
	117, 110, 84, 587, 85, 0, 0, 582, 0, 0,
	575, 86, 0, 584, 0, 0, 146, 0, 0, 148,
	0, 1221, 481, 531, 0, 0, 1259, 0, 470, 532,
	556, 558, 0, 0, 641, 645, 0, 644, 712, 663,
	737, 823, 646, 663, 0, 0, 0, 655, 652, 649,
	824, 0, 0, 0, 0, 193, 196, 199, 202, 1153,
	266, 0, 0, 1155, 0, 830, 0, 0, 126, 0,
	135, 268, 314, 315, 320, 339, 340, 342, 338, 0,
	0, 0, 0, 0, 0, 0, 727, 574, 0, 930,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1186,
	0, 0, 0, 1197, -2, 1159, 1187, 1191, 0, 1044,
	0, 0, 0, 0, 1247, 916, 917, 918, 919, 920,
	921, 922, 0, 1104, 1105, 1109, 0, 0, 1055, 0,
	0, 1160, 1170, 1172, 1000, 1001, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, -2, -2, -2, 1018,
	1019, 1020, -2, -2, -2, 0, 0, 0, 1173, 0,
	0, 1175, 1176, 1180, 1181, 0, 1083, 1084, 1085, 1182,
	0, 0, 0, 890, 0, 0, 755, 0, 762, 0,
	755, 794, 0, 813, 796, 776, 787, 0, 784, 774,
	0, 775, 0, 803, 0, 0, 783, 0, 0, 0,
	0, 118, 502, 521, 0, 0, 565, 571, 571, 0,
	1053, 1054, 0, 0, 0, 102, 0, 0, 0, 0,
	106, 0, 112, 0, 0, 0, 91, 0, 0, 0,
	0, 90, 0, 0, 89, 124, 0, 0, 149, 486,
	0, 475, 0, 0, 0, 473, 0, 0, 0, 643,
	645, 0, 636, 637, 173, 647, 661, 662, 660, 0,
	663, 669, 666, 672, 0, 0, 128, 0, 0, 831,
	838, 144, 1352, 142, 139, 141, 285, 308, 309, 0,
	313, 454, 455, 456, 740, 746, 729, 574, 0, 0,
	-2, 0, 990, -2, -2, 1122, 1153, 1196, 1190, 1244,
	724, 1045, 1047, 1048, 925, 1111, 1108, 0, 1095, 1071,
	1072, 1169, 0, 0, 0, 0, 1153, 1124, 1082, 0,
	1088, 1089, 859, 710, 1100, 0, 0, 766, 1100, 0,
	791, 789, 772, 767, 0, 779, 0, 800, 578, 580,
	99, 0, 503, 0, 506, 0, 0, 0, 0, 512,
	513, 0, 0, 0, 0, 523, 530, 0, 574, 1239,
	0, 574, 0, 0, 0, 0, 0, 114, 0, 0,
	588, 0, 117, 117, 577, 0, 0, 0, 0, 583,
	0, 585, 136, 0, 468, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 645, 0, 638, 639,
	0, 0, 0, 654, 664, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 311, 0, 730, -2, -2, 991,
	1123, 0, 724, 0, 1097, -2, 0, 0, 0, 1125,
	0, 697, 0, 754, 752, 698, 812, 803, 0, 798,
	101, 0, 507, 508, 1259, 0, 511, 514, 0, 516,
	1261, 481, 0, 527, 528, 566, 567, 570, 568, 571,
	724, 525, 0, 103, 104, 113, 121, 105, 111, 0,
	0, 724, 0, 0, 804, 0, 0, 530, 0, 520,
	481, 471, 530, 0, 0, 640, 641, 0, 0, 0,
	673, 674, 0, 0, 0, 143, 0, 138, 140, 310,
	0, 1046, 1114, 0, -2, 0, 1026, 1087, 1099, 1101,
	0, 777, 768, 505, 509, 0, 0, 536, 0, 524,
	0, 574, 0, 0, 123, 0, 579, 581, 0, 0,
	0, 0, 0, 0, 481, 530, 469, 481, 0, 642,
	643, 0, 657, 824, 659, 0, 0, 145, 312, 0,
	0, 0, 1110, 1027, 0, 0, 0, 515, 541, 0,
	0, 0, 569, 1044, 532, 107, 0, 120, 0, 0,
	0, 0, 0, 0, 518, 481, 560, 0, 634, 0,
	658, 146, 146, 1107, 1112, 1115, -2, 1424, 1297, 0,
	1113, 1102, 1103, 0, 517, 537, 538, 0, 533, 534,
	535, 1260, 529, 536, 122, 93, 95, 0, 0, 0,
	519, 530, 824, 129, 130, 0, 1117, 1118, 1119, 1120,
	1121, 510, 539, 0, 540, 0, 0, 0, 541, 0,
	0, 484, 481, 656, 0, 542, 0, 545, 546, 0,
	543, 526, 0, 0, 480, 482, 483, 561, 1116, 544,
	547, 548, 0, 0, 0, 0, 487, 0, 488, 0,
	0, 0, 486, 0, 0, 0, 485, 491, 0, 494,
	496, 497, -2, 0, 489, 0, 0, 492, 0, 0,
	0, 490, 495, 0, 493, 486, 0, 485, 501, 499,
	0, 500,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 369, 3, 375, 370, 3,
	380, 381, 373, 371, 385, 372, 382, 374, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 389, 384,
	359, 361, 360, 363, 386, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 378, 3, 379, 376, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 387, 368, 388, 366,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 362, 57702, 364, 57703, 365, 57704, 367,
	57705, 377, 57706, 383, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1091
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1097
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1106
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1280
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2114
		{
			return unimplemented(sqllex, "set from current")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = Low
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = Normal
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = High
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.str = "client_encoding"
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2490
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2501
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2512
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2516
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2520
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2528
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2546
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2691
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = DropDefault
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			return unimplemented(sqllex, "match full")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			return unimplemented(sqllex, "match partial")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			return unimplemented(sqllex, "match simple")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3015
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = NoAction
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = Restrict
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = Cascade
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = SetNull
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = SetDefault
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = true
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = false
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3208
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = Ascending
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = Descending
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3252
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3254
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = true
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = false
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3288
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3350
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3387
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.str = ""
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.str = ""
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3448
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = ReadOnly
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = ReadWrite
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.str = ""
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3580
		{
			return helpWith(sqllex, "INSERT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3639
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3679
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3816
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			return helpWith(sqllex, "SELECT")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			return helpWith(sqllex, "VALUES")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			return helpWith(sqllex, "TABLE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			return helpWith(sqllex, "SELECT")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			return helpWith(sqllex, "TABLE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3964
		{
			return unimplemented(sqllex, "cte")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3972
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3975
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3976
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = true
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = false
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = false
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = true
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4000
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4078
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = false
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = true
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			return helpWith(sqllex, "VALUES")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &From{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4245
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &IndexHints{PhysicalCheck: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if a.PhysicalCheck && b.PhysicalCheck {
				sqllex.Error("PHYSICAL_CHECK specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			a.PhysicalCheck = a.PhysicalCheck || b.PhysicalCheck
			sqlVAL.union.val = a
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4299
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4336
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = nil
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4402
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4408
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = true
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = false
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.str = astFullJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.str = astLeftJoin
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.str = astRightJoin
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.str = astInnerJoin
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4520
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4606
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4620
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4628
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4652
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4663
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = jsonbColType
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = jsonColType
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4752
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4761
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = nil
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4922
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4954
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4994
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = year
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = month
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = day
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = hour
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = minute
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = month
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = hour
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = minute
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = minute
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = nil
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = second
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5089
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5124
		{
			return unimplemented(sqllex, "at tz")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5398
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5555
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5571
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5624
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5625
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5638
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5649
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5670
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5697
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			return unimplemented(sqllex, "current role")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5707
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5728
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5733
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5748
		{
			return unimplemented(sqllex, "treat")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5785
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5790
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5794
		{
			return unimplemented(sqllex, "within group")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5795
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5838
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.str = ""
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5892
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5893
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5894
		{
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5898
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5904
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5905
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5906
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5907
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5908
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Any
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Some
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = All
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = Plus
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = Minus
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = Mult
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = Div
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = Mod
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = Bitand
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = Bitor
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = Pow
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = Bitxor
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = LT
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = GT
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = EQ
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = LE
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = GE
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = NE
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = Like
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = NotLike
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = ILike
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = NotILike
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6024
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6263
		{
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6264
		{
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6317
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6321
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6333
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6368
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6378
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6382
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6426
		{
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6447
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6459
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6462
		{
			return unimplemented(sqllex, "func const")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6464
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6471
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = DNull
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6488
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6492
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6498
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6533
		{
			sqlVAL.str = ""
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6539
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6543
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
