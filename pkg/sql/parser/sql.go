// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PHYSICAL = 57574
const PLACING = 57575
const PLANS = 57576
const POSITION = 57577
const PRECEDING = 57578
const PRECISION = 57579
const PREPARE = 57580
const PRIMARY = 57581
const PRIORITY = 57582
const QUERIES = 57583
const QUERY = 57584
const RANGE = 57585
const READ = 57586
const REAL = 57587
const RECURSIVE = 57588
const REF = 57589
const REFERENCES = 57590
const REGCLASS = 57591
const REGPROC = 57592
const REGPROCEDURE = 57593
const REGNAMESPACE = 57594
const REGTYPE = 57595
const REMOVE_PATH = 57596
const RENAME = 57597
const REPEATABLE = 57598
const RELEASE = 57599
const RESET = 57600
const RESTORE = 57601
const RESTRICT = 57602
const RESUME = 57603
const RETURNING = 57604
const REVOKE = 57605
const RIGHT = 57606
const ROLLBACK = 57607
const ROLLUP = 57608
const ROW = 57609
const ROWS = 57610
const RSHIFT = 57611
const SAVEPOINT = 57612
const SCATTER = 57613
const SCRUB = 57614
const SEARCH = 57615
const SECOND = 57616
const SELECT = 57617
const SEQUENCES = 57618
const SERIAL = 57619
const SERIALIZABLE = 57620
const SESSION = 57621
const SESSIONS = 57622
const SESSION_USER = 57623
const SET = 57624
const SETTING = 57625
const SETTINGS = 57626
const SHOW = 57627
const SIMILAR = 57628
const SIMPLE = 57629
const SMALLINT = 57630
const SMALLSERIAL = 57631
const SNAPSHOT = 57632
const SOME = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const HAS_SOME_KEY = 57701
const HAS_ALL_KEYS = 57702
const POSTFIXOP = 57703
const UMINUS = 57704
const HELPTOKEN = 57705

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6921

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	383, 54,
	-2, 714,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 564,
	-2, 0,
	-1, 64,
	96, 714,
	157, 714,
	331, 714,
	332, 714,
	-2, 0,
	-1, 74,
	1, 676,
	216, 676,
	262, 676,
	378, 676,
	380, 676,
	382, 676,
	383, 676,
	-2, 689,
	-1, 107,
	4, 716,
	20, 716,
	21, 716,
	23, 716,
	28, 716,
	33, 716,
	34, 716,
	35, 716,
	36, 716,
	37, 716,
	38, 716,
	39, 716,
	40, 716,
	41, 716,
	42, 716,
	44, 716,
	45, 716,
	46, 716,
	47, 716,
	48, 716,
	51, 716,
	52, 716,
	53, 716,
	55, 716,
	56, 716,
	60, 716,
	61, 716,
	62, 716,
	64, 716,
	65, 716,
	66, 716,
	67, 716,
	69, 716,
	71, 716,
	72, 716,
	75, 716,
	76, 716,
	77, 716,
	85, 716,
	86, 716,
	87, 716,
	88, 716,
	89, 716,
	90, 716,
	91, 716,
	92, 716,
	94, 716,
	96, 716,
	98, 716,
	101, 716,
	102, 716,
	104, 716,
	108, 716,
	109, 716,
	110, 716,
	111, 716,
	112, 716,
	113, 716,
	114, 716,
	122, 716,
	123, 716,
	124, 716,
	125, 716,
	126, 716,
	128, 716,
	130, 716,
	135, 716,
	136, 716,
	138, 716,
	141, 716,
	142, 716,
	145, 716,
	146, 716,
	147, 716,
	148, 716,
	151, 716,
	152, 716,
	154, 716,
	157, 716,
	158, 716,
	159, 716,
	160, 716,
	161, 716,
	162, 716,
	163, 716,
	164, 716,
	166, 716,
	169, 716,
	170, 716,
	171, 716,
	173, 716,
	174, 716,
	175, 716,
	176, 716,
	177, 716,
	179, 716,
	180, 716,
	182, 716,
	184, 716,
	185, 716,
	188, 716,
	189, 716,
	192, 716,
	194, 716,
	196, 716,
	197, 716,
	198, 716,
	199, 716,
	200, 716,
	202, 716,
	203, 716,
	204, 716,
	205, 716,
	209, 716,
	210, 716,
	211, 716,
	212, 716,
	213, 716,
	215, 716,
	217, 716,
	218, 716,
	221, 716,
	222, 716,
	224, 716,
	226, 716,
	227, 716,
	228, 716,
	229, 716,
	230, 716,
	231, 716,
	232, 716,
	234, 716,
	235, 716,
	236, 716,
	237, 716,
	238, 716,
	240, 716,
	241, 716,
	242, 716,
	243, 716,
	244, 716,
	245, 716,
	246, 716,
	247, 716,
	249, 716,
	250, 716,
	251, 716,
	252, 716,
	253, 716,
	255, 716,
	256, 716,
	257, 716,
	258, 716,
	259, 716,
	260, 716,
	261, 716,
	263, 716,
	265, 716,
	266, 716,
	267, 716,
	268, 716,
	270, 716,
	271, 716,
	272, 716,
	273, 716,
	274, 716,
	276, 716,
	277, 716,
	278, 716,
	279, 716,
	280, 716,
	282, 716,
	283, 716,
	284, 716,
	285, 716,
	287, 716,
	288, 716,
	289, 716,
	290, 716,
	292, 716,
	293, 716,
	294, 716,
	295, 716,
	296, 716,
	297, 716,
	298, 716,
	299, 716,
	300, 716,
	301, 716,
	303, 716,
	305, 716,
	306, 716,
	307, 716,
	308, 716,
	309, 716,
	310, 716,
	311, 716,
	312, 716,
	314, 716,
	315, 716,
	316, 716,
	319, 716,
	320, 716,
	321, 716,
	322, 716,
	324, 716,
	325, 716,
	326, 716,
	327, 716,
	330, 716,
	331, 716,
	332, 716,
	333, 716,
	335, 716,
	337, 716,
	338, 716,
	339, 716,
	340, 716,
	341, 716,
	342, 716,
	345, 716,
	350, 716,
	351, 716,
	352, 716,
	353, 716,
	354, 716,
	-2, 0,
	-1, 124,
	1, 679,
	216, 679,
	262, 679,
	378, 679,
	380, 679,
	382, 679,
	383, 679,
	-2, 688,
	-1, 129,
	1, 613,
	169, 613,
	240, 613,
	244, 613,
	382, 613,
	383, 613,
	-2, 0,
	-1, 131,
	1, 613,
	382, 613,
	383, 613,
	-2, 0,
	-1, 132,
	1, 613,
	382, 613,
	383, 613,
	-2, 0,
	-1, 133,
	1, 617,
	382, 617,
	383, 617,
	-2, 0,
	-1, 140,
	4, 722,
	5, 722,
	6, 722,
	7, 722,
	8, 722,
	9, 722,
	20, 722,
	21, 722,
	23, 722,
	28, 722,
	29, 722,
	33, 722,
	34, 722,
	35, 722,
	36, 722,
	37, 722,
	38, 722,
	39, 722,
	40, 722,
	41, 722,
	42, 722,
	44, 722,
	45, 722,
	46, 722,
	47, 722,
	48, 722,
	49, 722,
	50, 722,
	51, 722,
	52, 722,
	53, 722,
	55, 722,
	56, 722,
	58, 722,
	60, 722,
	61, 722,
	62, 722,
	64, 722,
	65, 722,
	66, 722,
	67, 722,
	69, 722,
	71, 722,
	72, 722,
	74, 722,
	75, 722,
	76, 722,
	77, 722,
	79, 722,
	80, 722,
	81, 722,
	83, 722,
	84, 722,
	85, 722,
	86, 722,
	87, 722,
	88, 722,
	89, 722,
	90, 722,
	91, 722,
	92, 722,
	94, 722,
	96, 722,
	98, 722,
	101, 722,
	102, 722,
	104, 722,
	108, 722,
	109, 722,
	110, 722,
	111, 722,
	112, 722,
	113, 722,
	114, 722,
	115, 722,
	116, 722,
	122, 722,
	123, 722,
	124, 722,
	125, 722,
	126, 722,
	128, 722,
	130, 722,
	133, 722,
	135, 722,
	136, 722,
	138, 722,
	141, 722,
	142, 722,
	145, 722,
	146, 722,
	147, 722,
	148, 722,
	149, 722,
	151, 722,
	152, 722,
	154, 722,
	156, 722,
	157, 722,
	158, 722,
	159, 722,
	160, 722,
	161, 722,
	162, 722,
	163, 722,
	164, 722,
	166, 722,
	168, 722,
	169, 722,
	170, 722,
	171, 722,
	172, 722,
	173, 722,
	174, 722,
	175, 722,
	176, 722,
	177, 722,
	179, 722,
	180, 722,
	182, 722,
	183, 722,
	184, 722,
	185, 722,
	186, 722,
	188, 722,
	189, 722,
	192, 722,
	194, 722,
	195, 722,
	196, 722,
	197, 722,
	198, 722,
	199, 722,
	200, 722,
	201, 722,
	202, 722,
	203, 722,
	204, 722,
	205, 722,
	206, 722,
	208, 722,
	209, 722,
	210, 722,
	211, 722,
	212, 722,
	213, 722,
	215, 722,
	218, 722,
	221, 722,
	222, 722,
	223, 722,
	224, 722,
	225, 722,
	226, 722,
	227, 722,
	228, 722,
	229, 722,
	230, 722,
	231, 722,
	232, 722,
	234, 722,
	235, 722,
	236, 722,
	237, 722,
	238, 722,
	240, 722,
	241, 722,
	242, 722,
	243, 722,
	244, 722,
	245, 722,
	246, 722,
	247, 722,
	249, 722,
	250, 722,
	251, 722,
	252, 722,
	253, 722,
	255, 722,
	256, 722,
	257, 722,
	258, 722,
	259, 722,
	260, 722,
	261, 722,
	263, 722,
	264, 722,
	265, 722,
	266, 722,
	267, 722,
	268, 722,
	270, 722,
	271, 722,
	272, 722,
	273, 722,
	274, 722,
	276, 722,
	277, 722,
	278, 722,
	279, 722,
	280, 722,
	281, 722,
	282, 722,
	283, 722,
	284, 722,
	285, 722,
	286, 722,
	287, 722,
	288, 722,
	289, 722,
	290, 722,
	292, 722,
	293, 722,
	294, 722,
	295, 722,
	296, 722,
	297, 722,
	298, 722,
	299, 722,
	300, 722,
	301, 722,
	303, 722,
	305, 722,
	306, 722,
	307, 722,
	308, 722,
	309, 722,
	310, 722,
	311, 722,
	312, 722,
	314, 722,
	315, 722,
	316, 722,
	319, 722,
	320, 722,
	321, 722,
	322, 722,
	323, 722,
	324, 722,
	325, 722,
	326, 722,
	327, 722,
	330, 722,
	331, 722,
	332, 722,
	333, 722,
	334, 722,
	335, 722,
	337, 722,
	338, 722,
	339, 722,
	340, 722,
	341, 722,
	342, 722,
	345, 722,
	350, 722,
	351, 722,
	352, 722,
	353, 722,
	354, 722,
	355, 722,
	365, 722,
	370, 722,
	371, 722,
	372, 722,
	379, 722,
	385, 722,
	-2, 0,
	-1, 143,
	1, 54,
	383, 54,
	-2, 714,
	-1, 516,
	132, 1336,
	317, 1336,
	360, 1336,
	381, 1336,
	-2, 0,
	-1, 517,
	132, 1283,
	317, 1283,
	360, 1283,
	381, 1283,
	-2, 0,
	-1, 519,
	132, 1396,
	317, 1396,
	360, 1396,
	381, 1396,
	-2, 0,
	-1, 521,
	132, 1419,
	317, 1419,
	360, 1419,
	381, 1419,
	-2, 0,
	-1, 528,
	132, 1341,
	317, 1341,
	360, 1341,
	381, 1341,
	-2, 333,
	-1, 554,
	1, 411,
	378, 411,
	380, 411,
	382, 411,
	383, 411,
	-2, 0,
	-1, 555,
	1, 463,
	129, 463,
	378, 463,
	380, 463,
	382, 463,
	383, 463,
	-2, 0,
	-1, 561,
	1, 425,
	378, 425,
	380, 425,
	382, 425,
	383, 425,
	-2, 0,
	-1, 563,
	1, 429,
	378, 429,
	380, 429,
	382, 429,
	383, 429,
	-2, 0,
	-1, 566,
	1, 437,
	378, 437,
	380, 437,
	382, 437,
	383, 437,
	-2, 0,
	-1, 567,
	1, 442,
	378, 442,
	380, 442,
	382, 442,
	383, 442,
	-2, 0,
	-1, 570,
	1, 452,
	378, 452,
	380, 452,
	382, 452,
	383, 452,
	-2, 0,
	-1, 586,
	117, 724,
	129, 724,
	187, 724,
	214, 724,
	-2, 683,
	-1, 589,
	117, 723,
	129, 723,
	187, 723,
	214, 723,
	-2, 680,
	-1, 646,
	379, 1261,
	-2, 1254,
	-1, 647,
	379, 1262,
	-2, 1255,
	-1, 653,
	5, 908,
	379, 908,
	-2, 1471,
	-1, 678,
	5, 867,
	-2, 1440,
	-1, 679,
	5, 902,
	379, 902,
	-2, 1442,
	-1, 680,
	5, 877,
	-2, 1443,
	-1, 681,
	5, 876,
	-2, 1444,
	-1, 682,
	5, 902,
	379, 902,
	-2, 1447,
	-1, 683,
	5, 902,
	379, 902,
	-2, 1448,
	-1, 684,
	5, 903,
	-2, 1451,
	-1, 685,
	5, 859,
	-2, 1452,
	-1, 686,
	5, 859,
	-2, 1453,
	-1, 687,
	5, 884,
	-2, 1457,
	-1, 688,
	5, 869,
	-2, 1458,
	-1, 689,
	5, 870,
	-2, 1459,
	-1, 690,
	5, 860,
	-2, 1465,
	-1, 691,
	5, 861,
	-2, 1466,
	-1, 692,
	5, 862,
	-2, 1467,
	-1, 693,
	5, 863,
	-2, 1468,
	-1, 694,
	5, 864,
	-2, 1469,
	-1, 695,
	5, 865,
	-2, 1470,
	-1, 696,
	5, 859,
	-2, 1477,
	-1, 697,
	5, 868,
	-2, 1482,
	-1, 698,
	5, 866,
	-2, 1485,
	-1, 699,
	5, 900,
	379, 900,
	-2, 1487,
	-1, 700,
	5, 904,
	-2, 1490,
	-1, 701,
	5, 906,
	-2, 1491,
	-1, 702,
	5, 899,
	379, 899,
	-2, 1496,
	-1, 887,
	230, 712,
	-2, 557,
	-1, 891,
	216, 1258,
	-2, 0,
	-1, 926,
	1, 216,
	378, 216,
	380, 216,
	382, 216,
	383, 216,
	-2, 687,
	-1, 933,
	4, 1495,
	10, 1495,
	11, 1495,
	13, 1495,
	14, 1495,
	15, 1495,
	16, 1495,
	17, 1495,
	18, 1495,
	20, 1495,
	21, 1495,
	23, 1495,
	26, 1495,
	28, 1495,
	30, 1495,
	33, 1495,
	34, 1495,
	35, 1495,
	36, 1495,
	37, 1495,
	38, 1495,
	39, 1495,
	40, 1495,
	41, 1495,
	42, 1495,
	44, 1495,
	45, 1495,
	46, 1495,
	47, 1495,
	48, 1495,
	51, 1495,
	52, 1495,
	53, 1495,
	55, 1495,
	56, 1495,
	57, 1495,
	60, 1495,
	61, 1495,
	62, 1495,
	63, 1495,
	64, 1495,
	65, 1495,
	66, 1495,
	67, 1495,
	69, 1495,
	70, 1495,
	71, 1495,
	72, 1495,
	74, 1495,
	75, 1495,
	76, 1495,
	77, 1495,
	85, 1495,
	86, 1495,
	87, 1495,
	88, 1495,
	89, 1495,
	90, 1495,
	91, 1495,
	92, 1495,
	94, 1495,
	96, 1495,
	98, 1495,
	101, 1495,
	102, 1495,
	104, 1495,
	108, 1495,
	109, 1495,
	110, 1495,
	111, 1495,
	112, 1495,
	113, 1495,
	114, 1495,
	118, 1495,
	119, 1495,
	120, 1495,
	121, 1495,
	122, 1495,
	123, 1495,
	124, 1495,
	125, 1495,
	126, 1495,
	127, 1495,
	128, 1495,
	130, 1495,
	133, 1495,
	135, 1495,
	136, 1495,
	138, 1495,
	141, 1495,
	142, 1495,
	145, 1495,
	146, 1495,
	147, 1495,
	148, 1495,
	149, 1495,
	150, 1495,
	151, 1495,
	152, 1495,
	154, 1495,
	156, 1495,
	157, 1495,
	158, 1495,
	159, 1495,
	160, 1495,
	161, 1495,
	162, 1495,
	163, 1495,
	164, 1495,
	166, 1495,
	168, 1495,
	169, 1495,
	170, 1495,
	171, 1495,
	172, 1495,
	173, 1495,
	174, 1495,
	175, 1495,
	176, 1495,
	177, 1495,
	179, 1495,
	180, 1495,
	182, 1495,
	183, 1495,
	184, 1495,
	185, 1495,
	186, 1495,
	188, 1495,
	189, 1495,
	192, 1495,
	193, 1495,
	194, 1495,
	196, 1495,
	197, 1495,
	198, 1495,
	199, 1495,
	200, 1495,
	201, 1495,
	202, 1495,
	203, 1495,
	204, 1495,
	205, 1495,
	209, 1495,
	210, 1495,
	211, 1495,
	212, 1495,
	213, 1495,
	215, 1495,
	218, 1495,
	219, 1495,
	221, 1495,
	222, 1495,
	224, 1495,
	226, 1495,
	227, 1495,
	228, 1495,
	229, 1495,
	230, 1495,
	231, 1495,
	232, 1495,
	234, 1495,
	235, 1495,
	236, 1495,
	237, 1495,
	238, 1495,
	240, 1495,
	241, 1495,
	242, 1495,
	243, 1495,
	244, 1495,
	245, 1495,
	246, 1495,
	247, 1495,
	249, 1495,
	250, 1495,
	251, 1495,
	252, 1495,
	253, 1495,
	254, 1495,
	255, 1495,
	256, 1495,
	257, 1495,
	258, 1495,
	259, 1495,
	260, 1495,
	261, 1495,
	263, 1495,
	264, 1495,
	265, 1495,
	266, 1495,
	267, 1495,
	268, 1495,
	269, 1495,
	270, 1495,
	271, 1495,
	272, 1495,
	273, 1495,
	274, 1495,
	276, 1495,
	277, 1495,
	278, 1495,
	279, 1495,
	280, 1495,
	282, 1495,
	283, 1495,
	284, 1495,
	285, 1495,
	286, 1495,
	287, 1495,
	288, 1495,
	289, 1495,
	290, 1495,
	292, 1495,
	293, 1495,
	294, 1495,
	295, 1495,
	296, 1495,
	297, 1495,
	298, 1495,
	299, 1495,
	300, 1495,
	301, 1495,
	303, 1495,
	305, 1495,
	306, 1495,
	307, 1495,
	308, 1495,
	309, 1495,
	310, 1495,
	311, 1495,
	312, 1495,
	314, 1495,
	315, 1495,
	316, 1495,
	319, 1495,
	320, 1495,
	321, 1495,
	322, 1495,
	324, 1495,
	325, 1495,
	326, 1495,
	327, 1495,
	330, 1495,
	331, 1495,
	332, 1495,
	333, 1495,
	335, 1495,
	337, 1495,
	338, 1495,
	339, 1495,
	340, 1495,
	341, 1495,
	342, 1495,
	345, 1495,
	350, 1495,
	351, 1495,
	352, 1495,
	353, 1495,
	354, 1495,
	355, 1495,
	356, 1495,
	358, 1495,
	359, 1495,
	360, 1495,
	361, 1495,
	362, 1495,
	363, 1495,
	364, 1495,
	365, 1495,
	367, 1495,
	368, 1495,
	369, 1495,
	370, 1495,
	371, 1495,
	372, 1495,
	373, 1495,
	374, 1495,
	375, 1495,
	377, 1495,
	380, 1495,
	381, 1495,
	384, 1495,
	385, 1495,
	-2, 0,
	-1, 946,
	132, 1396,
	317, 1396,
	360, 1396,
	381, 1396,
	-2, 0,
	-1, 963,
	132, 1419,
	317, 1419,
	360, 1419,
	381, 1419,
	-2, 0,
	-1, 964,
	169, 625,
	240, 625,
	244, 625,
	-2, 321,
	-1, 1036,
	117, 723,
	129, 723,
	187, 723,
	214, 723,
	-2, 684,
	-1, 1117,
	107, 689,
	117, 689,
	129, 689,
	165, 689,
	187, 689,
	214, 689,
	220, 689,
	328, 689,
	-2, 1037,
	-1, 1127,
	379, 1238,
	-2, 1226,
	-1, 1145,
	380, 1150,
	-2, 0,
	-1, 1169,
	169, 625,
	240, 625,
	244, 625,
	-2, 620,
	-1, 1197,
	380, 1150,
	-2, 0,
	-1, 1201,
	107, 689,
	117, 689,
	129, 689,
	165, 689,
	187, 689,
	214, 689,
	220, 689,
	328, 689,
	-2, 790,
	-1, 1343,
	169, 625,
	240, 625,
	244, 625,
	-2, 323,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 943,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 944,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 945,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 946,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 947,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 948,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 949,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 950,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 959,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 960,
	-1, 1469,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 961,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 966,
	-1, 1478,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 968,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 972,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 973,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 974,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 975,
	-1, 1552,
	132, 1161,
	379, 1261,
	-2, 1254,
	-1, 1553,
	132, 1162,
	-2, 1436,
	-1, 1554,
	132, 1163,
	-2, 1340,
	-1, 1555,
	132, 1164,
	-2, 1301,
	-1, 1556,
	132, 1165,
	-2, 1318,
	-1, 1557,
	132, 1166,
	-2, 1339,
	-1, 1558,
	132, 1167,
	-2, 1393,
	-1, 1634,
	1, 791,
	74, 791,
	107, 791,
	117, 791,
	129, 791,
	133, 791,
	137, 791,
	139, 791,
	156, 791,
	165, 791,
	172, 791,
	183, 791,
	187, 791,
	201, 791,
	214, 791,
	216, 791,
	220, 791,
	262, 791,
	264, 791,
	328, 791,
	336, 791,
	347, 791,
	348, 791,
	357, 791,
	378, 791,
	380, 791,
	382, 791,
	383, 791,
	384, 791,
	-2, 790,
	-1, 1782,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 967,
	-1, 1783,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 969,
	-1, 1788,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 970,
	-1, 1806,
	225, 1121,
	-2, 1123,
	-1, 2038,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 971,
	-1, 2043,
	168, 0,
	-2, 987,
	-1, 2052,
	225, 1122,
	-2, 1124,
	-1, 2094,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1014,
	-1, 2095,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1015,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1016,
	-1, 2100,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1020,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1021,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1022,
	-1, 2238,
	168, 0,
	-2, 988,
	-1, 2241,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 991,
	-1, 2242,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 993,
	-1, 2365,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 992,
	-1, 2366,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 994,
	-1, 2373,
	168, 0,
	-2, 1023,
	-1, 2452,
	168, 0,
	-2, 1024,
	-1, 2534,
	36, 0,
	149, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 1439,
	-1, 2620,
	379, 1507,
	-2, 498,
}

const sqlPrivate = 57344

const sqlLast = 44312

var sqlAct = [...]int{

	647, 2602, 2616, 2600, 2333, 2332, 2617, 2187, 2542, 2533,
	2583, 2506, 2543, 2399, 1700, 2544, 2016, 1708, 2343, 2071,
	1241, 2457, 1337, 2197, 1776, 2532, 2306, 2153, 2226, 1283,
	73, 590, 2292, 1680, 1248, 751, 606, 2219, 1629, 1982,
	2221, 2379, 182, 1697, 1679, 881, 2272, 182, 1990, 984,
	637, 1338, 1920, 623, 1684, 182, 1872, 2154, 778, 2213,
	1199, 1195, 1899, 1647, 182, 645, 1709, 1244, 1178, 182,
	182, 644, 1984, 182, 1673, 1683, 182, 1817, 1630, 1907,
	458, 1638, 598, 123, 182, 2124, 1755, 1430, 1123, 1871,
	1368, 1507, 967, 1508, 473, 26, 1207, 1532, 1237, 1179,
	1209, 1581, 617, 527, 1516, 1495, 1041, 1492, 1364, 757,
	1408, 916, 1425, 1406, 966, 1155, 455, 1284, 1159, 1681,
	1526, 1772, 906, 913, 927, 986, 1702, 1687, 760, 1616,
	1603, 739, 507, 1186, 1112, 182, 182, 1548, 616, 524,
	1042, 1409, 124, 182, 1367, 1407, 1169, 123, 639, 1255,
	520, 173, 125, 485, 903, 178, 737, 595, 1168, 548,
	2307, 1046, 2138, 1805, 2334, 2139, 1263, 1263, 1263, 182,
	182, 182, 182, 780, 1196, 2633, 2632, 182, 182, 2626,
	2626, 2625, 594, 2334, 2579, 2626, 1701, 2578, 1232, 1204,
	2577, 1232, 2559, 2554, 1232, 2553, 2305, 1723, 2550, 1723,
	2530, 2529, 1232, 589, 1738, 1738, 2501, 2036, 2496, 2495,
	1731, 869, 1232, 2357, 41, 2000, 2491, 594, 2483, 604,
	1232, 499, 2305, 1999, 2454, 2430, 123, 44, 1731, 2305,
	1605, 1842, 1843, 2427, 1860, 1861, 1862, 1232, 26, 2425,
	2410, 2409, 2387, 2305, 1232, 2305, 1232, 2384, 2367, 2328,
	2326, 1232, 1731, 1723, 1723, 2304, 2285, 2240, 2212, 2305,
	1232, 1731, 1678, 2207, 2134, 2047, 587, 1678, 2135, 1723,
	1674, 2010, 1228, 1971, 1809, 1972, 586, 1232, 765, 769,
	1810, 1674, 2638, 775, 1857, 1842, 1843, 599, 2624, 1896,
	1889, 480, 741, 1232, 1890, 1842, 1843, 2127, 1887, 1886,
	1885, 1723, 1723, 1723, 1723, 40, 1742, 1730, 1738, 1722,
	1723, 1731, 2502, 1723, 1057, 1058, 41, 1677, 1610, 2634,
	1276, 1678, 1609, 1738, 1277, 66, 1261, 2361, 743, 44,
	744, 2357, 754, 2127, 1604, 2027, 1636, 1060, 2613, 2107,
	2049, 1232, 1842, 1843, 1972, 1775, 1723, 1753, 1848, 1346,
	1173, 1705, 1511, 867, 948, 51, 143, 2308, 945, 944,
	943, 1059, 942, 941, 183, 940, 1057, 1058, 140, 1087,
	1088, 1089, 1097, 1098, 1099, 939, 938, 937, 1264, 1264,
	1264, 1816, 1090, 936, 62, 1365, 935, 934, 745, 1060,
	742, 63, 1101, 480, 64, 1857, 580, 142, 579, 578,
	546, 545, 1848, 544, 543, 542, 541, 540, 539, 538,
	537, 67, 1848, 1059, 1858, 140, 536, 535, 534, 1079,
	182, 533, 182, 182, 532, 182, 1076, 66, 531, 530,
	182, 1065, 515, 514, 141, 513, 182, 512, 127, 69,
	511, 70, 446, 445, 142, 444, 1057, 1058, 443, 182,
	182, 182, 182, 182, 442, 140, 427, 426, 930, 1848,
	418, 417, 479, 416, 415, 103, 408, 1999, 1858, 1060,
	1842, 1843, 126, 597, 1082, 1083, 1084, 1085, 1858, 407,
	182, 141, 1604, 1065, 142, 166, 920, 165, 595, 134,
	1859, 164, 163, 1059, 182, 162, 135, 1080, 161, 1057,
	1058, 1545, 1269, 1262, 1399, 1094, 1102, 160, 159, 158,
	182, 157, 156, 67, 1529, 155, 154, 153, 152, 126,
	182, 141, 1060, 885, 1100, 1858, 889, 151, 150, 134,
	149, 148, 147, 140, 146, 145, 135, 781, 144, 873,
	127, 69, 1092, 70, 1859, 905, 1059, 1915, 1371, 1080,
	1543, 930, 909, 909, 1859, 1541, 1539, 140, 979, 126,
	1200, 1757, 142, 1065, 479, 2606, 1530, 103, 2604, 2549,
	2531, 2516, 910, 1081, 880, 1091, 2511, 703, 2449, 1854,
	1855, 1856, 182, 928, 1053, 2428, 142, 1848, 1853, 1851,
	1852, 1844, 1845, 1846, 1847, 1849, 1850, 949, 2362, 141,
	2271, 1859, 982, 2601, 2350, 2270, 2266, 134, 2265, 2258,
	1086, 2257, 2256, 2252, 135, 2251, 1065, 2250, 1037, 977,
	1531, 1528, 2249, 141, 2243, 1081, 2218, 2121, 2116, 1509,
	2115, 134, 2114, 2057, 1970, 1927, 1923, 1704, 135, 1974,
	1894, 1891, 1095, 1851, 1852, 1844, 1845, 1846, 1847, 1849,
	1850, 1879, 595, 1842, 1843, 1844, 1845, 1846, 1847, 1849,
	1850, 126, 1503, 1870, 1036, 1057, 1058, 1841, 964, 1838,
	961, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	1280, 873, 1080, 1842, 1843, 1837, 1835, 1822, 1060, 1821,
	1806, 1032, 1634, 1053, 752, 1131, 1052, 878, 1533, 1853,
	1851, 1852, 1844, 1845, 1846, 1847, 1849, 1850, 1124, 980,
	1115, 1093, 1059, 2627, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 2611, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 1038, 2591, 2590, 1198, 1039, 182, 1247, 182,
	2267, 587, 1197, 2073, 2521, 2520, 140, 2519, 1366, 1771,
	782, 586, 2486, 2623, 1049, 1050, 2478, 1770, 1081, 2477,
	1054, 2468, 182, 182, 2466, 2442, 2441, 2349, 2440, 2396,
	1848, 2375, 1842, 1843, 1504, 142, 2358, 1527, 2337, 2325,
	1177, 2311, 1065, 2263, 2195, 2193, 2192, 2190, 2162, 2161,
	1184, 2142, 595, 1127, 1275, 2130, 1057, 1058, 1157, 1158,
	1848, 2042, 1960, 1736, 1954, 1161, 1061, 1062, 1063, 1064,
	1066, 1067, 141, 2014, 1940, 1164, 1182, 1939, 1925, 1060,
	134, 1895, 931, 1869, 1831, 1830, 1827, 135, 1802, 1797,
	1844, 1845, 1846, 1847, 1849, 1850, 1858, 1497, 1160, 123,
	1163, 1621, 1593, 1059, 1537, 1240, 640, 1057, 1058, 753,
	126, 1176, 1167, 1153, 1152, 1151, 1150, 1068, 1069, 1061,
	1062, 1063, 1064, 1066, 1067, 1940, 1858, 930, 182, 1172,
	1060, 1149, 1148, 1194, 780, 1147, 1146, 1145, 2460, 1544,
	182, 1144, 1143, 1142, 1141, 1140, 1170, 1139, 1138, 1848,
	1202, 1137, 182, 1136, 1059, 1174, 1135, 1128, 182, 1116,
	182, 1115, 182, 960, 952, 924, 182, 2356, 2245, 2217,
	1246, 2137, 1859, 1065, 2133, 931, 1808, 1622, 1230, 1733,
	1913, 1842, 1843, 608, 1124, 1217, 1239, 2012, 1542, 1113,
	1198, 1741, 1233, 1540, 1538, 1985, 1200, 2360, 2359, 2353,
	976, 2140, 1859, 2001, 879, 1165, 1674, 182, 182, 1035,
	1166, 1030, 1963, 1957, 930, 2363, 182, 1953, 1893, 182,
	1252, 2017, 1892, 1781, 1403, 973, 1352, 1133, 1245, 610,
	1763, 2380, 1701, 2074, 1740, 1517, 1813, 1156, 2609, 1080,
	780, 1024, 1210, 1210, 1211, 1211, 1281, 1529, 2608, 182,
	1995, 2149, 2514, 447, 182, 1727, 1210, 2490, 1211, 182,
	182, 2575, 182, 2574, 182, 1410, 182, 905, 182, 1648,
	1853, 1851, 1852, 1844, 1845, 1846, 1847, 1849, 1850, 182,
	2319, 1025, 432, 1231, 1743, 182, 182, 1063, 1064, 1066,
	1067, 732, 2024, 730, 182, 932, 1016, 2421, 1372, 1530,
	2420, 1640, 1852, 1844, 1845, 1846, 1847, 1849, 1850, 728,
	2173, 1257, 1254, 2418, 593, 1081, 182, 725, 486, 2417,
	780, 2181, 2178, 1212, 1212, 2146, 2331, 2145, 734, 1130,
	1826, 753, 1825, 1640, 1824, 1823, 1784, 1212, 451, 1597,
	1726, 491, 1639, 433, 1669, 1218, 1651, 487, 1665, 1662,
	1479, 1171, 1373, 1531, 1528, 866, 123, 961, 1340, 1278,
	2621, 1353, 1279, 1596, 1698, 1440, 1215, 1339, 1397, 1033,
	1343, 1226, 592, 167, 2185, 1057, 1058, 582, 1439, 488,
	1369, 2489, 1357, 2030, 1216, 974, 494, 1225, 932, 705,
	1387, 420, 1396, 1377, 1846, 1847, 1849, 1850, 1060, 1381,
	2186, 1382, 490, 1383, 450, 1384, 595, 1385, 1223, 1412,
	1380, 595, 1494, 1494, 1967, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 1059, 2401, 1391, 1393, 1224, 594, 975, 585,
	1235, 1533, 182, 1239, 182, 1431, 1438, 182, 989, 1404,
	1376, 2164, 1411, 1405, 2013, 1501, 1198, 1056, 182, 587,
	1499, 2527, 587, 587, 1650, 1429, 1258, 780, 170, 1421,
	182, 584, 1422, 1423, 182, 874, 876, 182, 1746, 573,
	1602, 182, 1067, 1514, 585, 182, 424, 1951, 1512, 1517,
	1748, 182, 959, 981, 1533, 573, 2566, 603, 182, 780,
	1208, 931, 1065, 182, 595, 1992, 2574, 1266, 781, 1576,
	1268, 182, 1749, 603, 1271, 1221, 1505, 1962, 182, 1502,
	1527, 1119, 441, 1023, 1747, 1624, 1623, 435, 434, 182,
	489, 182, 1956, 182, 171, 1641, 182, 1734, 182, 1490,
	182, 182, 436, 182, 182, 591, 1010, 1566, 930, 2029,
	1559, 1034, 182, 1395, 1649, 1488, 1850, 1671, 1993, 2300,
	950, 1627, 574, 1652, 1654, 449, 954, 2023, 1080, 2171,
	1213, 1213, 2064, 1029, 1599, 1600, 1219, 1721, 574, 2067,
	2586, 1659, 2498, 1608, 1213, 1011, 492, 2593, 931, 1667,
	1618, 1619, 1614, 608, 1657, 452, 1773, 1774, 2301, 2471,
	1663, 1637, 1202, 2025, 1992, 448, 1154, 2499, 1644, 1670,
	2031, 2546, 1356, 1355, 781, 1365, 1362, 1263, 1794, 726,
	1703, 726, 1703, 1015, 172, 1185, 2065, 1344, 1398, 123,
	2227, 2165, 1693, 1729, 1792, 123, 1715, 727, 1484, 909,
	704, 909, 780, 965, 1081, 726, 1485, 1613, 1486, 2603,
	182, 1718, 1491, 736, 1707, 409, 735, 1533, 1716, 1222,
	1717, 2402, 2424, 1724, 1719, 970, 182, 182, 182, 2565,
	182, 1728, 1725, 928, 2601, 575, 1105, 1106, 1107, 1108,
	1109, 1735, 1737, 2371, 1189, 168, 1118, 990, 2334, 583,
	1020, 575, 1786, 1493, 781, 1110, 1126, 1829, 493, 182,
	1754, 1359, 2479, 419, 1533, 1617, 2547, 1192, 1161, 2228,
	1164, 2296, 594, 2297, 932, 1633, 1189, 1789, 2028, 1158,
	1157, 782, 2545, 1187, 1500, 169, 991, 1790, 425, 988,
	1744, 1795, 1375, 421, 1190, 2584, 971, 1045, 1055, 1192,
	972, 123, 1476, 422, 2299, 1061, 1062, 1063, 1064, 1066,
	1067, 2232, 1188, 2302, 437, 1615, 576, 2480, 997, 2573,
	2571, 1021, 2342, 1487, 504, 2548, 1190, 1909, 1695, 1044,
	1489, 955, 576, 958, 1331, 1758, 947, 2564, 1760, 1762,
	1966, 1040, 1044, 2412, 483, 2261, 1767, 2411, 1766, 577,
	2103, 1185, 2585, 2394, 970, 1769, 438, 1360, 595, 2594,
	2599, 932, 2463, 2148, 1936, 577, 2300, 2315, 1932, 2293,
	970, 1180, 1180, 1696, 2587, 1191, 1022, 1253, 608, 1242,
	2291, 1815, 1417, 410, 1274, 2295, 439, 782, 440, 1264,
	1921, 781, 2063, 2507, 2298, 486, 652, 2318, 2612, 1043,
	1390, 1347, 1791, 2198, 2317, 2301, 2344, 1191, 175, 1793,
	1189, 2395, 1043, 1787, 1785, 1474, 1477, 1942, 491, 1044,
	1341, 1910, 1941, 781, 487, 971, 1045, 1779, 2294, 972,
	1351, 1801, 595, 1192, 883, 882, 182, 780, 502, 1045,
	1612, 971, 182, 182, 1611, 972, 182, 1908, 1897, 1187,
	1812, 182, 1473, 1903, 182, 411, 488, 2104, 2262, 970,
	1190, 1418, 182, 2105, 1922, 592, 496, 782, 182, 182,
	182, 601, 931, 573, 182, 2598, 1904, 182, 1188, 490,
	2314, 1349, 902, 182, 182, 182, 182, 182, 891, 1043,
	900, 603, 1917, 182, 1350, 1902, 182, 2188, 2335, 1965,
	182, 2273, 2392, 2125, 478, 34, 1536, 724, 3, 182,
	1876, 1877, 1878, 1916, 477, 33, 1019, 2316, 2296, 182,
	2297, 182, 2374, 182, 602, 1926, 182, 2260, 1933, 1912,
	182, 2184, 998, 2393, 1898, 182, 1873, 182, 1366, 1363,
	2041, 1191, 1008, 1006, 182, 1004, 1968, 1002, 1000, 1836,
	1796, 2299, 1475, 1973, 1739, 1975, 574, 182, 930, 1676,
	2302, 1668, 1661, 1028, 1027, 595, 781, 1928, 2541, 930,
	182, 953, 707, 1874, 1040, 1764, 1388, 1379, 1134, 1535,
	1119, 476, 30, 1952, 1950, 868, 1997, 1229, 1519, 475,
	79, 1959, 2504, 1937, 2289, 2169, 2054, 489, 994, 608,
	608, 1551, 1551, 1564, 782, 2167, 501, 1584, 2147, 2009,
	182, 1588, 1589, 1591, 871, 872, 1976, 474, 78, 1979,
	2018, 1981, 471, 22, 1699, 1901, 1977, 706, 1014, 1290,
	1937, 1905, 1906, 1994, 495, 1911, 782, 1988, 1692, 729,
	731, 2298, 2002, 2008, 472, 23, 1018, 901, 34, 2435,
	1361, 649, 763, 492, 898, 899, 2019, 2044, 33, 1273,
	182, 2020, 2021, 470, 28, 1272, 2022, 1270, 1414, 575,
	1419, 1267, 1007, 1005, 2026, 1003, 1426, 1001, 999, 2011,
	2059, 2060, 2061, 469, 20, 932, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 2034, 1478,
	2032, 1480, 1481, 1482, 1483, 30, 2048, 2050, 993, 2053,
	1265, 467, 19, 79, 1290, 1290, 468, 18, 1506, 2075,
	1227, 182, 1220, 462, 15, 1118, 1214, 182, 600, 1983,
	576, 2077, 2066, 2068, 2069, 1013, 182, 182, 2109, 2080,
	2082, 78, 463, 16, 1546, 1547, 22, 1777, 1563, 1047,
	1575, 1577, 1582, 1585, 1586, 1587, 461, 14, 2575, 782,
	2355, 1431, 2078, 577, 897, 2136, 2354, 1370, 23, 2143,
	1431, 2083, 2110, 2108, 466, 12, 460, 10, 465, 7,
	748, 781, 2214, 182, 2126, 182, 2123, 28, 123, 464,
	6, 2183, 182, 481, 2141, 930, 2129, 1640, 2437, 2128,
	749, 2160, 1656, 2113, 459, 5, 1655, 20, 2194, 2206,
	182, 182, 2151, 1778, 2175, 2144, 2159, 2174, 2175, 2191,
	1640, 2179, 2158, 2208, 2175, 1420, 1048, 2182, 182, 1653,
	1672, 1664, 1660, 1401, 1402, 1765, 1057, 1058, 182, 2473,
	780, 182, 182, 2172, 2200, 2308, 2202, 780, 2211, 992,
	2203, 2451, 2423, 2003, 2004, 19, 2005, 2006, 2189, 1060,
	18, 1057, 1058, 2274, 2201, 503, 2199, 15, 1051, 1666,
	2234, 2204, 1658, 2210, 2503, 2340, 2209, 750, 1706, 1694,
	2215, 2597, 2239, 1059, 182, 1691, 16, 1601, 1342, 1282,
	2582, 2386, 1325, 1842, 1843, 1057, 1058, 2279, 2229, 2216,
	14, 2122, 931, 1751, 1750, 2235, 2070, 1751, 1059, 2015,
	2132, 1918, 1888, 931, 1752, 1598, 1595, 1594, 12, 1525,
	10, 1121, 7, 2247, 1567, 2062, 1978, 1131, 1129, 1026,
	1017, 1012, 1009, 6, 995, 957, 1345, 1800, 182, 581,
	2400, 182, 484, 1378, 1803, 996, 1914, 2259, 5, 1620,
	2497, 780, 182, 182, 2253, 1828, 182, 182, 182, 2456,
	2370, 1819, 1820, 1534, 1132, 55, 2156, 626, 622, 2290,
	2150, 1686, 1685, 182, 2277, 783, 1354, 648, 182, 1550,
	182, 1432, 182, 182, 182, 2276, 2284, 723, 650, 182,
	2283, 1287, 182, 2309, 782, 930, 651, 1325, 1325, 2312,
	1901, 2280, 1288, 182, 182, 2278, 2313, 1162, 638, 2281,
	930, 1868, 2288, 1285, 925, 412, 1710, 2330, 1584, 1584,
	1584, 1358, 2160, 1881, 1498, 1515, 1811, 1125, 2336, 618,
	630, 629, 1513, 2341, 951, 1919, 2338, 2159, 1991, 2348,
	1416, 1768, 1413, 2158, 1987, 2166, 423, 1839, 2339, 923,
	1573, 2160, 1565, 1561, 1031, 2347, 2160, 1183, 1111, 2346,
	1711, 978, 1998, 1732, 1175, 1424, 2159, 2352, 747, 746,
	2364, 2159, 2158, 2610, 1348, 1745, 1104, 2158, 1782, 1783,
	1103, 2345, 733, 2168, 1788, 2170, 2465, 969, 632, 968,
	2369, 1243, 1935, 2592, 2472, 2163, 2513, 139, 136, 138,
	182, 137, 182, 2376, 780, 182, 1964, 82, 32, 31,
	102, 758, 2351, 182, 101, 932, 1807, 100, 99, 780,
	98, 97, 1814, 96, 95, 1818, 932, 2275, 2383, 94,
	179, 93, 92, 1324, 91, 413, 90, 767, 771, 89,
	777, 2404, 1832, 428, 2406, 88, 87, 86, 85, 2385,
	84, 525, 453, 182, 2388, 522, 930, 497, 179, 931,
	182, 505, 2390, 1239, 510, 81, 2160, 80, 182, 182,
	930, 930, 529, 2403, 182, 2426, 1118, 2405, 29, 25,
	106, 2159, 24, 1582, 1582, 1582, 77, 2158, 76, 27,
	17, 182, 2175, 2436, 11, 2422, 182, 2434, 2160, 2438,
	2447, 21, 60, 182, 781, 2433, 2444, 2448, 2443, 1180,
	61, 781, 2450, 2159, 608, 2453, 59, 2467, 58, 2158,
	57, 2445, 2446, 740, 740, 13, 53, 2432, 182, 182,
	52, 413, 2461, 50, 2459, 182, 49, 2462, 1324, 1324,
	48, 47, 9, 930, 2469, 2429, 2484, 2414, 182, 2482,
	2470, 105, 930, 930, 2485, 2225, 45, 413, 413, 773,
	413, 2476, 8, 43, 42, 179, 870, 104, 2488, 118,
	115, 117, 1567, 1567, 2493, 2494, 114, 182, 116, 182,
	120, 595, 182, 119, 780, 112, 110, 1184, 111, 113,
	109, 108, 2487, 121, 39, 38, 37, 36, 35, 2,
	2522, 1, 1290, 2524, 2510, 0, 1989, 2523, 0, 0,
	0, 0, 2509, 182, 0, 781, 2528, 2526, 0, 0,
	2117, 0, 0, 0, 2525, 0, 0, 0, 2007, 1289,
	182, 182, 182, 2540, 2539, 2538, 0, 0, 182, 1290,
	0, 2558, 2515, 2551, 0, 608, 608, 2160, 1567, 1567,
	1567, 0, 182, 0, 2563, 2560, 2561, 2562, 608, 931,
	0, 0, 2159, 2555, 2556, 2557, 0, 2572, 2158, 2570,
	0, 0, 932, 2576, 931, 2033, 0, 0, 0, 0,
	1426, 0, 0, 2580, 0, 2581, 2037, 0, 1290, 2038,
	0, 0, 0, 0, 2177, 2589, 2588, 0, 2595, 0,
	2180, 2043, 2596, 0, 771, 0, 0, 0, 0, 0,
	2051, 0, 780, 0, 780, 0, 0, 782, 2055, 777,
	0, 2007, 0, 0, 782, 2614, 2615, 2622, 0, 0,
	0, 627, 74, 0, 1289, 1289, 2628, 0, 2629, 0,
	2631, 2079, 0, 2630, 0, 2081, 2637, 0, 2635, 2636,
	2639, 0, 0, 0, 1290, 0, 0, 2415, 2416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 781, 0,
	2605, 0, 2607, 0, 0, 0, 0, 0, 2111, 2112,
	0, 0, 0, 781, 0, 0, 0, 2118, 2119, 2120,
	1290, 1290, 0, 0, 0, 0, 74, 0, 0, 1290,
	1290, 0, 0, 0, 0, 1327, 0, 0, 529, 0,
	887, 529, 0, 892, 2131, 0, 0, 0, 895, 0,
	931, 0, 0, 0, 413, 0, 0, 0, 782, 0,
	0, 0, 1290, 0, 931, 931, 0, 529, 529, 413,
	917, 870, 0, 0, 2152, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 0, 588, 0, 0, 596, 0,
	1326, 0, 0, 0, 0, 1567, 1567, 0, 529, 0,
	0, 0, 932, 0, 759, 74, 0, 0, 0, 0,
	1798, 1799, 529, 0, 1286, 1325, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1180, 956, 0,
	0, 0, 0, 0, 0, 0, 608, 931, 529, 0,
	1327, 1327, 0, 0, 0, 0, 931, 931, 0, 0,
	0, 0, 1325, 0, 1567, 1567, 1567, 1567, 1567, 1567,
	1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
	1567, 1567, 1567, 0, 1567, 0, 2238, 0, 781, 0,
	2241, 2242, 0, 0, 2244, 482, 1865, 1866, 1867, 0,
	0, 2246, 0, 2248, 0, 1326, 1326, 0, 0, 0,
	413, 1325, 0, 0, 0, 483, 0, 0, 0, 2255,
	0, 782, 0, 0, 0, 0, 0, 0, 0, 1286,
	1286, 0, 0, 0, 0, 0, 782, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2264, 0, 2382, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 486, 0, 0, 0,
	758, 1205, 0, 932, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 932, 491,
	0, 2408, 0, 0, 0, 487, 0, 0, 0, 0,
	0, 0, 2310, 0, 0, 2419, 0, 0, 0, 0,
	0, 0, 0, 1325, 1325, 0, 781, 0, 781, 0,
	0, 0, 1325, 1325, 0, 0, 0, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1842, 1843, 0, 1860, 1861, 1862, 0, 0,
	490, 0, 0, 0, 0, 1325, 0, 0, 2237, 0,
	932, 0, 0, 0, 0, 510, 1324, 740, 0, 932,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2365, 2366, 0, 0, 0, 0, 0, 1238, 0,
	413, 413, 0, 0, 0, 1857, 0, 0, 0, 0,
	0, 782, 0, 1324, 0, 0, 771, 0, 1256, 0,
	1256, 0, 2378, 2039, 2040, 0, 0, 0, 2381, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 2500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 2517, 2518, 1848,
	1290, 0, 2413, 0, 0, 0, 0, 0, 489, 0,
	0, 0, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 0, 2106, 0, 0, 0, 179, 0, 0, 0,
	1863, 0, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 1324, 0,
	1251, 0, 1325, 0, 492, 1858, 413, 0, 413, 782,
	413, 782, 0, 0, 1259, 0, 0, 0, 0, 0,
	0, 2464, 1400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 1324, 0, 0, 0, 0,
	0, 0, 1289, 1324, 1324, 0, 0, 0, 0, 0,
	588, 0, 1290, 0, 0, 529, 179, 0, 0, 0,
	1567, 0, 0, 0, 179, 608, 0, 529, 0, 0,
	0, 1114, 0, 1117, 0, 0, 1324, 0, 0, 1289,
	1122, 1859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1842, 1843, 529, 1860, 1861,
	1862, 1567, 529, 0, 0, 0, 0, 179, 529, 0,
	529, 2236, 529, 0, 529, 0, 529, 0, 0, 0,
	0, 0, 0, 2537, 2537, 0, 0, 1389, 1289, 0,
	0, 0, 0, 529, 529, 0, 0, 0, 0, 2552,
	0, 0, 413, 0, 0, 0, 0, 0, 1857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2537,
	0, 0, 0, 0, 529, 0, 0, 0, 0, 0,
	1854, 1855, 1856, 0, 1567, 0, 758, 0, 0, 1853,
	1851, 1852, 1844, 1845, 1846, 1847, 1849, 1850, 0, 0,
	0, 0, 758, 0, 1289, 1635, 0, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 0, 2537, 74, 771,
	0, 0, 1848, 1201, 0, 0, 777, 0, 1327, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	1289, 1289, 0, 0, 0, 0, 2618, 0, 0, 1289,
	1289, 0, 0, 1324, 0, 0, 0, 1712, 2618, 0,
	0, 2618, 2618, 1863, 0, 1327, 0, 0, 777, 777,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 1326, 0, 0, 0, 0, 1858, 1325,
	510, 0, 740, 0, 0, 870, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 1286, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 1632, 0,
	1326, 0, 413, 0, 0, 413, 0, 0, 0, 1645,
	0, 0, 0, 413, 0, 0, 0, 0, 0, 413,
	0, 0, 0, 0, 1286, 1325, 413, 0, 0, 0,
	0, 1675, 0, 0, 0, 0, 0, 0, 0, 1682,
	0, 0, 0, 0, 1859, 0, 870, 0, 0, 1326,
	0, 0, 0, 0, 0, 0, 0, 413, 2373, 1714,
	1327, 529, 0, 0, 529, 0, 529, 0, 413, 413,
	0, 1720, 870, 1286, 1759, 777, 1761, 0, 771, 0,
	1645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 1327, 0, 2397,
	0, 0, 0, 0, 0, 1327, 1327, 1780, 0, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	0, 0, 0, 1854, 1855, 1856, 0, 0, 1327, 1286,
	0, 0, 1853, 1851, 1852, 1844, 1845, 1846, 1847, 1849,
	1850, 1326, 1326, 40, 1324, 74, 0, 0, 0, 0,
	1326, 1326, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 2452, 0, 0, 1286, 1286, 44, 1756, 0,
	0, 0, 0, 0, 1286, 1286, 0, 0, 588, 0,
	0, 588, 588, 1326, 413, 413, 413, 0, 413, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 63,
	0, 480, 64, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	0, 0, 1117, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 0,
	758, 758, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1955, 0, 0, 0, 1201, 0, 0, 0, 0,
	1289, 0, 0, 0, 0, 0, 0, 1969, 74, 0,
	1326, 67, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 1980, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 1286, 0, 0, 0, 127, 69,
	0, 70, 1238, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 413, 140, 1289, 0, 0, 1386,
	413, 413, 479, 0, 413, 103, 0, 0, 74, 1632,
	0, 0, 1632, 0, 74, 0, 0, 0, 0, 0,
	1924, 0, 0, 0, 142, 0, 413, 1930, 1931, 0,
	0, 0, 1645, 0, 0, 1938, 0, 0, 0, 0,
	0, 1943, 1944, 1946, 1948, 1949, 0, 0, 2035, 0,
	0, 413, 1289, 0, 1958, 0, 0, 0, 1961, 0,
	0, 141, 0, 0, 0, 0, 0, 413, 0, 134,
	0, 0, 0, 0, 0, 0, 135, 1251, 0, 1251,
	0, 529, 0, 0, 413, 0, 0, 0, 1986, 0,
	0, 0, 0, 413, 0, 1996, 0, 0, 0, 126,
	0, 0, 413, 0, 0, 0, 0, 1842, 1843, 0,
	1860, 1861, 1862, 0, 0, 1756, 1327, 0, 0, 0,
	74, 0, 0, 2046, 0, 0, 0, 0, 1756, 0,
	0, 0, 0, 0, 0, 0, 1057, 1058, 0, 1087,
	1088, 1089, 1097, 1098, 1099, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 1060,
	1857, 0, 1101, 0, 0, 0, 0, 0, 413, 0,
	0, 1326, 1327, 0, 0, 0, 0, 0, 456, 758,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 1286, 1076, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	41, 0, 0, 0, 0, 0, 0, 0, 2072, 0,
	0, 0, 0, 44, 1848, 0, 0, 1326, 1327, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1083, 1084, 1085, 0, 51,
	0, 1286, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1863, 0, 0, 1712, 758,
	0, 0, 0, 0, 0, 1094, 1102, 0, 62, 0,
	0, 0, 0, 1326, 0, 63, 0, 480, 64, 0,
	1858, 0, 0, 0, 1100, 0, 0, 0, 0, 413,
	2231, 0, 0, 1117, 0, 1632, 0, 1286, 0, 0,
	0, 0, 1092, 0, 870, 1632, 0, 0, 0, 1080,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 2155,
	0, 0, 0, 0, 0, 0, 0, 759, 0, 0,
	0, 0, 2176, 759, 759, 1091, 2176, 759, 0, 0,
	0, 0, 2176, 0, 0, 0, 0, 0, 0, 0,
	0, 1645, 0, 1251, 0, 0, 1859, 0, 0, 0,
	2196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 413, 413,
	74, 0, 0, 0, 0, 1081, 758, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 2222, 67, 0, 0,
	0, 0, 1095, 0, 0, 0, 2224, 0, 0, 2230,
	413, 0, 0, 74, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 127, 69, 596, 70, 0, 0,
	2322, 0, 0, 0, 0, 0, 0, 2327, 0, 0,
	0, 140, 0, 0, 0, 1854, 1855, 1856, 479, 0,
	0, 103, 2254, 0, 1853, 1851, 1852, 1844, 1845, 1846,
	1847, 1849, 1850, 0, 0, 0, 0, 0, 0, 0,
	142, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 0, 1057, 1058, 0, 0,
	1884, 0, 0, 0, 0, 0, 413, 141, 0, 870,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 1060,
	1632, 870, 135, 0, 2286, 2287, 1645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2155, 870, 0, 1059, 0, 457, 2320, 0, 2321, 1079,
	413, 2323, 2324, 0, 0, 0, 0, 413, 0, 0,
	2329, 2398, 0, 0, 0, 0, 0, 0, 0, 2155,
	0, 870, 1682, 0, 2155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098,
	1099, 2431, 0, 0, 1082, 1083, 1084, 1085, 1090, 0,
	0, 0, 0, 1065, 0, 1060, 0, 74, 1101, 0,
	0, 1842, 1843, 0, 1860, 1861, 1862, 0, 0, 0,
	0, 0, 759, 0, 0, 0, 0, 2045, 0, 1059,
	0, 0, 0, 1057, 1058, 1079, 0, 0, 0, 1097,
	1098, 1099, 1076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 1645, 1101,
	2389, 0, 0, 2391, 1857, 0, 0, 0, 0, 1080,
	0, 413, 0, 2481, 2155, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	1082, 1083, 1084, 1085, 0, 0, 0, 0, 0, 1065,
	2176, 0, 0, 0, 0, 0, 2155, 0, 0, 0,
	0, 413, 759, 0, 0, 0, 0, 0, 870, 0,
	2512, 1094, 1102, 0, 0, 0, 2222, 2222, 1848, 0,
	1086, 0, 870, 0, 0, 0, 0, 0, 0, 0,
	1100, 1082, 1083, 1084, 1085, 1081, 0, 0, 0, 2458,
	1065, 0, 0, 0, 1632, 0, 0, 0, 1092, 0,
	0, 1251, 0, 0, 0, 1080, 0, 0, 0, 1863,
	0, 0, 1094, 1102, 0, 0, 1712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2474, 2475, 0, 0,
	0, 1091, 0, 413, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2492, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 2508, 0, 870, 0, 759,
	413, 1081, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 2155, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1859, 2458, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 870,
	870, 0, 1081, 0, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	2569, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 1883, 0, 0, 1854,
	1855, 1856, 0, 0, 0, 0, 0, 0, 1853, 1851,
	1852, 1844, 1845, 1846, 1847, 1849, 1850, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	779, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2439, 184, 185, 785, 186,
	786, 787, 788, 789, 348, 790, 791, 792, 793, 187,
	188, 189, 349, 350, 351, 352, 190, 353, 354, 794,
	191, 355, 356, 192, 193, 795, 796, 357, 358, 359,
	797, 194, 360, 798, 784, 799, 195, 196, 197, 0,
	199, 200, 201, 198, 800, 202, 0, 203, 204, 801,
	708, 205, 206, 207, 802, 803, 805, 804, 806, 807,
	808, 208, 209, 414, 210, 361, 211, 362, 363, 809,
	212, 810, 213, 811, 214, 812, 813, 215, 216, 814,
	217, 815, 1117, 816, 364, 218, 220, 219, 221, 365,
	366, 817, 709, 818, 0, 0, 0, 0, 222, 223,
	367, 368, 369, 0, 224, 819, 225, 820, 821, 710,
	822, 226, 370, 823, 371, 824, 0, 227, 228, 0,
	0, 229, 230, 372, 373, 712, 825, 374, 234, 826,
	231, 827, 711, 232, 375, 233, 376, 377, 378, 379,
	380, 828, 381, 829, 713, 235, 236, 237, 714, 382,
	383, 238, 239, 240, 830, 242, 241, 831, 384, 715,
	243, 244, 716, 832, 245, 246, 833, 834, 247, 0,
	248, 717, 249, 250, 252, 385, 251, 718, 253, 254,
	256, 255, 835, 836, 837, 386, 257, 387, 258, 259,
	838, 260, 839, 840, 261, 841, 842, 262, 388, 719,
	263, 720, 389, 264, 265, 266, 267, 268, 269, 843,
	270, 390, 271, 391, 272, 844, 273, 274, 275, 276,
	277, 392, 278, 279, 845, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 846, 292,
	721, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 847, 305, 394, 304, 306, 307, 848, 308, 296,
	297, 309, 722, 310, 395, 396, 311, 849, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 850, 319,
	851, 320, 321, 322, 323, 324, 325, 326, 327, 852,
	399, 400, 401, 853, 854, 328, 329, 402, 403, 855,
	330, 331, 332, 333, 856, 857, 334, 335, 336, 337,
	858, 338, 859, 404, 339, 340, 341, 405, 406, 860,
	861, 342, 862, 863, 864, 865, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 779, 0, 0,
	0, 0, 0, 1625, 0, 0, 0, 0, 0, 0,
	0, 0, 1626, 184, 185, 785, 186, 786, 787, 788,
	789, 348, 790, 791, 792, 793, 187, 188, 189, 349,
	350, 351, 352, 190, 353, 354, 794, 191, 355, 356,
	192, 193, 795, 796, 357, 358, 359, 797, 194, 360,
	798, 784, 799, 195, 196, 197, 0, 199, 200, 201,
	198, 800, 202, 0, 203, 204, 801, 708, 205, 206,
	207, 802, 803, 805, 804, 806, 807, 808, 208, 209,
	414, 210, 361, 211, 362, 363, 809, 212, 810, 213,
	811, 214, 812, 813, 215, 216, 814, 217, 815, 0,
	816, 364, 218, 220, 219, 221, 365, 366, 817, 709,
	818, 0, 0, 0, 0, 222, 223, 367, 368, 369,
	0, 224, 819, 225, 820, 821, 710, 822, 226, 370,
	823, 371, 824, 0, 227, 228, 0, 0, 229, 230,
	372, 373, 712, 825, 374, 234, 826, 231, 827, 711,
	232, 375, 233, 376, 377, 378, 379, 380, 828, 381,
	829, 713, 235, 236, 237, 714, 382, 383, 238, 239,
	240, 830, 242, 241, 831, 384, 715, 243, 244, 716,
	832, 245, 246, 833, 834, 247, 0, 248, 717, 249,
	250, 252, 385, 251, 718, 253, 254, 256, 255, 835,
	836, 837, 386, 257, 387, 258, 259, 838, 260, 839,
	840, 261, 841, 842, 262, 388, 719, 263, 720, 389,
	264, 265, 266, 267, 268, 269, 843, 270, 390, 271,
	391, 272, 844, 273, 274, 275, 276, 277, 392, 278,
	279, 845, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 846, 292, 721, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 847, 305,
	394, 304, 306, 307, 848, 308, 296, 297, 309, 722,
	310, 395, 396, 311, 849, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 850, 319, 851, 320, 321,
	322, 323, 324, 325, 326, 327, 852, 399, 400, 401,
	853, 854, 328, 329, 402, 403, 855, 330, 331, 332,
	333, 856, 857, 334, 335, 336, 337, 858, 338, 859,
	404, 339, 340, 341, 405, 406, 860, 861, 342, 862,
	863, 864, 865, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 779, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2282, 184, 185, 785, 186, 786, 787, 788, 789, 348,
	790, 791, 792, 793, 187, 188, 189, 349, 350, 351,
	352, 190, 353, 354, 794, 191, 355, 356, 192, 193,
	795, 796, 357, 358, 359, 797, 194, 360, 798, 784,
	799, 195, 196, 197, 0, 199, 200, 201, 198, 800,
	202, 0, 203, 204, 801, 708, 205, 206, 207, 802,
	803, 805, 804, 806, 807, 808, 208, 209, 414, 210,
	361, 211, 362, 363, 809, 212, 810, 213, 811, 214,
	812, 813, 215, 216, 814, 217, 815, 0, 816, 364,
	218, 220, 219, 221, 365, 366, 817, 709, 818, 0,
	0, 0, 0, 222, 223, 367, 368, 369, 0, 224,
	819, 225, 820, 821, 710, 822, 226, 370, 823, 371,
	824, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	712, 825, 374, 234, 826, 231, 827, 711, 232, 375,
	233, 376, 377, 378, 379, 380, 828, 381, 829, 713,
	235, 236, 237, 714, 382, 383, 238, 239, 240, 830,
	242, 241, 831, 384, 715, 243, 244, 716, 832, 245,
	246, 833, 834, 247, 0, 248, 717, 249, 250, 252,
	385, 251, 718, 253, 254, 256, 255, 835, 836, 837,
	386, 257, 387, 258, 259, 838, 260, 839, 840, 261,
	841, 842, 262, 388, 719, 263, 720, 389, 264, 265,
	266, 267, 268, 269, 843, 270, 390, 271, 391, 272,
	844, 273, 274, 275, 276, 277, 392, 278, 279, 845,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 846, 292, 721, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 847, 305, 394, 304,
	306, 307, 848, 308, 296, 297, 309, 722, 310, 395,
	396, 311, 849, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 850, 319, 851, 320, 321, 322, 323,
	324, 325, 326, 327, 852, 399, 400, 401, 853, 854,
	328, 329, 402, 403, 855, 330, 331, 332, 333, 856,
	857, 334, 335, 336, 337, 858, 338, 859, 404, 339,
	340, 341, 405, 406, 860, 861, 342, 862, 863, 864,
	865, 343, 344, 345, 346, 347, 0, 0, 779, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1234, 184, 185, 785, 186, 786, 787,
	788, 789, 348, 790, 791, 792, 793, 187, 188, 189,
	349, 350, 351, 352, 190, 353, 354, 794, 191, 355,
	356, 192, 193, 795, 796, 357, 358, 359, 797, 194,
	360, 798, 784, 799, 195, 196, 197, 0, 199, 200,
	201, 198, 800, 202, 0, 203, 204, 801, 708, 205,
	206, 207, 802, 803, 805, 804, 806, 807, 808, 208,
	209, 414, 210, 361, 211, 362, 363, 809, 212, 810,
	213, 811, 214, 812, 813, 215, 216, 814, 217, 815,
	0, 816, 364, 218, 220, 219, 221, 365, 366, 817,
	709, 818, 0, 0, 0, 0, 222, 223, 367, 368,
	369, 0, 224, 819, 225, 820, 821, 710, 822, 226,
	370, 823, 371, 824, 0, 227, 228, 0, 0, 229,
	230, 372, 373, 712, 825, 374, 234, 826, 231, 827,
	711, 232, 375, 233, 376, 377, 378, 379, 380, 828,
	381, 829, 713, 235, 236, 237, 714, 382, 383, 238,
	239, 240, 830, 242, 241, 831, 384, 715, 243, 244,
	716, 832, 245, 246, 833, 834, 247, 0, 248, 717,
	249, 250, 252, 385, 251, 718, 253, 254, 256, 255,
	835, 836, 837, 386, 257, 387, 258, 259, 838, 260,
	839, 840, 261, 841, 842, 262, 388, 719, 263, 720,
	389, 264, 265, 266, 267, 268, 269, 843, 270, 390,
	271, 391, 272, 844, 273, 274, 275, 276, 277, 392,
	278, 279, 845, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 846, 292, 721, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 847,
	305, 394, 304, 306, 307, 848, 308, 296, 297, 309,
	722, 310, 395, 396, 311, 849, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 850, 319, 851, 320,
	321, 322, 323, 324, 325, 326, 327, 852, 399, 400,
	401, 853, 854, 328, 329, 402, 403, 855, 330, 331,
	332, 333, 856, 857, 334, 335, 336, 337, 858, 338,
	859, 404, 339, 340, 341, 405, 406, 860, 861, 342,
	862, 863, 864, 865, 343, 344, 345, 346, 347, 1524,
	0, 646, 635, 636, 633, 634, 625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 1521,
	186, 0, 0, 0, 0, 663, 628, 0, 0, 0,
	187, 188, 189, 349, 678, 351, 679, 190, 680, 681,
	0, 191, 355, 356, 192, 193, 631, 662, 682, 683,
	359, 0, 194, 674, 0, 654, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 708, 205, 206, 207, 0, 655, 656, 658, 0,
	657, 659, 208, 209, 414, 210, 684, 211, 685, 686,
	0, 212, 0, 213, 0, 214, 1522, 0, 677, 216,
	0, 217, 0, 0, 0, 619, 218, 220, 219, 221,
	664, 665, 642, 709, 0, 0, 0, 0, 0, 222,
	223, 687, 688, 689, 0, 224, 0, 225, 0, 0,
	710, 0, 226, 675, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 671, 673, 712, 0, 374, 234,
	0, 231, 0, 711, 232, 690, 233, 691, 692, 693,
	694, 695, 0, 653, 0, 713, 235, 236, 237, 714,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 676,
	715, 243, 244, 716, 0, 245, 246, 0, 0, 247,
	0, 248, 717, 249, 250, 252, 385, 251, 718, 253,
	254, 256, 255, 614, 0, 643, 672, 257, 696, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	719, 263, 720, 666, 264, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 721, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 660, 308,
	296, 297, 309, 722, 310, 698, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 699, 315, 316, 668, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 700, 701, 0, 0, 328, 329, 669, 670,
	641, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 661, 338, 0, 404, 339, 340, 341, 405, 702,
	1520, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 1523,
	184, 185, 0, 186, 0, 0, 621, 1518, 663, 628,
	0, 0, 624, 187, 188, 189, 349, 678, 351, 679,
	190, 680, 681, 0, 191, 355, 356, 192, 193, 631,
	662, 682, 683, 359, 0, 194, 674, 0, 654, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 708, 205, 206, 207, 0, 655,
	656, 658, 0, 657, 659, 208, 209, 414, 210, 684,
	211, 685, 686, 609, 212, 0, 213, 0, 214, 0,
	0, 677, 216, 0, 217, 0, 0, 0, 619, 218,
	220, 219, 221, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 222, 223, 687, 688, 689, 0, 224, 0,
	225, 0, 0, 710, 0, 226, 675, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 671, 673, 712,
	0, 374, 234, 0, 231, 0, 711, 232, 690, 233,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 235,
	236, 237, 714, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 676, 715, 243, 244, 716, 0, 245, 246,
	0, 0, 247, 0, 248, 717, 249, 250, 252, 385,
	251, 718, 253, 254, 256, 255, 614, 0, 643, 672,
	257, 696, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 388, 719, 263, 720, 666, 264, 265, 266,
	267, 268, 269, 0, 270, 667, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 697, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 721, 293, 294, 620, 295, 0,
	299, 300, 301, 302, 303, 140, 305, 394, 304, 306,
	307, 660, 308, 296, 297, 309, 722, 310, 698, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 699, 315,
	316, 668, 0, 319, 142, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 700, 701, 0, 0, 328,
	329, 669, 670, 641, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 661, 338, 0, 404, 339, 340,
	341, 933, 702, 0, 0, 342, 0, 0, 0, 134,
	343, 344, 345, 346, 347, 615, 135, 597, 0, 646,
	635, 636, 633, 634, 625, 613, 0, 0, 0, 0,
	611, 612, 0, 0, 0, 184, 185, 0, 186, 1120,
	0, 0, 0, 663, 628, 624, 0, 0, 187, 188,
	189, 349, 678, 351, 679, 190, 680, 681, 0, 191,
	355, 356, 192, 193, 631, 662, 682, 683, 359, 0,
	194, 674, 0, 654, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 708,
	205, 206, 207, 0, 655, 656, 658, 0, 657, 659,
	208, 209, 414, 210, 684, 211, 685, 686, 0, 212,
	0, 213, 0, 214, 0, 0, 677, 216, 0, 217,
	0, 0, 0, 619, 218, 220, 219, 221, 664, 665,
	642, 709, 0, 0, 0, 0, 0, 222, 223, 687,
	688, 689, 0, 224, 0, 225, 0, 0, 710, 0,
	226, 675, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 671, 673, 712, 0, 374, 234, 0, 231,
	0, 711, 232, 690, 233, 691, 692, 693, 694, 695,
	0, 653, 0, 713, 235, 236, 237, 714, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 676, 715, 243,
	244, 716, 0, 245, 246, 0, 0, 247, 0, 248,
	717, 249, 250, 252, 385, 251, 718, 253, 254, 256,
	255, 614, 0, 643, 672, 257, 696, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 719, 263,
	720, 666, 264, 265, 266, 267, 268, 269, 0, 270,
	667, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	697, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 721,
	293, 294, 620, 295, 0, 299, 300, 301, 302, 303,
	140, 305, 394, 304, 306, 307, 660, 308, 296, 297,
	309, 722, 310, 698, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 699, 315, 316, 668, 0, 319, 142,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	700, 701, 0, 0, 328, 329, 669, 670, 641, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 661,
	338, 0, 404, 339, 340, 341, 933, 702, 0, 0,
	342, 0, 0, 0, 134, 343, 344, 345, 346, 347,
	615, 135, 646, 635, 636, 633, 634, 625, 0, 0,
	613, 0, 0, 0, 0, 611, 612, 0, 184, 185,
	0, 186, 0, 0, 1120, 0, 663, 628, 0, 0,
	624, 187, 188, 189, 349, 678, 351, 679, 190, 680,
	681, 0, 191, 355, 356, 192, 193, 631, 662, 682,
	683, 359, 0, 194, 674, 0, 654, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 708, 205, 206, 207, 0, 655, 656, 658,
	0, 657, 659, 208, 209, 414, 210, 684, 211, 685,
	686, 0, 212, 0, 213, 0, 214, 0, 0, 677,
	216, 0, 217, 0, 0, 0, 619, 218, 220, 219,
	221, 664, 665, 642, 709, 0, 0, 0, 0, 0,
	222, 223, 687, 688, 689, 0, 224, 0, 225, 0,
	0, 710, 0, 226, 675, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 671, 673, 712, 0, 374,
	234, 0, 231, 0, 711, 232, 690, 233, 691, 692,
	693, 694, 695, 0, 653, 0, 713, 235, 236, 237,
	714, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	676, 715, 243, 244, 716, 0, 245, 246, 0, 0,
	247, 0, 248, 717, 249, 250, 252, 385, 251, 718,
	253, 254, 256, 255, 614, 0, 643, 672, 257, 696,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	388, 719, 263, 720, 666, 264, 265, 266, 267, 268,
	269, 0, 270, 667, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 697, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 721, 293, 294, 620, 295, 0, 299, 300,
	301, 302, 303, 140, 305, 394, 304, 306, 307, 660,
	308, 296, 297, 309, 722, 310, 698, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 699, 315, 316, 668,
	0, 319, 142, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 700, 701, 0, 0, 328, 329, 669,
	670, 641, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 661, 338, 0, 404, 339, 340, 341, 933,
	702, 0, 0, 342, 0, 0, 0, 134, 343, 344,
	345, 346, 347, 615, 135, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	0, 184, 185, 0, 186, 0, 0, 1120, 0, 663,
	628, 0, 0, 624, 187, 188, 189, 349, 678, 351,
	679, 190, 680, 681, 1578, 191, 355, 356, 192, 193,
	631, 662, 682, 683, 359, 0, 194, 674, 0, 654,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 708, 205, 206, 207, 0,
	655, 656, 658, 0, 657, 659, 208, 209, 414, 210,
	684, 211, 685, 686, 0, 212, 0, 213, 0, 214,
	0, 0, 677, 216, 0, 217, 0, 0, 0, 619,
	218, 220, 219, 221, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 222, 223, 687, 688, 689, 0, 224,
	0, 225, 0, 1583, 710, 0, 226, 675, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 671, 673,
	712, 0, 374, 234, 0, 231, 0, 711, 232, 690,
	233, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	235, 236, 237, 714, 382, 383, 238, 239, 240, 0,
	242, 241, 1579, 676, 715, 243, 244, 716, 0, 245,
	246, 0, 0, 247, 0, 248, 717, 249, 250, 252,
	385, 251, 718, 253, 254, 256, 255, 614, 0, 643,
	672, 257, 696, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 719, 263, 720, 666, 264, 265,
	266, 267, 268, 269, 0, 270, 667, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 697, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 721, 293, 294, 620, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 660, 308, 296, 297, 309, 722, 310, 698,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 699,
	315, 316, 668, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 700, 701, 0, 1580,
	328, 329, 669, 670, 641, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 661, 338, 0, 404, 339,
	340, 341, 405, 702, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 605, 0, 646,
	635, 636, 633, 634, 625, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 0, 184, 185, 0, 186, 0,
	621, 0, 0, 663, 628, 0, 624, 0, 187, 188,
	189, 349, 678, 351, 679, 190, 680, 681, 0, 191,
	355, 356, 192, 193, 631, 662, 682, 683, 359, 0,
	194, 674, 0, 654, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 708,
	205, 206, 207, 0, 655, 656, 658, 0, 657, 659,
	208, 209, 414, 210, 684, 211, 685, 686, 609, 212,
	0, 213, 0, 214, 0, 0, 677, 216, 0, 217,
	0, 0, 0, 619, 218, 220, 219, 221, 664, 665,
	642, 709, 0, 0, 0, 0, 0, 222, 223, 687,
	688, 689, 0, 224, 0, 225, 0, 0, 710, 0,
	226, 675, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 671, 673, 712, 0, 374, 234, 0, 231,
	0, 711, 232, 690, 233, 691, 692, 693, 694, 695,
	0, 653, 0, 713, 235, 236, 237, 714, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 676, 715, 243,
	244, 716, 0, 245, 246, 0, 0, 247, 0, 248,
	717, 249, 250, 252, 385, 251, 718, 253, 254, 256,
	255, 614, 0, 643, 672, 257, 696, 258, 259, 0,
	260, 607, 0, 261, 0, 0, 262, 388, 719, 263,
	720, 666, 264, 265, 266, 267, 268, 269, 0, 270,
	667, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	697, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 721,
	293, 294, 620, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 660, 308, 296, 297,
	309, 722, 310, 698, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 699, 315, 316, 668, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	700, 701, 0, 0, 328, 329, 669, 670, 641, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 661,
	338, 0, 404, 339, 340, 341, 405, 702, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	615, 0, 646, 635, 636, 633, 634, 625, 0, 0,
	613, 0, 0, 0, 0, 611, 612, 0, 184, 185,
	0, 186, 0, 0, 621, 0, 663, 628, 0, 0,
	624, 187, 188, 189, 349, 678, 351, 679, 190, 680,
	681, 0, 191, 355, 356, 192, 193, 631, 662, 682,
	683, 359, 0, 194, 674, 0, 654, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 708, 205, 206, 207, 0, 655, 656, 658,
	0, 657, 659, 208, 209, 414, 210, 684, 211, 685,
	686, 0, 212, 0, 213, 0, 214, 0, 0, 677,
	216, 0, 217, 0, 0, 0, 619, 218, 220, 219,
	221, 664, 665, 642, 709, 0, 0, 0, 0, 0,
	222, 223, 687, 688, 689, 0, 224, 0, 225, 0,
	0, 710, 0, 226, 675, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 671, 673, 712, 0, 374,
	234, 0, 231, 0, 711, 232, 690, 233, 691, 692,
	693, 694, 695, 0, 653, 0, 713, 235, 236, 237,
	714, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	676, 715, 243, 244, 716, 0, 245, 246, 0, 0,
	247, 0, 248, 717, 249, 250, 252, 385, 251, 718,
	253, 254, 256, 255, 614, 2205, 643, 672, 257, 696,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	388, 719, 263, 720, 666, 264, 265, 266, 267, 268,
	269, 0, 270, 667, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 697, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 721, 293, 294, 620, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 660,
	308, 296, 297, 309, 722, 310, 698, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 699, 315, 316, 668,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 700, 701, 0, 0, 328, 329, 669,
	670, 641, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 661, 338, 0, 404, 339, 340, 341, 405,
	702, 0, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 615, 0, 646, 635, 636, 633, 634,
	625, 0, 0, 613, 0, 0, 0, 0, 611, 612,
	1181, 184, 185, 0, 186, 0, 0, 621, 0, 663,
	628, 0, 0, 624, 187, 188, 189, 349, 678, 351,
	679, 190, 680, 681, 0, 191, 355, 356, 192, 193,
	631, 662, 682, 683, 359, 0, 194, 674, 0, 654,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 708, 205, 206, 207, 0,
	655, 656, 658, 0, 657, 659, 208, 209, 414, 210,
	684, 211, 685, 686, 0, 212, 0, 213, 0, 214,
	0, 0, 677, 216, 0, 217, 0, 0, 0, 619,
	218, 220, 219, 221, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 222, 223, 687, 688, 689, 0, 224,
	0, 225, 0, 0, 710, 0, 226, 675, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 671, 673,
	712, 0, 374, 234, 1428, 231, 0, 711, 232, 690,
	233, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	235, 236, 237, 714, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 676, 715, 243, 244, 716, 0, 245,
	246, 0, 0, 247, 0, 248, 717, 249, 250, 252,
	385, 251, 718, 253, 254, 256, 255, 614, 0, 643,
	672, 257, 696, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 719, 263, 720, 666, 264, 265,
	266, 267, 268, 269, 0, 270, 667, 271, 391, 272,
	1427, 273, 274, 275, 276, 277, 697, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 721, 293, 294, 620, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 660, 308, 296, 297, 309, 722, 310, 698,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 699,
	315, 316, 668, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 700, 701, 0, 0,
	328, 329, 669, 670, 641, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 661, 338, 0, 404, 339,
	340, 341, 405, 702, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 0, 646, 635,
	636, 633, 634, 625, 0, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 184, 185, 0, 186, 0, 0,
	621, 0, 663, 628, 0, 0, 624, 187, 188, 189,
	349, 678, 351, 679, 190, 680, 681, 0, 191, 355,
	356, 192, 193, 631, 662, 682, 683, 359, 0, 194,
	674, 0, 654, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 708, 205,
	206, 207, 0, 655, 656, 658, 0, 657, 659, 208,
	209, 414, 210, 684, 211, 685, 686, 609, 212, 0,
	213, 0, 214, 0, 0, 677, 216, 0, 217, 0,
	0, 0, 619, 218, 220, 219, 221, 664, 665, 642,
	709, 0, 0, 0, 0, 0, 222, 223, 687, 688,
	689, 0, 224, 0, 225, 0, 0, 710, 0, 226,
	675, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 671, 673, 712, 0, 374, 234, 0, 231, 0,
	711, 232, 690, 233, 691, 692, 693, 694, 695, 0,
	653, 0, 713, 235, 236, 237, 714, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 676, 715, 243, 244,
	716, 0, 245, 246, 0, 0, 247, 0, 248, 717,
	249, 250, 252, 385, 251, 718, 253, 254, 256, 255,
	614, 0, 643, 672, 257, 696, 258, 259, 0, 260,
	607, 0, 261, 0, 0, 262, 388, 719, 263, 720,
	666, 264, 265, 266, 267, 268, 269, 0, 270, 667,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 697,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 721, 293,
	294, 620, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 660, 308, 296, 297, 309,
	722, 310, 698, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 699, 315, 316, 668, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 700,
	701, 0, 0, 328, 329, 669, 670, 641, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 661, 338,
	0, 404, 339, 340, 341, 405, 702, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 615,
	0, 646, 635, 636, 633, 634, 625, 0, 0, 613,
	0, 0, 0, 0, 611, 612, 0, 184, 185, 0,
	186, 0, 0, 621, 0, 663, 628, 0, 0, 624,
	187, 188, 189, 349, 678, 351, 679, 190, 680, 681,
	0, 191, 355, 356, 192, 193, 631, 662, 682, 683,
	359, 0, 194, 674, 0, 654, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 708, 205, 206, 207, 0, 655, 656, 658, 0,
	657, 659, 208, 209, 414, 210, 684, 211, 685, 686,
	2619, 212, 0, 213, 0, 214, 0, 0, 677, 216,
	0, 217, 0, 0, 0, 619, 218, 220, 219, 221,
	664, 665, 642, 709, 0, 0, 0, 0, 0, 222,
	223, 687, 688, 689, 0, 224, 0, 225, 0, 0,
	710, 0, 226, 675, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 671, 673, 712, 0, 374, 234,
	0, 231, 0, 711, 232, 690, 233, 691, 692, 693,
	694, 695, 0, 653, 0, 713, 235, 236, 237, 714,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 676,
	715, 243, 244, 716, 0, 245, 246, 0, 0, 247,
	0, 248, 2620, 249, 250, 252, 385, 251, 718, 253,
	254, 256, 255, 614, 0, 643, 672, 257, 696, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	719, 263, 720, 666, 264, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 721, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 660, 308,
	296, 297, 309, 722, 310, 698, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 699, 315, 316, 668, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 700, 701, 0, 0, 328, 329, 669, 670,
	641, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 661, 338, 0, 404, 339, 340, 341, 405, 702,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	184, 185, 0, 186, 0, 0, 621, 0, 663, 628,
	0, 0, 624, 187, 188, 189, 349, 678, 351, 679,
	190, 680, 681, 0, 191, 355, 356, 192, 193, 631,
	662, 682, 683, 359, 0, 194, 674, 0, 654, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 708, 205, 206, 207, 0, 655,
	656, 658, 0, 657, 659, 208, 209, 414, 210, 684,
	211, 685, 686, 609, 212, 0, 213, 0, 214, 0,
	0, 677, 216, 0, 217, 0, 0, 0, 619, 218,
	220, 219, 221, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 222, 223, 687, 688, 689, 0, 224, 0,
	225, 0, 0, 710, 0, 226, 675, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 671, 673, 712,
	0, 374, 234, 0, 231, 0, 711, 232, 690, 233,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 235,
	236, 237, 714, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 676, 715, 243, 244, 716, 0, 245, 246,
	0, 0, 247, 0, 248, 717, 249, 250, 252, 385,
	251, 718, 253, 254, 256, 255, 614, 0, 643, 672,
	257, 696, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 388, 719, 263, 720, 666, 264, 265, 266,
	267, 268, 269, 0, 270, 667, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 697, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 721, 293, 294, 620, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 660, 308, 296, 297, 309, 722, 310, 698, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 699, 315,
	316, 668, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 700, 701, 0, 0, 328,
	329, 669, 670, 641, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 661, 338, 0, 404, 339, 340,
	341, 405, 702, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 615, 0, 646, 635, 636,
	633, 634, 625, 0, 0, 613, 0, 0, 0, 0,
	611, 612, 0, 184, 185, 0, 186, 0, 0, 621,
	0, 663, 628, 0, 0, 624, 187, 188, 189, 349,
	678, 351, 679, 190, 680, 681, 0, 191, 355, 356,
	192, 193, 631, 662, 682, 683, 359, 0, 194, 674,
	0, 654, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 708, 205, 206,
	207, 0, 655, 656, 658, 0, 657, 659, 208, 209,
	414, 210, 684, 211, 685, 686, 0, 212, 0, 213,
	0, 214, 0, 0, 677, 216, 0, 217, 0, 0,
	0, 619, 218, 220, 219, 221, 664, 665, 642, 709,
	0, 0, 0, 0, 0, 222, 223, 687, 688, 689,
	0, 224, 0, 225, 0, 0, 710, 0, 226, 675,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	671, 673, 712, 0, 374, 234, 0, 231, 0, 711,
	232, 690, 233, 691, 692, 693, 694, 695, 0, 653,
	0, 713, 235, 236, 237, 714, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 676, 715, 243, 244, 716,
	0, 245, 246, 0, 0, 247, 0, 248, 717, 249,
	250, 252, 385, 251, 718, 253, 254, 256, 255, 614,
	0, 643, 672, 257, 696, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 719, 263, 720, 666,
	264, 265, 266, 267, 268, 269, 0, 270, 667, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 697, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 721, 293, 294,
	620, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 660, 308, 296, 297, 309, 722,
	310, 698, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 699, 315, 316, 668, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 700, 701,
	0, 0, 328, 329, 669, 670, 641, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 661, 338, 0,
	404, 339, 340, 341, 405, 702, 2058, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 615, 0,
	646, 635, 636, 633, 634, 625, 0, 0, 613, 0,
	0, 0, 0, 611, 612, 0, 184, 185, 0, 186,
	0, 0, 621, 0, 663, 628, 0, 0, 624, 187,
	188, 189, 349, 678, 351, 679, 190, 680, 681, 0,
	191, 355, 356, 192, 193, 631, 662, 682, 683, 359,
	0, 194, 674, 0, 654, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	708, 205, 206, 207, 0, 655, 656, 658, 0, 657,
	659, 208, 209, 414, 210, 684, 211, 685, 686, 0,
	212, 0, 213, 0, 214, 0, 0, 677, 216, 0,
	217, 0, 0, 0, 619, 218, 220, 219, 221, 664,
	665, 642, 709, 0, 0, 0, 0, 0, 222, 223,
	687, 688, 689, 0, 224, 0, 225, 0, 0, 710,
	0, 226, 675, 0, 371, 0, 0, 227, 228, 0,
	0, 229, 230, 671, 673, 712, 0, 374, 234, 0,
	231, 0, 711, 232, 690, 233, 691, 692, 693, 694,
	695, 0, 653, 0, 713, 235, 236, 237, 714, 382,
	383, 238, 239, 240, 0, 242, 241, 0, 676, 715,
	243, 244, 716, 0, 245, 246, 0, 0, 247, 0,
	248, 717, 249, 250, 252, 385, 251, 718, 253, 254,
	256, 255, 614, 0, 643, 672, 257, 696, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 388, 719,
	263, 720, 666, 264, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	721, 293, 294, 620, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 660, 308, 296,
	297, 309, 722, 310, 698, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 699, 315, 316, 668, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 700, 701, 0, 0, 328, 329, 669, 670, 641,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	661, 338, 0, 404, 339, 340, 341, 405, 702, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 615, 0, 646, 635, 636, 633, 634, 625, 0,
	0, 613, 0, 0, 0, 0, 611, 612, 1181, 184,
	185, 0, 186, 0, 0, 621, 0, 663, 628, 0,
	0, 624, 187, 188, 189, 349, 678, 351, 679, 190,
	680, 681, 0, 191, 355, 356, 192, 193, 631, 662,
	682, 683, 359, 0, 194, 674, 0, 654, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 708, 205, 206, 207, 0, 655, 656,
	658, 0, 657, 659, 208, 209, 414, 210, 684, 211,
	685, 686, 0, 212, 0, 213, 0, 214, 0, 0,
	677, 216, 0, 217, 0, 0, 0, 619, 218, 220,
	219, 221, 664, 665, 642, 709, 0, 0, 0, 0,
	0, 222, 223, 687, 688, 689, 0, 224, 0, 225,
	0, 1583, 710, 0, 226, 675, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 671, 673, 712, 0,
	374, 234, 0, 231, 0, 711, 232, 690, 233, 691,
	692, 693, 694, 695, 0, 653, 0, 713, 235, 236,
	237, 714, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 676, 715, 243, 244, 716, 0, 245, 246, 0,
	0, 247, 0, 248, 717, 249, 250, 252, 385, 251,
	718, 253, 254, 256, 255, 614, 0, 643, 672, 257,
	696, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 719, 263, 720, 666, 264, 265, 266, 267,
	268, 269, 0, 270, 667, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 697, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 721, 293, 294, 620, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	660, 308, 296, 297, 309, 722, 310, 698, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 699, 315, 316,
	668, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 700, 701, 0, 0, 328, 329,
	669, 670, 641, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 661, 338, 0, 404, 339, 340, 341,
	405, 702, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 615, 1628, 0, 646, 635, 636,
	633, 634, 625, 0, 613, 0, 0, 0, 0, 611,
	612, 0, 0, 184, 185, 0, 186, 0, 621, 0,
	0, 663, 628, 0, 624, 0, 187, 188, 189, 349,
	678, 351, 679, 190, 680, 681, 0, 191, 355, 356,
	192, 193, 631, 662, 682, 683, 359, 0, 194, 674,
	0, 654, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 708, 205, 206,
	207, 0, 655, 656, 658, 0, 657, 659, 208, 209,
	414, 210, 684, 211, 685, 686, 0, 212, 0, 213,
	0, 214, 0, 0, 677, 216, 0, 217, 0, 0,
	0, 619, 218, 220, 219, 221, 664, 665, 642, 709,
	0, 0, 0, 0, 0, 222, 223, 687, 688, 689,
	0, 224, 0, 225, 0, 0, 710, 0, 226, 675,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	671, 673, 712, 0, 374, 234, 0, 231, 0, 711,
	232, 690, 233, 691, 692, 693, 694, 695, 0, 653,
	0, 713, 235, 236, 237, 714, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 676, 715, 243, 244, 716,
	0, 245, 246, 0, 0, 247, 0, 248, 717, 249,
	250, 252, 385, 251, 718, 253, 254, 256, 255, 614,
	0, 643, 672, 257, 696, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 719, 263, 720, 666,
	264, 265, 266, 267, 268, 269, 0, 270, 667, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 697, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 721, 293, 294,
	620, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 660, 308, 296, 297, 309, 722,
	310, 698, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 699, 315, 316, 668, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 700, 701,
	0, 0, 328, 329, 669, 670, 641, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 661, 338, 0,
	404, 339, 340, 341, 405, 702, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 615, 1592,
	0, 646, 635, 636, 633, 634, 625, 0, 613, 0,
	0, 0, 0, 611, 612, 0, 0, 184, 185, 0,
	186, 0, 621, 0, 0, 663, 628, 0, 624, 0,
	187, 188, 189, 349, 678, 351, 679, 190, 680, 681,
	0, 191, 355, 356, 192, 193, 631, 662, 682, 683,
	359, 0, 194, 674, 0, 654, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 708, 205, 206, 207, 0, 655, 656, 658, 0,
	657, 659, 208, 209, 414, 210, 684, 211, 685, 686,
	0, 212, 0, 213, 0, 214, 0, 0, 677, 216,
	0, 217, 0, 0, 0, 619, 218, 220, 219, 221,
	664, 665, 642, 709, 0, 0, 0, 0, 0, 222,
	223, 687, 688, 689, 0, 224, 0, 225, 0, 0,
	710, 0, 226, 675, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 671, 673, 712, 0, 374, 234,
	0, 231, 0, 711, 232, 690, 233, 691, 692, 693,
	694, 695, 0, 653, 0, 713, 235, 236, 237, 714,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 676,
	715, 243, 244, 716, 0, 245, 246, 0, 0, 247,
	0, 248, 717, 249, 250, 252, 385, 251, 718, 253,
	254, 256, 255, 614, 0, 643, 672, 257, 696, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	719, 263, 720, 666, 264, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 721, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 660, 308,
	296, 297, 309, 722, 310, 698, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 699, 315, 316, 668, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 700, 701, 0, 0, 328, 329, 669, 670,
	641, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 661, 338, 0, 404, 339, 340, 341, 405, 702,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 615, 1590, 0, 646, 635, 636, 633, 634,
	625, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	0, 184, 185, 0, 186, 0, 621, 0, 0, 663,
	628, 0, 624, 0, 187, 188, 189, 349, 678, 351,
	679, 190, 680, 681, 0, 191, 355, 356, 192, 193,
	631, 662, 682, 683, 359, 0, 194, 674, 0, 654,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 708, 205, 206, 207, 0,
	655, 656, 658, 0, 657, 659, 208, 209, 414, 210,
	684, 211, 685, 686, 0, 212, 0, 213, 0, 214,
	0, 0, 677, 216, 0, 217, 0, 0, 0, 619,
	218, 220, 219, 221, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 222, 223, 687, 688, 689, 0, 224,
	0, 225, 0, 0, 710, 0, 226, 675, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 671, 673,
	712, 0, 374, 234, 0, 231, 0, 711, 232, 690,
	233, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	235, 236, 237, 714, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 676, 715, 243, 244, 716, 0, 245,
	246, 0, 0, 247, 0, 248, 717, 249, 250, 252,
	385, 251, 718, 253, 254, 256, 255, 614, 0, 643,
	672, 257, 696, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 719, 263, 720, 666, 264, 265,
	266, 267, 268, 269, 0, 270, 667, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 697, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 721, 293, 294, 620, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 660, 308, 296, 297, 309, 722, 310, 698,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 699,
	315, 316, 668, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 700, 701, 0, 0,
	328, 329, 669, 670, 641, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 661, 338, 0, 404, 339,
	340, 341, 405, 702, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 1574, 0, 646,
	635, 636, 633, 634, 625, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 0, 184, 185, 0, 186, 0,
	621, 0, 0, 663, 628, 0, 624, 0, 187, 188,
	189, 349, 678, 351, 679, 190, 680, 681, 0, 191,
	355, 356, 192, 193, 631, 662, 682, 683, 359, 0,
	194, 674, 0, 654, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 708,
	205, 206, 207, 0, 655, 656, 658, 0, 657, 659,
	208, 209, 414, 210, 684, 211, 685, 686, 0, 212,
	0, 213, 0, 214, 0, 0, 677, 216, 0, 217,
	0, 0, 0, 619, 218, 220, 219, 221, 664, 665,
	642, 709, 0, 0, 0, 0, 0, 222, 223, 687,
	688, 689, 0, 224, 0, 225, 0, 0, 710, 0,
	226, 675, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 671, 673, 712, 0, 374, 234, 0, 231,
	0, 711, 232, 690, 233, 691, 692, 693, 694, 695,
	0, 653, 0, 713, 235, 236, 237, 714, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 676, 715, 243,
	244, 716, 0, 245, 246, 0, 0, 247, 0, 248,
	717, 249, 250, 252, 385, 251, 718, 253, 254, 256,
	255, 614, 0, 643, 672, 257, 696, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 719, 263,
	720, 666, 264, 265, 266, 267, 268, 269, 0, 270,
	667, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	697, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 721,
	293, 294, 620, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 660, 308, 296, 297,
	309, 722, 310, 698, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 699, 315, 316, 668, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	700, 701, 0, 0, 328, 329, 669, 670, 641, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 661,
	338, 0, 404, 339, 340, 341, 405, 702, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	615, 1562, 0, 646, 635, 636, 633, 634, 625, 0,
	613, 0, 0, 0, 0, 611, 612, 0, 0, 184,
	185, 0, 186, 0, 621, 0, 0, 663, 628, 0,
	624, 0, 187, 188, 189, 349, 678, 351, 679, 190,
	680, 681, 0, 191, 355, 356, 192, 193, 631, 662,
	682, 683, 359, 0, 194, 674, 0, 654, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 708, 205, 206, 207, 0, 655, 656,
	658, 0, 657, 659, 208, 209, 414, 210, 684, 211,
	685, 686, 0, 212, 0, 213, 0, 214, 0, 0,
	677, 216, 0, 217, 0, 0, 0, 619, 218, 220,
	219, 221, 664, 665, 642, 709, 0, 0, 0, 0,
	0, 222, 223, 687, 688, 689, 0, 224, 0, 225,
	0, 0, 710, 0, 226, 675, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 671, 673, 712, 0,
	374, 234, 0, 231, 0, 711, 232, 690, 233, 691,
	692, 693, 694, 695, 0, 653, 0, 713, 235, 236,
	237, 714, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 676, 715, 243, 244, 716, 0, 245, 246, 0,
	0, 247, 0, 248, 717, 249, 250, 252, 385, 251,
	718, 253, 254, 256, 255, 614, 0, 643, 672, 257,
	696, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 719, 263, 720, 666, 264, 265, 266, 267,
	268, 269, 0, 270, 667, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 697, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 721, 293, 294, 620, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	660, 308, 296, 297, 309, 722, 310, 698, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 699, 315, 316,
	668, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 700, 701, 0, 0, 328, 329,
	669, 670, 641, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 661, 338, 0, 404, 339, 340, 341,
	405, 702, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 615, 1560, 0, 1552, 635, 636,
	633, 634, 625, 0, 613, 0, 0, 0, 0, 611,
	612, 0, 0, 184, 185, 0, 186, 0, 621, 0,
	0, 663, 628, 0, 624, 0, 187, 188, 189, 349,
	678, 351, 679, 190, 680, 681, 0, 191, 355, 356,
	192, 193, 631, 662, 682, 683, 359, 0, 194, 674,
	0, 654, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 708, 205, 206,
	207, 0, 655, 656, 658, 0, 657, 659, 208, 209,
	414, 210, 684, 1555, 685, 686, 0, 212, 0, 213,
	0, 214, 0, 0, 677, 216, 0, 217, 0, 0,
	0, 619, 218, 220, 219, 221, 664, 665, 642, 709,
	0, 0, 0, 0, 0, 222, 223, 687, 688, 689,
	0, 224, 0, 225, 0, 0, 710, 0, 226, 675,
	0, 371, 0, 0, 227, 1556, 0, 0, 229, 230,
	671, 673, 712, 0, 374, 234, 0, 231, 0, 711,
	232, 690, 233, 691, 692, 693, 694, 695, 0, 653,
	0, 713, 235, 236, 237, 714, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 676, 715, 243, 244, 716,
	0, 245, 246, 0, 0, 247, 0, 248, 717, 1557,
	1554, 252, 385, 251, 718, 253, 254, 256, 255, 614,
	0, 643, 672, 257, 696, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 719, 263, 720, 666,
	264, 265, 266, 267, 268, 269, 0, 270, 667, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 697, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 721, 293, 294,
	620, 295, 0, 299, 300, 301, 302, 1558, 0, 305,
	394, 304, 306, 307, 660, 308, 296, 297, 309, 722,
	310, 698, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 699, 315, 316, 668, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 700, 701,
	0, 0, 328, 329, 669, 670, 641, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 661, 338, 0,
	404, 339, 340, 341, 405, 702, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 1553, 347, 615, 1549,
	0, 1552, 635, 636, 633, 634, 625, 0, 613, 0,
	0, 0, 0, 611, 612, 0, 0, 184, 185, 0,
	186, 0, 621, 0, 0, 663, 628, 0, 624, 0,
	187, 188, 189, 349, 678, 351, 679, 190, 680, 681,
	0, 191, 355, 356, 192, 193, 631, 662, 682, 683,
	359, 0, 194, 674, 0, 654, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 708, 205, 206, 207, 0, 655, 656, 658, 0,
	657, 659, 208, 209, 414, 210, 684, 1555, 685, 686,
	0, 212, 0, 213, 0, 214, 0, 0, 677, 216,
	0, 217, 0, 0, 0, 619, 218, 220, 219, 221,
	664, 665, 642, 709, 0, 0, 0, 0, 0, 222,
	223, 687, 688, 689, 0, 224, 0, 225, 0, 0,
	710, 0, 226, 675, 0, 371, 0, 0, 227, 1556,
	0, 0, 229, 230, 671, 673, 712, 0, 374, 234,
	0, 231, 0, 711, 232, 690, 233, 691, 692, 693,
	694, 695, 0, 653, 0, 713, 235, 236, 237, 714,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 676,
	715, 243, 244, 716, 0, 245, 246, 0, 0, 247,
	0, 248, 717, 1557, 1554, 252, 385, 251, 718, 253,
	254, 256, 255, 614, 0, 643, 672, 257, 696, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	719, 263, 720, 666, 264, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 721, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 1558, 0, 305, 394, 304, 306, 307, 660, 308,
	296, 297, 309, 722, 310, 698, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 699, 315, 316, 668, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 700, 701, 0, 0, 328, 329, 669, 670,
	641, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 661, 338, 0, 404, 339, 340, 341, 405, 702,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	1553, 347, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	184, 185, 0, 186, 0, 0, 621, 0, 663, 628,
	0, 0, 624, 187, 188, 189, 349, 678, 351, 679,
	190, 680, 681, 0, 191, 355, 356, 192, 193, 631,
	662, 682, 683, 359, 0, 194, 674, 0, 654, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 708, 205, 206, 207, 0, 655,
	656, 658, 0, 657, 659, 208, 209, 414, 210, 684,
	211, 685, 686, 0, 212, 0, 213, 0, 214, 0,
	0, 677, 216, 0, 217, 0, 0, 0, 619, 218,
	220, 219, 221, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 222, 223, 687, 688, 689, 0, 224, 0,
	225, 0, 0, 710, 0, 226, 675, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 671, 673, 712,
	0, 374, 234, 0, 231, 0, 711, 232, 690, 233,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 235,
	236, 237, 714, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 676, 715, 243, 244, 716, 0, 245, 246,
	0, 0, 247, 0, 248, 717, 249, 250, 252, 385,
	251, 718, 253, 254, 256, 255, 614, 0, 643, 672,
	257, 696, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 388, 719, 263, 720, 666, 264, 265, 266,
	267, 268, 269, 0, 270, 667, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 697, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 721, 293, 294, 620, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 660, 308, 296, 297, 309, 722, 310, 698, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 699, 315,
	316, 668, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 700, 701, 0, 0, 328,
	329, 669, 670, 641, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 661, 338, 0, 404, 339, 340,
	341, 405, 702, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 615, 0, 646, 635, 636,
	633, 634, 625, 0, 0, 613, 0, 0, 0, 0,
	611, 612, 0, 184, 185, 1415, 186, 1124, 0, 621,
	0, 663, 628, 0, 0, 624, 187, 188, 189, 349,
	678, 351, 679, 190, 680, 681, 0, 191, 355, 356,
	192, 193, 631, 662, 682, 683, 359, 0, 194, 674,
	0, 654, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 708, 205, 206,
	207, 0, 655, 656, 658, 0, 657, 659, 208, 209,
	414, 210, 684, 211, 685, 686, 0, 212, 0, 213,
	0, 214, 0, 0, 677, 216, 0, 217, 0, 0,
	0, 619, 218, 220, 219, 221, 664, 665, 642, 709,
	0, 0, 0, 0, 0, 222, 223, 687, 688, 689,
	0, 224, 0, 225, 0, 0, 710, 0, 226, 675,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	671, 673, 712, 0, 374, 234, 0, 231, 0, 711,
	232, 690, 233, 691, 692, 693, 694, 695, 0, 653,
	0, 713, 235, 236, 237, 714, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 676, 715, 243, 244, 716,
	0, 245, 246, 0, 0, 247, 0, 248, 717, 249,
	250, 252, 385, 251, 718, 253, 254, 256, 255, 614,
	0, 643, 672, 257, 696, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 719, 263, 720, 666,
	264, 265, 266, 267, 268, 269, 0, 270, 667, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 697, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 721, 293, 294,
	620, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 660, 308, 296, 297, 309, 722,
	310, 698, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 699, 315, 316, 668, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 700, 701,
	0, 0, 328, 329, 669, 670, 641, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 661, 338, 0,
	404, 339, 340, 341, 405, 702, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 615, 877,
	0, 646, 635, 636, 633, 634, 625, 0, 613, 0,
	0, 0, 0, 611, 612, 0, 0, 184, 185, 0,
	186, 0, 621, 0, 0, 663, 628, 0, 624, 0,
	187, 188, 189, 349, 678, 351, 679, 190, 680, 681,
	0, 191, 355, 356, 192, 193, 631, 662, 682, 683,
	359, 0, 194, 674, 0, 654, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 708, 205, 206, 207, 0, 655, 656, 658, 0,
	657, 659, 208, 209, 414, 210, 684, 211, 685, 686,
	0, 212, 0, 213, 0, 214, 0, 0, 677, 216,
	0, 217, 0, 0, 0, 619, 218, 220, 219, 221,
	664, 665, 642, 709, 0, 0, 0, 0, 0, 222,
	223, 687, 688, 689, 0, 224, 0, 225, 0, 0,
	710, 0, 226, 675, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 671, 673, 712, 0, 374, 234,
	0, 231, 0, 711, 232, 690, 233, 691, 692, 693,
	694, 695, 0, 653, 0, 713, 235, 236, 237, 714,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 676,
	715, 243, 244, 716, 0, 245, 246, 0, 0, 247,
	0, 248, 717, 249, 250, 252, 385, 251, 718, 253,
	254, 256, 255, 614, 0, 643, 672, 257, 696, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	719, 263, 720, 666, 264, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 721, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 660, 308,
	296, 297, 309, 722, 310, 698, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 699, 315, 316, 668, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 700, 701, 0, 0, 328, 329, 669, 670,
	641, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 661, 338, 0, 404, 339, 340, 341, 405, 702,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 615, 875, 0, 646, 635, 636, 633, 634,
	625, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	0, 184, 185, 0, 186, 0, 621, 0, 0, 663,
	628, 0, 624, 0, 187, 188, 189, 349, 678, 351,
	679, 190, 680, 681, 0, 191, 355, 356, 192, 193,
	631, 662, 682, 683, 359, 0, 194, 674, 0, 654,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 708, 205, 206, 207, 0,
	655, 656, 658, 0, 657, 659, 208, 209, 414, 210,
	684, 211, 685, 686, 0, 212, 0, 213, 0, 214,
	0, 0, 677, 216, 0, 217, 0, 0, 0, 619,
	218, 220, 219, 221, 664, 665, 642, 709, 0, 0,
	0, 0, 0, 222, 223, 687, 688, 689, 0, 224,
	0, 225, 0, 0, 710, 0, 226, 675, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 671, 673,
	712, 0, 374, 234, 0, 231, 0, 711, 232, 690,
	233, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	235, 236, 237, 714, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 676, 715, 243, 244, 716, 0, 245,
	246, 0, 0, 247, 0, 248, 717, 249, 250, 252,
	385, 251, 718, 253, 254, 256, 255, 614, 0, 643,
	672, 257, 696, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 719, 263, 720, 666, 264, 265,
	266, 267, 268, 269, 0, 270, 667, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 697, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 721, 293, 294, 620, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 660, 308, 296, 297, 309, 722, 310, 698,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 699,
	315, 316, 668, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 700, 701, 0, 0,
	328, 329, 669, 670, 641, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 661, 338, 0, 404, 339,
	340, 341, 405, 702, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 615, 0, 646, 635,
	636, 633, 634, 625, 0, 0, 613, 0, 0, 0,
	0, 611, 612, 0, 184, 185, 0, 186, 0, 0,
	621, 0, 663, 628, 0, 0, 624, 187, 188, 189,
	349, 678, 351, 679, 190, 680, 681, 0, 191, 355,
	356, 192, 193, 631, 662, 682, 683, 359, 0, 194,
	674, 0, 654, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 708, 205,
	206, 2536, 0, 655, 656, 658, 0, 657, 659, 208,
	209, 414, 210, 684, 211, 685, 686, 0, 212, 0,
	213, 0, 214, 0, 0, 677, 216, 0, 217, 0,
	0, 0, 619, 218, 220, 219, 221, 664, 665, 642,
	709, 0, 0, 0, 0, 0, 222, 223, 687, 688,
	689, 0, 224, 0, 225, 0, 0, 710, 0, 226,
	675, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 671, 673, 712, 0, 374, 234, 0, 231, 0,
	711, 232, 690, 233, 691, 692, 693, 694, 695, 0,
	653, 0, 713, 235, 236, 237, 714, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 676, 715, 243, 244,
	716, 0, 245, 246, 0, 0, 247, 0, 248, 717,
	249, 250, 252, 385, 251, 718, 253, 254, 256, 255,
	614, 0, 643, 672, 257, 696, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 388, 719, 263, 720,
	666, 264, 265, 266, 267, 268, 269, 0, 270, 667,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 697,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 721, 293,
	294, 620, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 660, 308, 296, 297, 309,
	722, 310, 698, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 699, 315, 316, 668, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 700,
	701, 0, 0, 328, 329, 669, 670, 641, 330, 331,
	2535, 333, 0, 0, 334, 335, 336, 337, 661, 338,
	0, 404, 339, 340, 341, 405, 702, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 615,
	0, 646, 635, 636, 633, 634, 625, 0, 0, 613,
	0, 0, 0, 0, 611, 612, 0, 184, 185, 0,
	186, 0, 0, 621, 0, 663, 628, 0, 0, 624,
	187, 188, 189, 349, 678, 351, 679, 190, 680, 681,
	0, 191, 355, 356, 192, 193, 631, 662, 682, 683,
	359, 0, 194, 674, 0, 654, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 708, 205, 206, 207, 0, 655, 656, 658, 0,
	657, 659, 208, 209, 414, 210, 684, 211, 685, 686,
	0, 212, 0, 213, 0, 214, 0, 0, 677, 216,
	0, 217, 0, 0, 0, 619, 218, 220, 219, 221,
	664, 665, 642, 709, 0, 0, 0, 0, 0, 222,
	223, 687, 688, 689, 0, 224, 0, 225, 0, 0,
	710, 0, 226, 675, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 671, 673, 712, 0, 374, 234,
	0, 231, 0, 711, 232, 690, 233, 691, 692, 693,
	694, 695, 0, 653, 0, 713, 235, 236, 237, 714,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 676,
	715, 243, 244, 716, 0, 245, 246, 0, 0, 247,
	0, 248, 717, 249, 250, 252, 385, 251, 718, 253,
	254, 256, 255, 614, 0, 643, 672, 257, 696, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	719, 263, 720, 666, 264, 265, 266, 267, 268, 269,
	0, 270, 667, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 697, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 721, 293, 294, 620, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 660, 308,
	296, 297, 309, 722, 310, 698, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 699, 315, 316, 668, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 700, 701, 0, 0, 328, 329, 669, 670,
	641, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 661, 338, 0, 404, 339, 340, 341, 405, 702,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 615, 0, 646, 635, 636, 633, 634, 625,
	0, 0, 613, 0, 0, 0, 0, 611, 612, 0,
	184, 185, 0, 186, 0, 0, 621, 0, 663, 628,
	0, 0, 624, 187, 188, 189, 2534, 678, 351, 679,
	190, 680, 681, 0, 191, 355, 356, 192, 193, 631,
	662, 682, 683, 359, 0, 194, 674, 0, 654, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 708, 205, 206, 2536, 0, 655,
	656, 658, 0, 657, 659, 208, 209, 414, 210, 684,
	211, 685, 686, 0, 212, 0, 213, 0, 214, 0,
	0, 677, 216, 0, 217, 0, 0, 0, 619, 218,
	220, 219, 221, 664, 665, 642, 709, 0, 0, 0,
	0, 0, 222, 223, 687, 688, 689, 0, 224, 0,
	225, 0, 0, 710, 0, 226, 675, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 671, 673, 712,
	0, 374, 234, 0, 231, 0, 711, 232, 690, 233,
	691, 692, 693, 694, 695, 0, 653, 0, 713, 235,
	236, 237, 714, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 676, 715, 243, 244, 716, 0, 245, 246,
	0, 0, 247, 0, 248, 717, 249, 250, 252, 385,
	251, 718, 253, 254, 256, 255, 614, 0, 643, 672,
	257, 696, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 388, 719, 263, 720, 666, 264, 265, 266,
	267, 268, 269, 0, 270, 667, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 697, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 721, 293, 294, 620, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 660, 308, 296, 297, 309, 722, 310, 698, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 699, 315,
	316, 668, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 700, 701, 0, 0, 328,
	329, 669, 670, 641, 330, 331, 2535, 333, 0, 0,
	334, 335, 336, 337, 661, 338, 0, 404, 339, 340,
	341, 405, 702, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 615, 0, 646, 635, 636,
	633, 634, 625, 0, 0, 613, 0, 0, 0, 0,
	611, 612, 0, 184, 185, 0, 186, 0, 0, 621,
	0, 663, 628, 0, 0, 624, 187, 188, 189, 349,
	678, 351, 679, 190, 680, 681, 0, 191, 355, 356,
	192, 193, 631, 662, 682, 683, 359, 0, 194, 674,
	0, 654, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 708, 205, 206,
	207, 0, 655, 656, 658, 0, 657, 659, 208, 209,
	414, 210, 684, 211, 685, 686, 0, 212, 0, 213,
	0, 214, 0, 0, 677, 216, 0, 217, 0, 0,
	0, 619, 218, 220, 219, 221, 664, 665, 642, 709,
	0, 0, 0, 0, 0, 222, 223, 687, 688, 689,
	0, 224, 0, 225, 0, 0, 710, 0, 226, 675,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	671, 673, 712, 0, 374, 234, 0, 231, 0, 711,
	232, 690, 233, 691, 692, 693, 694, 695, 0, 653,
	0, 713, 235, 236, 237, 714, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 676, 715, 243, 244, 716,
	0, 245, 246, 0, 0, 247, 0, 248, 717, 249,
	250, 252, 385, 251, 718, 253, 254, 256, 255, 0,
	0, 643, 672, 257, 696, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 719, 263, 720, 666,
	264, 265, 266, 267, 268, 269, 0, 270, 667, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 697, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 721, 293, 294,
	1572, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 660, 308, 296, 297, 309, 722,
	310, 698, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 699, 315, 316, 668, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 700, 701,
	0, 0, 328, 329, 669, 670, 641, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 661, 338, 0,
	404, 339, 340, 341, 405, 702, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	646, 635, 636, 633, 634, 625, 0, 0, 1570, 0,
	0, 0, 0, 1568, 1569, 0, 184, 185, 0, 186,
	0, 0, 1571, 0, 663, 628, 0, 0, 624, 187,
	188, 189, 349, 678, 351, 679, 190, 680, 681, 0,
	191, 355, 356, 192, 193, 0, 662, 682, 683, 359,
	0, 194, 674, 0, 654, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	708, 205, 206, 207, 0, 655, 656, 658, 0, 657,
	659, 208, 209, 414, 210, 684, 211, 685, 686, 0,
	212, 0, 213, 0, 214, 0, 0, 677, 216, 0,
	217, 0, 0, 0, 364, 218, 220, 219, 221, 664,
	665, 642, 709, 0, 0, 0, 0, 0, 222, 223,
	687, 688, 689, 0, 224, 0, 225, 0, 0, 710,
	0, 226, 675, 0, 371, 0, 0, 227, 228, 0,
	0, 229, 230, 671, 673, 712, 0, 374, 234, 0,
	231, 0, 711, 232, 690, 233, 691, 692, 693, 694,
	695, 0, 653, 0, 713, 235, 236, 237, 714, 382,
	383, 238, 239, 240, 0, 242, 241, 0, 676, 715,
	243, 244, 716, 0, 245, 246, 0, 0, 247, 0,
	248, 717, 249, 250, 252, 385, 251, 718, 253, 254,
	256, 255, 0, 0, 643, 672, 257, 696, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 388, 719,
	263, 720, 666, 264, 265, 266, 267, 268, 269, 0,
	270, 667, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 697, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	721, 293, 294, 1572, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 660, 308, 296,
	297, 309, 722, 310, 698, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 699, 315, 316, 668, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 700, 701, 0, 0, 328, 329, 669, 670, 641,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	661, 338, 0, 404, 339, 340, 341, 405, 702, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 646, 635, 636, 633, 634, 625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 1571, 0, 663, 628, 0,
	0, 624, 187, 188, 189, 0, 678, 351, 679, 190,
	680, 681, 0, 191, 355, 356, 192, 193, 631, 662,
	682, 683, 359, 0, 194, 674, 0, 654, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 708, 205, 206, 2536, 0, 655, 656,
	658, 0, 657, 659, 208, 209, 414, 210, 684, 211,
	685, 686, 0, 212, 0, 213, 0, 214, 0, 0,
	677, 216, 0, 217, 0, 0, 0, 619, 218, 220,
	219, 221, 664, 665, 642, 709, 0, 0, 0, 0,
	0, 222, 223, 687, 688, 689, 0, 224, 0, 225,
	0, 0, 710, 0, 226, 675, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 671, 673, 0, 0,
	374, 234, 0, 231, 0, 711, 232, 690, 233, 691,
	692, 693, 694, 695, 0, 653, 0, 0, 235, 236,
	237, 714, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 676, 715, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 717, 249, 250, 252, 385, 251,
	718, 253, 254, 256, 255, 614, 0, 643, 672, 257,
	696, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 719, 263, 720, 666, 264, 265, 266, 267,
	268, 269, 0, 270, 667, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 697, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 721, 293, 294, 620, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	660, 308, 296, 297, 309, 0, 310, 698, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 699, 315, 316,
	668, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 700, 701, 0, 0, 328, 329,
	669, 670, 641, 330, 331, 2535, 333, 0, 0, 334,
	335, 336, 337, 661, 338, 0, 404, 339, 340, 341,
	405, 702, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 611,
	612, 0, 184, 185, 0, 186, 0, 0, 621, 0,
	663, 0, 0, 0, 624, 187, 188, 189, 349, 350,
	351, 352, 190, 353, 354, 0, 191, 355, 356, 192,
	193, 0, 662, 357, 358, 359, 0, 194, 674, 0,
	654, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 708, 205, 206, 207,
	0, 655, 656, 658, 0, 657, 659, 208, 209, 414,
	210, 361, 211, 362, 363, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	364, 218, 220, 219, 221, 664, 665, 0, 709, 0,
	0, 0, 0, 0, 222, 223, 367, 368, 369, 0,
	224, 0, 225, 0, 0, 710, 0, 226, 675, 0,
	371, 0, 0, 227, 228, 0, 0, 229, 230, 671,
	673, 712, 0, 374, 234, 0, 231, 0, 711, 232,
	375, 233, 376, 377, 378, 379, 380, 0, 381, 0,
	713, 235, 236, 237, 714, 382, 383, 238, 239, 240,
	0, 242, 241, 0, 676, 715, 243, 244, 716, 0,
	245, 246, 0, 0, 247, 0, 248, 717, 249, 250,
	252, 385, 251, 718, 253, 254, 256, 255, 0, 0,
	0, 672, 257, 387, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 388, 719, 263, 720, 666, 264,
	265, 266, 267, 268, 269, 0, 270, 667, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 721, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 660, 308, 296, 297, 309, 722, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 668, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 669, 670, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 661, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 926, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 2157, 0, 348, 0, 0, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 784, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 708,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 709, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 710, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 712, 0, 374, 234, 0, 231,
	0, 711, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 713, 235, 236, 237, 714, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 715, 243,
	244, 716, 0, 245, 246, 0, 0, 247, 0, 248,
	717, 249, 250, 252, 385, 251, 718, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 719, 263,
	720, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 721,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	140, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 722, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 142,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 933, 406, 0, 0,
	342, 0, 0, 0, 134, 343, 344, 345, 346, 347,
	597, 135, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 126, 0, 348, 0, 0, 0,
	0, 187, 188, 189, 349, 350, 351, 352, 190, 353,
	354, 0, 191, 355, 356, 192, 193, 0, 0, 357,
	358, 359, 0, 194, 360, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 414, 210, 361, 211, 362,
	363, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 364, 218, 220, 219,
	221, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 367, 368, 369, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 370, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 372, 373, 0, 0, 374,
	234, 0, 231, 0, 0, 232, 375, 233, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 235, 236, 237,
	0, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	384, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 385, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 386, 257, 387,
	258, 259, 0, 260, 0, 762, 261, 0, 0, 262,
	388, 0, 263, 0, 389, 264, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 140, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 142, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 933,
	406, 0, 0, 342, 0, 0, 0, 134, 343, 344,
	345, 346, 347, 0, 135, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 756, 0, 1203, 0, 348,
	0, 0, 0, 0, 187, 188, 189, 349, 350, 351,
	352, 190, 353, 354, 0, 191, 355, 356, 192, 193,
	0, 0, 357, 358, 359, 0, 194, 360, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 414, 210,
	361, 211, 362, 363, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 364,
	218, 220, 219, 221, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 367, 368, 369, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 370, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	0, 0, 374, 234, 0, 231, 0, 0, 232, 375,
	233, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	235, 236, 237, 0, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 384, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	385, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	386, 257, 387, 258, 259, 0, 260, 0, 762, 261,
	0, 0, 262, 388, 0, 263, 0, 389, 264, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 140, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 142, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 933, 406, 0, 0, 342, 0, 0, 0,
	134, 343, 344, 345, 346, 347, 597, 135, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 756, 0,
	1203, 0, 348, 0, 0, 0, 0, 187, 188, 189,
	349, 350, 351, 352, 190, 353, 354, 0, 191, 355,
	356, 192, 193, 0, 0, 357, 358, 359, 0, 194,
	360, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 414, 210, 361, 211, 362, 363, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 364, 218, 220, 219, 221, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 367, 368,
	369, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	370, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 372, 373, 0, 0, 374, 234, 0, 231, 0,
	0, 232, 375, 233, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 235, 236, 237, 0, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 384, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 385, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 386, 257, 387, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 388, 0, 263, 0,
	389, 264, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 140,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 142, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 933, 406, 0, 0, 342,
	0, 0, 0, 134, 343, 344, 345, 346, 347, 1900,
	135, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 126, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 372, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 762, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 755, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 756, 0, 761, 0, 348, 0,
	0, 0, 0, 187, 188, 189, 349, 350, 351, 352,
	190, 353, 354, 0, 191, 355, 356, 192, 193, 0,
	0, 357, 358, 359, 0, 194, 360, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 414, 210, 361,
	211, 362, 363, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 364, 218,
	220, 219, 221, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 367, 368, 369, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 370, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 372, 373, 0,
	0, 374, 234, 0, 231, 0, 0, 232, 375, 233,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 235,
	236, 237, 0, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 384, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 385,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 386,
	257, 387, 258, 259, 0, 260, 0, 762, 261, 0,
	0, 262, 388, 0, 263, 0, 389, 264, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 756, 0, 761,
	348, 0, 0, 0, 0, 187, 188, 189, 349, 350,
	351, 352, 190, 353, 354, 0, 191, 355, 356, 192,
	193, 0, 0, 357, 358, 359, 0, 194, 360, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 414,
	210, 361, 211, 362, 363, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	364, 218, 220, 219, 221, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 367, 368, 369, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 370, 0,
	371, 0, 0, 227, 228, 0, 0, 229, 230, 372,
	373, 0, 0, 374, 234, 0, 231, 0, 0, 232,
	375, 233, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 235, 236, 237, 0, 382, 383, 238, 239, 240,
	0, 242, 241, 0, 384, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 385, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 386, 257, 387, 258, 259, 0, 260, 0, 762,
	261, 0, 0, 262, 388, 0, 263, 0, 389, 264,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 756,
	0, 761, 348, 0, 0, 0, 0, 187, 188, 189,
	349, 350, 351, 352, 190, 353, 354, 0, 191, 355,
	356, 192, 193, 0, 0, 357, 358, 359, 0, 194,
	360, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 414, 210, 361, 211, 362, 363, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 364, 218, 220, 219, 221, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 367, 368,
	369, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	370, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 372, 373, 0, 0, 374, 234, 0, 231, 0,
	0, 232, 375, 233, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 235, 236, 237, 0, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 384, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 385, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 386, 257, 387, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 388, 0, 263, 0,
	389, 264, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 1236, 0, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 1713, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 372, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 2073, 348, 0, 0,
	0, 0, 187, 188, 189, 349, 350, 351, 352, 190,
	353, 354, 0, 191, 355, 356, 192, 193, 0, 0,
	357, 358, 359, 0, 194, 360, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 414, 210, 361, 211,
	362, 363, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 364, 218, 220,
	219, 221, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 367, 368, 369, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 370, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 372, 373, 0, 0,
	374, 234, 0, 231, 0, 0, 232, 375, 233, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 235, 236,
	237, 0, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 384, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 385, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 386, 257,
	387, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 0, 263, 0, 389, 264, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 646, 635, 636, 633, 634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 1206, 348,
	0, 0, 0, 0, 187, 188, 189, 349, 678, 351,
	679, 190, 680, 681, 0, 191, 355, 356, 192, 193,
	0, 0, 682, 683, 359, 0, 194, 360, 0, 784,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 708, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 414, 210,
	684, 211, 685, 686, 0, 212, 0, 213, 0, 214,
	0, 0, 677, 216, 0, 217, 0, 0, 0, 364,
	218, 220, 219, 221, 365, 366, 642, 709, 0, 0,
	0, 0, 0, 222, 223, 687, 688, 689, 0, 224,
	0, 225, 0, 0, 710, 0, 226, 370, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	712, 0, 374, 234, 0, 231, 0, 711, 232, 690,
	233, 691, 692, 693, 694, 695, 0, 653, 0, 713,
	235, 236, 237, 714, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 384, 715, 243, 244, 716, 0, 245,
	246, 0, 0, 247, 0, 248, 717, 249, 250, 252,
	385, 251, 718, 253, 254, 256, 255, 0, 0, 643,
	386, 257, 696, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 719, 263, 720, 389, 264, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 697, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 721, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 722, 310, 698,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 699,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 700, 701, 0, 0,
	328, 329, 402, 403, 641, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 702, 0, 500, 342, 181, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 187, 188, 189, 349,
	350, 351, 352, 190, 353, 354, 0, 191, 355, 356,
	192, 193, 0, 0, 357, 358, 359, 0, 194, 360,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	177, 210, 361, 211, 362, 363, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 364, 218, 220, 219, 221, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 367, 368, 369,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 370,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	372, 373, 0, 0, 374, 234, 0, 231, 0, 0,
	232, 375, 233, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 235, 236, 237, 0, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 384, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 385, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 386, 257, 387, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 0, 263, 0, 389,
	264, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 176, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 174, 342, 181,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 180, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 176,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 181,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 0, 0, 180, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 176,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 181,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 0, 0, 180, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	983, 0, 929, 987, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 184, 185,
	0, 186, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 187, 188, 189, 349, 350, 351, 352, 190, 353,
	354, 0, 191, 355, 356, 192, 193, 0, 0, 357,
	358, 359, 0, 194, 360, 0, 784, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 708, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 414, 210, 361, 211, 362,
	363, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 364, 218, 220, 219,
	221, 365, 366, 0, 709, 0, 0, 0, 0, 0,
	222, 223, 367, 368, 369, 0, 224, 0, 225, 0,
	0, 710, 0, 226, 370, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 372, 373, 712, 0, 374,
	234, 0, 231, 0, 711, 232, 375, 233, 376, 377,
	378, 379, 380, 0, 381, 0, 713, 235, 236, 237,
	714, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	384, 715, 243, 244, 716, 0, 245, 246, 0, 0,
	247, 0, 248, 717, 249, 250, 252, 385, 251, 718,
	253, 254, 256, 255, 0, 0, 0, 386, 257, 387,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	388, 719, 263, 720, 389, 264, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 721, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 722, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 929, 987, 342, 0, 0, 985, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 784, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 708, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 709, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	710, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 372, 373, 712, 0, 374, 234,
	0, 231, 0, 711, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 713, 235, 236, 237, 714,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	715, 243, 244, 716, 0, 245, 246, 0, 0, 247,
	0, 248, 717, 249, 250, 252, 385, 251, 718, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	719, 263, 720, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 721, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 722, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	929, 987, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 187,
	188, 189, 349, 350, 351, 352, 190, 353, 354, 0,
	191, 355, 356, 192, 193, 0, 0, 357, 358, 359,
	0, 194, 360, 0, 784, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	708, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 414, 210, 361, 211, 362, 363, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 364, 218, 220, 219, 221, 365,
	366, 0, 709, 0, 0, 0, 0, 0, 222, 223,
	367, 368, 369, 0, 224, 0, 225, 0, 0, 710,
	0, 226, 370, 0, 371, 0, 0, 227, 228, 0,
	0, 229, 230, 372, 373, 712, 0, 374, 234, 0,
	231, 0, 711, 232, 375, 233, 376, 377, 378, 379,
	380, 0, 381, 0, 713, 235, 236, 237, 714, 382,
	383, 238, 239, 240, 0, 242, 241, 0, 384, 715,
	243, 244, 716, 0, 245, 246, 0, 0, 247, 0,
	248, 717, 249, 250, 252, 385, 251, 718, 253, 254,
	256, 255, 0, 0, 0, 386, 257, 387, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 388, 719,
	263, 720, 389, 264, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	721, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 722, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 929,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 784, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 708,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 709, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 710, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 712, 0, 374, 234, 0, 231,
	0, 711, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 713, 235, 236, 237, 714, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 715, 243,
	244, 716, 0, 245, 246, 0, 0, 247, 0, 248,
	717, 249, 250, 252, 385, 251, 718, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 719, 263,
	720, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 721,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 722, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 181, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 187, 188, 189,
	349, 350, 351, 352, 190, 353, 354, 0, 191, 355,
	356, 192, 193, 0, 0, 357, 358, 359, 1648, 194,
	360, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 1646, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 414, 210, 361, 211, 362, 363, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 364, 218, 220, 219, 221, 365, 366, 0,
	1690, 0, 0, 0, 0, 0, 222, 223, 367, 368,
	369, 0, 224, 0, 225, 1651, 0, 0, 0, 226,
	370, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 372, 373, 0, 0, 374, 234, 1688, 231, 0,
	0, 232, 375, 233, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 235, 236, 237, 0, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 384, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 385, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 386, 257, 387, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 388, 0, 263, 0,
	389, 264, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 1650, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 1689, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 181, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 187, 188, 189, 349,
	350, 351, 352, 190, 353, 354, 0, 191, 355, 356,
	192, 193, 0, 0, 357, 358, 359, 1648, 194, 360,
	0, 0, 1643, 195, 196, 197, 0, 199, 200, 201,
	198, 1646, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	414, 210, 361, 211, 362, 363, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 364, 218, 220, 219, 221, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 367, 368, 369,
	0, 224, 0, 225, 1651, 0, 0, 0, 226, 370,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	1642, 373, 0, 0, 374, 234, 0, 231, 0, 0,
	232, 375, 233, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 235, 236, 237, 0, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 384, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 385, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 386, 257, 387, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 0, 263, 0, 389,
	264, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 1650, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 1649, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 904, 342, 181,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 762, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 768,
	342, 181, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 770, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 762, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 764, 342, 181, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 187, 188, 189, 349, 350, 351, 352, 190,
	353, 354, 0, 191, 355, 356, 192, 193, 0, 0,
	357, 358, 359, 0, 194, 360, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 414, 210, 361, 211,
	362, 363, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 364, 218, 220,
	219, 221, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 367, 368, 369, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 370, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 766, 373, 0, 0,
	374, 234, 0, 231, 0, 0, 232, 375, 233, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 235, 236,
	237, 0, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 384, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 385, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 386, 257,
	387, 258, 259, 0, 260, 0, 762, 261, 0, 0,
	262, 388, 0, 263, 0, 389, 264, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 431, 342, 181, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 430, 186, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 187, 188, 189, 349, 350, 351,
	352, 190, 353, 354, 0, 191, 355, 356, 192, 193,
	0, 0, 357, 358, 359, 0, 194, 360, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 414, 210,
	361, 211, 362, 363, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 364,
	218, 220, 219, 221, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 367, 368, 369, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 370, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	0, 0, 374, 234, 0, 231, 0, 0, 232, 375,
	233, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	235, 236, 237, 0, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 384, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	385, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	386, 257, 387, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 0, 263, 0, 389, 264, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 429,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 181, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 348, 0,
	1631, 0, 0, 187, 188, 189, 349, 350, 351, 352,
	190, 353, 354, 0, 191, 355, 356, 192, 193, 0,
	0, 357, 358, 359, 0, 194, 360, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 414, 210, 361,
	211, 362, 363, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 364, 218,
	220, 219, 221, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 367, 368, 369, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 370, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 372, 373, 0,
	0, 374, 234, 0, 231, 0, 0, 232, 375, 233,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 235,
	236, 237, 0, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 384, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 385,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 386,
	257, 387, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 388, 0, 263, 0, 389, 264, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 181, 2223, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 187, 188, 189, 349, 350, 351, 352, 190,
	353, 354, 0, 191, 355, 356, 192, 193, 0, 0,
	357, 358, 359, 0, 194, 360, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 414, 210, 361, 211,
	362, 363, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 364, 218, 220,
	219, 221, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 367, 368, 369, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 370, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 372, 373, 0, 0,
	374, 234, 0, 231, 0, 0, 232, 375, 233, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 235, 236,
	237, 0, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 384, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 385, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 386, 257,
	387, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 0, 263, 0, 389, 264, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 181, 2223, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 187, 188, 189, 349, 350, 351, 352, 190, 353,
	354, 0, 191, 355, 356, 192, 193, 0, 0, 357,
	358, 359, 0, 194, 360, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 414, 210, 361, 211, 362,
	363, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 364, 218, 220, 219,
	221, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 367, 368, 369, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 370, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 372, 373, 0, 0, 374,
	234, 0, 231, 0, 0, 232, 375, 233, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 235, 236, 237,
	0, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	384, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 385, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 386, 257, 387,
	258, 259, 0, 260, 0, 0, 2220, 0, 0, 262,
	388, 0, 263, 0, 389, 264, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 181, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 372, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 762, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 1394, 342, 181, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 187, 188, 189, 349, 350, 351, 352, 190,
	353, 354, 0, 191, 355, 356, 192, 193, 0, 0,
	357, 358, 359, 0, 194, 360, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 414, 210, 361, 211,
	362, 363, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 364, 218, 220,
	219, 221, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 367, 368, 369, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 370, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 372, 373, 0, 0,
	374, 234, 0, 231, 0, 0, 232, 375, 233, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 235, 236,
	237, 0, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 384, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 385, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 386, 257,
	387, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 0, 263, 0, 389, 264, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 1392, 342, 181, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 187, 188, 189, 349, 350, 351,
	352, 190, 353, 354, 0, 191, 355, 356, 192, 193,
	0, 0, 357, 358, 359, 0, 194, 360, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 414, 210,
	361, 211, 362, 363, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 364,
	218, 220, 219, 221, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 367, 368, 369, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 370, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	0, 0, 374, 234, 0, 231, 0, 0, 232, 375,
	233, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	235, 236, 237, 0, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 384, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	385, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	386, 257, 387, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 0, 263, 0, 389, 264, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 181, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	184, 185, 1374, 186, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 187, 188, 189, 349, 350, 351, 352,
	190, 353, 354, 0, 191, 355, 356, 192, 193, 0,
	0, 357, 358, 359, 0, 194, 360, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 414, 210, 361,
	211, 362, 363, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 364, 218,
	220, 219, 221, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 367, 368, 369, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 370, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 372, 373, 0,
	0, 374, 234, 0, 231, 0, 0, 232, 375, 233,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 235,
	236, 237, 0, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 384, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 385,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 386,
	257, 387, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 388, 0, 263, 0, 389, 264, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 526, 342, 181, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 187, 188, 189, 349, 350,
	351, 352, 190, 353, 354, 0, 191, 355, 356, 192,
	193, 0, 0, 357, 358, 962, 0, 194, 360, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 414,
	210, 361, 211, 362, 363, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	364, 218, 220, 219, 221, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 367, 368, 369, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 370, 0,
	371, 0, 0, 227, 228, 0, 0, 229, 230, 372,
	373, 0, 0, 374, 234, 0, 231, 0, 0, 232,
	375, 233, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 235, 236, 237, 0, 382, 383, 238, 239, 240,
	0, 242, 241, 0, 384, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 385, 528, 0, 253, 254, 256, 255, 0, 0,
	0, 386, 257, 387, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 388, 0, 263, 0, 389, 264,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 523, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 1250, 342, 181, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 187, 188, 189,
	349, 350, 351, 352, 190, 353, 354, 0, 191, 355,
	356, 192, 193, 0, 0, 357, 358, 359, 0, 194,
	360, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 414, 210, 361, 211, 362, 363, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 364, 218, 220, 219, 221, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 367, 368,
	369, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	370, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 1249, 373, 0, 0, 374, 234, 0, 231, 0,
	0, 232, 375, 233, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 235, 236, 237, 0, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 384, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 385, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 386, 257, 387, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 388, 0, 263, 0,
	389, 264, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 526, 342,
	181, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 187,
	188, 189, 349, 350, 351, 352, 190, 353, 354, 0,
	191, 355, 356, 192, 193, 0, 0, 357, 358, 962,
	0, 194, 360, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 414, 210, 361, 211, 362, 363, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 364, 218, 220, 219, 221, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	367, 368, 369, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 370, 0, 371, 0, 0, 227, 228, 0,
	0, 229, 230, 372, 373, 0, 0, 374, 234, 0,
	231, 0, 0, 232, 375, 233, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 235, 236, 237, 0, 382,
	383, 238, 239, 240, 0, 242, 241, 0, 384, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 385, 528, 0, 253, 254,
	256, 255, 0, 0, 0, 386, 257, 387, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 388, 0,
	263, 0, 389, 264, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	523, 400, 401, 0, 0, 328, 963, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	526, 342, 181, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 187, 188, 189, 349, 350, 351, 352, 190, 353,
	354, 0, 191, 355, 356, 192, 193, 0, 0, 357,
	358, 359, 0, 517, 360, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 414, 210, 361, 211, 362,
	363, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 364, 218, 220, 219,
	221, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 367, 368, 369, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 370, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 372, 373, 0, 0, 374,
	234, 0, 231, 0, 0, 232, 375, 233, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 235, 236, 237,
	0, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	384, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 385, 528, 0,
	253, 254, 256, 255, 0, 0, 0, 386, 257, 387,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	388, 0, 263, 0, 389, 264, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 946, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 523, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 922, 342, 181, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 187, 188, 189, 349, 350, 351, 352,
	190, 353, 354, 0, 191, 355, 356, 192, 193, 0,
	0, 357, 358, 359, 0, 194, 360, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 414, 210, 361,
	211, 362, 363, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 364, 218,
	220, 219, 221, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 367, 368, 369, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 370, 0, 371, 0,
	0, 227, 228, 0, 0, 229, 230, 921, 373, 0,
	0, 374, 234, 0, 231, 0, 0, 232, 375, 233,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 235,
	236, 237, 0, 382, 383, 238, 239, 240, 0, 242,
	241, 0, 384, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 385,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 386,
	257, 387, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 388, 0, 263, 0, 389, 264, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 919, 342, 181, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 187, 188, 189, 349, 350,
	351, 352, 190, 353, 354, 0, 191, 355, 356, 192,
	193, 0, 0, 357, 358, 359, 0, 194, 360, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 414,
	210, 361, 211, 362, 363, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	364, 218, 220, 219, 221, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 367, 368, 369, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 370, 0,
	371, 0, 0, 227, 228, 0, 0, 229, 230, 918,
	373, 0, 0, 374, 234, 0, 231, 0, 0, 232,
	375, 233, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 235, 236, 237, 0, 382, 383, 238, 239, 240,
	0, 242, 241, 0, 384, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 385, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 386, 257, 387, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 388, 0, 263, 0, 389, 264,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 915, 342, 181, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 187, 188, 189,
	349, 350, 351, 352, 190, 353, 354, 0, 191, 355,
	356, 192, 193, 0, 0, 357, 358, 359, 0, 194,
	360, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 414, 210, 361, 211, 362, 363, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 364, 218, 220, 219, 221, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 367, 368,
	369, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	370, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 914, 373, 0, 0, 374, 234, 0, 231, 0,
	0, 232, 375, 233, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 235, 236, 237, 0, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 384, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 385, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 386, 257, 387, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 388, 0, 263, 0,
	389, 264, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 912, 342,
	181, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 187,
	188, 189, 349, 350, 351, 352, 190, 353, 354, 0,
	191, 355, 356, 192, 193, 0, 0, 357, 358, 359,
	0, 194, 360, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 414, 210, 361, 211, 362, 363, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 364, 218, 220, 219, 221, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	367, 368, 369, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 370, 0, 371, 0, 0, 227, 228, 0,
	0, 229, 230, 911, 373, 0, 0, 374, 234, 0,
	231, 0, 0, 232, 375, 233, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 235, 236, 237, 0, 382,
	383, 238, 239, 240, 0, 242, 241, 0, 384, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 385, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 386, 257, 387, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 388, 0,
	263, 0, 389, 264, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	908, 342, 181, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 187, 188, 189, 349, 350, 351, 352, 190, 353,
	354, 0, 191, 355, 356, 192, 193, 0, 0, 357,
	358, 359, 0, 194, 360, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 414, 210, 361, 211, 362,
	363, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 364, 218, 220, 219,
	221, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 367, 368, 369, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 370, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 907, 373, 0, 0, 374,
	234, 0, 231, 0, 0, 232, 375, 233, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 235, 236, 237,
	0, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	384, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 385, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 386, 257, 387,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	388, 0, 263, 0, 389, 264, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 181, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 184, 185, 896,
	186, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 372, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 894, 342, 181, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 187, 188, 189, 349, 350, 351, 352, 190,
	353, 354, 0, 191, 355, 356, 192, 193, 0, 0,
	357, 358, 359, 0, 194, 360, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 414, 210, 361, 211,
	362, 363, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 364, 218, 220,
	219, 221, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 367, 368, 369, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 370, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 893, 373, 0, 0,
	374, 234, 0, 231, 0, 0, 232, 375, 233, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 235, 236,
	237, 0, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 384, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 385, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 386, 257,
	387, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 0, 263, 0, 389, 264, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 890, 342, 181, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 187, 188, 189, 349, 350, 351,
	352, 190, 353, 354, 0, 191, 355, 356, 192, 193,
	0, 0, 357, 358, 359, 0, 194, 360, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 414, 210,
	361, 211, 362, 363, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 364,
	218, 220, 219, 221, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 367, 368, 369, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 370, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	0, 0, 374, 234, 0, 231, 0, 0, 232, 375,
	233, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	235, 236, 237, 0, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 384, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	385, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	386, 257, 387, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 0, 263, 0, 389, 264, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 888, 342, 181, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 187, 188, 189, 349,
	350, 351, 352, 190, 353, 354, 0, 191, 355, 356,
	192, 193, 0, 0, 357, 358, 359, 0, 194, 360,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	414, 210, 361, 211, 362, 363, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 364, 218, 220, 219, 221, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 367, 368, 369,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 370,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	372, 373, 0, 0, 374, 234, 0, 231, 0, 0,
	232, 375, 233, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 235, 236, 237, 0, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 384, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 385, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 386, 257, 387, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 0, 263, 0, 389,
	264, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 884, 342, 181,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 886, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 774,
	342, 181, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 776, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 772, 342, 181, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 187, 188, 189, 349, 350, 351, 352, 190,
	353, 354, 0, 191, 355, 356, 192, 193, 0, 0,
	357, 358, 359, 0, 194, 360, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 414, 210, 361, 211,
	362, 363, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 364, 218, 220,
	219, 221, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 367, 368, 369, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 370, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 372, 373, 0, 0,
	374, 234, 0, 231, 0, 0, 232, 375, 233, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 235, 236,
	237, 0, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 384, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 385, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 386, 257,
	387, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 0, 263, 0, 389, 264, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 526, 342, 181, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 187, 188, 189, 349, 350, 351,
	352, 190, 353, 354, 0, 191, 355, 356, 192, 193,
	0, 0, 357, 358, 359, 0, 517, 360, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 414, 210,
	361, 211, 362, 363, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 364,
	218, 220, 219, 221, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 367, 368, 369, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 370, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	0, 0, 374, 234, 0, 231, 0, 0, 232, 375,
	233, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	235, 236, 237, 0, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 384, 0, 243, 244, 0, 0, 245,
	516, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	385, 528, 0, 253, 254, 256, 255, 0, 0, 0,
	386, 257, 387, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 0, 263, 0, 389, 264, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 518, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	519, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 523, 400, 401, 0, 0,
	328, 521, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 508, 342, 181, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 187, 188, 189, 349,
	350, 351, 352, 190, 353, 354, 0, 191, 355, 356,
	192, 193, 0, 0, 357, 358, 359, 0, 194, 360,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	414, 210, 361, 211, 362, 363, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 364, 218, 220, 219, 221, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 367, 368, 369,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 370,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	372, 373, 0, 0, 374, 234, 0, 231, 0, 0,
	232, 375, 233, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 235, 236, 237, 0, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 384, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 385, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 386, 257, 387, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 0, 263, 0, 389,
	264, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 509, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 506, 342, 181,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 372, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 498,
	342, 181, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 372, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 454, 342, 181, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 187, 188, 189, 349, 350, 351, 352, 190,
	353, 354, 0, 191, 355, 356, 192, 193, 0, 0,
	357, 358, 359, 0, 194, 360, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 414, 210, 361, 211,
	362, 363, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 364, 218, 220,
	219, 221, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 367, 368, 369, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 370, 0, 371, 0, 0,
	227, 228, 0, 0, 229, 230, 372, 373, 0, 0,
	374, 234, 0, 231, 0, 0, 232, 375, 233, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 235, 236,
	237, 0, 382, 383, 238, 239, 240, 0, 242, 241,
	0, 384, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 385, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 386, 257,
	387, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 388, 0, 263, 0, 389, 264, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 181, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 187, 188, 189, 349, 350, 351, 352, 190, 353,
	354, 0, 191, 355, 356, 192, 193, 0, 0, 357,
	358, 359, 0, 194, 360, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 414, 210, 361, 211, 362,
	363, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 364, 218, 220, 219,
	221, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 367, 368, 369, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 370, 0, 371, 0, 0, 227,
	228, 0, 0, 229, 230, 372, 373, 0, 0, 374,
	234, 0, 231, 0, 0, 232, 375, 233, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 235, 236, 237,
	0, 382, 383, 238, 239, 240, 0, 242, 241, 0,
	384, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 385, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 386, 257, 387,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	388, 0, 263, 0, 389, 264, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 181, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	187, 188, 189, 349, 350, 351, 352, 190, 353, 354,
	0, 191, 355, 356, 192, 193, 0, 0, 357, 358,
	359, 0, 194, 360, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 414, 210, 361, 211, 362, 363,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 364, 218, 220, 219, 221,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 367, 368, 369, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 370, 0, 371, 0, 0, 227, 228,
	0, 0, 229, 230, 1947, 373, 0, 0, 374, 234,
	0, 231, 0, 0, 232, 375, 233, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 235, 236, 237, 0,
	382, 383, 238, 239, 240, 0, 242, 241, 0, 384,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 385, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 386, 257, 387, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 388,
	0, 263, 0, 389, 264, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	181, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 187,
	188, 189, 349, 350, 351, 352, 190, 353, 354, 0,
	191, 355, 356, 192, 193, 0, 0, 357, 358, 359,
	0, 194, 360, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 414, 210, 361, 211, 362, 363, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 364, 218, 220, 219, 221, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	367, 368, 369, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 370, 0, 371, 0, 0, 227, 228, 0,
	0, 229, 230, 1945, 373, 0, 0, 374, 234, 0,
	231, 0, 0, 232, 375, 233, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 235, 236, 237, 0, 382,
	383, 238, 239, 240, 0, 242, 241, 0, 384, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 385, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 386, 257, 387, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 388, 0,
	263, 0, 389, 264, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 181,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 187, 188,
	189, 349, 350, 351, 352, 190, 353, 354, 0, 191,
	355, 356, 192, 193, 0, 0, 357, 358, 359, 0,
	194, 360, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 414, 210, 361, 211, 362, 363, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 364, 218, 220, 219, 221, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 367,
	368, 369, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 370, 0, 371, 0, 0, 227, 228, 0, 0,
	229, 230, 1934, 373, 0, 0, 374, 234, 0, 231,
	0, 0, 232, 375, 233, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 235, 236, 237, 0, 382, 383,
	238, 239, 240, 0, 242, 241, 0, 384, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 385, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 386, 257, 387, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 388, 0, 263,
	0, 389, 264, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 181, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 187, 188, 189,
	349, 350, 351, 352, 190, 353, 354, 0, 191, 355,
	356, 192, 193, 0, 0, 357, 358, 359, 0, 194,
	360, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 414, 210, 361, 211, 362, 363, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 364, 218, 220, 219, 221, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 367, 368,
	369, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	370, 0, 371, 0, 0, 227, 228, 0, 0, 229,
	230, 372, 373, 0, 0, 374, 234, 0, 231, 0,
	0, 232, 375, 233, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 235, 236, 237, 0, 382, 383, 238,
	239, 240, 0, 242, 241, 0, 384, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 385, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 386, 257, 387, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 388, 0, 263, 0,
	389, 264, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 509, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 181, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 348, 0, 1260, 0, 0, 187, 188, 189, 349,
	350, 351, 352, 190, 353, 354, 0, 191, 355, 356,
	192, 193, 0, 0, 357, 358, 359, 0, 194, 360,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	414, 210, 361, 211, 362, 363, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 364, 218, 220, 219, 221, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 367, 368, 369,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 370,
	0, 371, 0, 0, 227, 228, 0, 0, 229, 230,
	372, 373, 0, 0, 374, 234, 0, 231, 0, 0,
	232, 375, 233, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 235, 236, 237, 0, 382, 383, 238, 239,
	240, 0, 242, 241, 0, 384, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 385, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 386, 257, 387, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 388, 0, 263, 0, 389,
	264, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 0, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 181, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 187, 188, 189, 349, 350,
	351, 352, 190, 353, 354, 0, 191, 355, 356, 192,
	193, 0, 0, 357, 358, 359, 0, 194, 360, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 414,
	210, 361, 211, 362, 363, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	364, 218, 220, 219, 221, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 367, 368, 369, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 370, 0,
	371, 0, 0, 227, 228, 0, 0, 229, 230, 372,
	373, 0, 0, 374, 234, 0, 231, 0, 0, 232,
	375, 233, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 235, 236, 237, 0, 382, 383, 238, 239, 240,
	0, 242, 241, 0, 384, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 385, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 386, 257, 387, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 388, 0, 263, 0, 389, 264,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 738, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 181, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 187, 188, 189, 349, 350, 351,
	352, 190, 353, 354, 0, 191, 355, 356, 192, 193,
	0, 0, 357, 358, 359, 0, 194, 360, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 414, 210,
	361, 211, 362, 363, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 364,
	218, 220, 219, 221, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 367, 368, 369, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 370, 0, 371,
	0, 0, 227, 228, 0, 0, 229, 230, 372, 373,
	0, 0, 374, 234, 0, 231, 0, 0, 232, 375,
	233, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	235, 236, 237, 0, 382, 383, 238, 239, 240, 0,
	242, 241, 0, 384, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	385, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	386, 257, 387, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 388, 0, 263, 0, 389, 264, 265,
	0, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 0, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 0,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 1057, 1058, 0, 1087,
	1088, 1089, 1097, 1098, 1099, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 1059, 0, 0, 0, 0, 0, 1079,
	1090, 0, 0, 0, 0, 0, 1076, 1060, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1083, 1084, 1085, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1102, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 0, 0, 0, 0,
	0, 1065, 0, 0, 1100, 0, 0, 0, 0, 1057,
	1058, 0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0,
	0, 0, 1092, 1094, 1102, 1090, 0, 0, 0, 1080,
	0, 0, 1060, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 1059, 0, 0, 0,
	1092, 0, 1079, 0, 0, 0, 0, 1080, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 1083, 1084,
	1085, 0, 1095, 0, 0, 0, 1065, 0, 1086, 0,
	0, 0, 0, 0, 1842, 1843, 0, 1860, 1861, 1862,
	0, 0, 0, 1081, 0, 0, 0, 0, 1094, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 1857, 0, 0,
	0, 1093, 1080, 0, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 0, 0, 0, 1091, 0,
	1882, 0, 0, 0, 0, 0, 0, 0, 0, 1093,
	0, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096,
	0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	0, 1848, 0, 1086, 0, 0, 0, 0, 1834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 1057, 1058, 1864, 1087, 1088, 1089, 1097, 1098,
	1099, 0, 0, 0, 0, 1095, 0, 0, 1090, 0,
	0, 0, 1863, 0, 0, 1060, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1858, 0, 1059,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 1071, 1072, 1078,
	1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061,
	1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0, 2505,
	1082, 1083, 1084, 1085, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 1859, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 0, 0, 0, 0,
	1090, 1094, 1102, 0, 0, 0, 0, 1060, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 1079, 1092, 0,
	0, 0, 0, 0, 1076, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 1854, 1855, 1856, 0, 0, 0, 0, 0,
	0, 1853, 1851, 1852, 1844, 1845, 1846, 1847, 1849, 1850,
	0, 0, 1082, 1083, 1084, 1085, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 1094, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0,
	1092, 0, 0, 0, 1090, 0, 0, 1080, 0, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 1059, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 1093, 1076, 0,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 1086, 0,
	0, 0, 2455, 0, 0, 0, 1842, 1843, 0, 1860,
	1861, 1862, 0, 1081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1084, 1085,
	1095, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	1057, 1058, 0, 1087, 1088, 1089, 1097, 1098, 1099, 0,
	0, 0, 0, 0, 0, 0, 1090, 1094, 1102, 1857,
	0, 0, 0, 1060, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 1079, 1092, 0, 0, 0, 0, 1093,
	1076, 1080, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096,
	0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	0, 0, 0, 1848, 2407, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 1083,
	1084, 1085, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 1086, 0, 1863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 1094,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 1858,
	0, 0, 0, 0, 1095, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 1092, 0, 0, 0,
	1090, 0, 0, 1080, 0, 0, 0, 1060, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	0, 1059, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 1093, 1076, 1859, 1071, 1072, 1078, 1077,
	1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 1086, 0, 0, 0, 2377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 1095, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 1057, 1058, 0, 1087,
	1088, 1089, 1097, 1098, 1099, 0, 0, 0, 0, 0,
	0, 0, 1090, 1094, 1102, 0, 0, 0, 0, 1060,
	0, 0, 1101, 0, 1854, 1855, 1856, 0, 0, 0,
	0, 0, 1100, 1853, 1851, 1852, 1844, 1845, 1846, 1847,
	1849, 1850, 0, 1059, 0, 0, 0, 0, 0, 1079,
	1092, 0, 0, 0, 0, 1093, 1076, 1080, 1071, 1072,
	1078, 1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069,
	1061, 1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0,
	2372, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1083, 1084, 1085, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 1094, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	1057, 1058, 0, 1087, 1088, 1089, 1097, 1098, 1099, 0,
	0, 0, 1092, 0, 0, 0, 1090, 0, 0, 1080,
	0, 0, 0, 1060, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 1059, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 1093,
	1076, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096,
	0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	1086, 0, 0, 0, 2368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 1083,
	1084, 1085, 1095, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098,
	1099, 0, 0, 0, 0, 0, 0, 0, 1090, 1094,
	1102, 0, 0, 0, 0, 1060, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 0, 0, 0, 1079, 1092, 0, 0, 0,
	0, 1093, 1076, 1080, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 0, 2303, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1083, 1084, 1085, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 1094, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 1057, 1058, 0, 1087,
	1088, 1089, 1097, 1098, 1099, 0, 0, 0, 1092, 0,
	0, 0, 1090, 0, 0, 1080, 0, 0, 0, 1060,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 1059, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 1093, 1076, 0, 1071, 1072,
	1078, 1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069,
	1061, 1062, 1063, 1064, 1066, 1067, 1086, 0, 0, 0,
	2269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1083, 1084, 1085, 1095, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0,
	0, 0, 0, 0, 1090, 1094, 1102, 0, 0, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 1079, 1092, 0, 0, 0, 0, 1093, 1076, 1080,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0, 0,
	0, 0, 2268, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 1094, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098,
	1099, 0, 0, 0, 1092, 0, 0, 0, 1090, 0,
	0, 1080, 0, 0, 0, 1060, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 1059,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 1093, 1076, 0, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 1086, 0, 0, 0, 2233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1083, 1084, 1085, 1095, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089,
	1097, 1098, 1099, 0, 0, 0, 0, 0, 0, 0,
	1090, 1094, 1102, 0, 0, 0, 0, 1060, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 0, 0, 0, 1079, 1092, 0,
	0, 0, 0, 1093, 1076, 1080, 1071, 1072, 1078, 1077,
	1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 0, 0, 0, 0, 2076, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 1085, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 1094, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 1100, 1193, 0, 0, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 40,
	1092, 0, 0, 0, 1090, 0, 0, 1080, 0, 0,
	41, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 0, 1059, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 1093, 1076, 51,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 1086, 0,
	0, 0, 2052, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 1081, 0, 63, 0, 480, 64, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1084, 1085,
	1095, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 1094, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 0, 0, 1093,
	0, 1080, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096,
	0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067,
	0, 0, 0, 0, 1510, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 127, 69, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 1057,
	1058, 140, 1087, 1088, 1089, 1097, 1098, 1099, 479, 0,
	0, 103, 0, 0, 1095, 1090, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 1101, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 1076,
	0, 40, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 41, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 135, 1093, 0, 44, 1071, 1072, 1078, 1077,
	1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 0, 126, 1804, 1082, 1083, 1084,
	1085, 51, 0, 0, 0, 0, 1065, 2568, 0, 0,
	0, 0, 0, 0, 0, 1057, 1058, 0, 1087, 1088,
	1089, 1097, 1098, 1099, 0, 0, 0, 0, 1094, 1102,
	62, 1090, 0, 0, 0, 0, 0, 63, 1060, 480,
	64, 1101, 0, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097,
	1098, 1099, 1059, 0, 0, 1092, 0, 0, 1079, 1090,
	0, 0, 1080, 66, 1777, 1076, 1060, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	1059, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 1076, 0, 2567, 0, 0, 0, 0,
	0, 0, 0, 1082, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 1065, 1086, 1874, 0, 0, 1873, 0, 0,
	1778, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 1094, 1102, 0, 0, 0, 67,
	0, 1082, 1083, 1084, 1085, 1095, 0, 0, 0, 0,
	1065, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 69, 0, 70,
	0, 1092, 1094, 1102, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	479, 1100, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 1092,
	0, 0, 142, 0, 1093, 0, 1080, 1071, 1072, 1078,
	1077, 1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061,
	1062, 1063, 1064, 1066, 1067, 0, 0, 0, 0, 1086,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 1081, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	1607, 0, 0, 0, 0, 0, 1057, 1058, 0, 1087,
	1088, 1089, 1097, 1098, 1099, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 1606, 0, 0, 1060,
	1093, 0, 1101, 1071, 1072, 1078, 1077, 1073, 1074, 1075,
	1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066,
	1067, 0, 0, 1059, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 1076, 0, 1093, 0,
	0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097,
	1098, 1099, 0, 0, 1082, 1083, 1084, 1085, 0, 1090,
	0, 0, 0, 1065, 0, 0, 1060, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 1102, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 1076, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 1083, 1084, 1085, 1091, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 1102, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 1081, 0, 1057, 1058, 0,
	1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0, 1092,
	0, 0, 1095, 1090, 0, 0, 1080, 0, 0, 0,
	1060, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 594, 1059, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074,
	1075, 1096, 1081, 1070, 1068, 1069, 1061, 1062, 1063, 1064,
	1066, 1067, 0, 0, 0, 1082, 1083, 1084, 1085, 1095,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 1093, 0,
	1080, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 0,
	0, 0, 0, 1095, 1090, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2056, 0, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 0, 0, 1071, 1072, 1078, 1077, 1073,
	1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062, 1063,
	1064, 1066, 1067, 0, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	1880, 0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097,
	1098, 1099, 0, 0, 0, 0, 0, 1094, 1102, 1090,
	0, 0, 0, 1875, 0, 0, 1060, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 0,
	0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098, 1099,
	1059, 0, 0, 0, 1092, 0, 1079, 1090, 0, 0,
	0, 1080, 0, 1076, 1060, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 1059, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	1065, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 1094, 1102, 0, 0, 0, 0, 0, 1082,
	1083, 1084, 1085, 0, 1095, 0, 0, 0, 1065, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	1094, 1102, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 0, 1093, 1080, 0, 1071, 1072, 1078, 1077,
	1073, 1074, 1075, 1096, 0, 1070, 1068, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 0, 0, 0, 1086, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 1840, 0, 0, 0, 1057, 1058,
	0, 1087, 1088, 1089, 1097, 1098, 1099, 0, 0, 1095,
	0, 0, 0, 0, 1090, 1086, 0, 0, 1833, 0,
	0, 1060, 0, 0, 1101, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 1095, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0,
	1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0,
	0, 0, 0, 0, 0, 0, 1082, 1083, 1084, 1085,
	0, 0, 0, 0, 0, 1065, 1093, 0, 0, 1071,
	1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070, 1068,
	1069, 1061, 1062, 1063, 1064, 1066, 1067, 1094, 1102, 0,
	0, 0, 0, 0, 0, 1057, 1058, 0, 1087, 1088,
	1089, 1097, 1098, 1099, 0, 0, 1100, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 1101, 0, 0, 1092, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 1076, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 1083, 1084, 1085, 1081, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 1102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 0, 0, 1071, 1072, 1078, 1077,
	1073, 1074, 1075, 1096, 1091, 1070, 1068, 1069, 1061, 1062,
	1063, 1064, 1066, 1067, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 1058, 0, 1087, 1088, 1089, 1097, 1098,
	1099, 0, 0, 0, 0, 0, 0, 0, 1090, 1086,
	0, 0, 0, 0, 0, 1060, 0, 0, 1101, 0,
	0, 0, 0, 0, 1081, 1057, 1058, 0, 1087, 1088,
	1089, 1097, 1098, 1099, 0, 0, 0, 0, 0, 1059,
	0, 1095, 0, 0, 0, 1079, 0, 0, 1060, 0,
	0, 1101, 1076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1083, 1084, 1085, 0, 0, 0, 0, 0, 1065,
	1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075,
	1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066,
	1067, 1094, 1102, 1082, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 1102, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 129, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 1080, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 51, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 54, 0, 0, 0,
	56, 0, 0, 0, 62, 0, 0, 132, 1095, 1086,
	0, 63, 0, 122, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 0, 0,
	1071, 1072, 1078, 1077, 1073, 1074, 1075, 1096, 0, 1070,
	1068, 1069, 1061, 1062, 1063, 1064, 1066, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075,
	1096, 0, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066,
	1067, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	127, 69, 0, 70, 0, 71, 0, 133, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 83, 1057, 1058, 103, 1087, 1088,
	1089, 1097, 1098, 1099, 0, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 1060, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 1059, 0, 0, 128, 0, 0, 1079, 0,
	0, 0, 0, 141, 0, 1076, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 126, 0, 0, 4, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 1083, 1084, 1085, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 1302, 1332, 1291, 1323, 1322, 0, 0,
	1293, 1292, 0, 0, 1094, 1102, 1334, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 1328, 0, 1320, 1319, 1080, 0,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	1315, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1301, 0, 0, 1086,
	0, 0, 0, 1306, 1304, 1307, 1308, 1309, 1310, 1311,
	0, 1331, 0, 0, 1081, 0, 0, 0, 1295, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	1303, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 0, 1435, 1433, 1434, 1437, 1436, 0,
	1093, 0, 0, 1071, 1072, 1078, 1077, 1073, 1074, 1075,
	1096, 1305, 1070, 1068, 1069, 1061, 1062, 1063, 1064, 1066,
	1067, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 1299, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 1313, 1302, 1332, 1291, 1323, 1322,
	0, 0, 1293, 1292, 0, 0, 1296, 0, 1334, 1333,
	1329, 1330, 0, 0, 0, 0, 0, 0, 547, 0,
	573, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 0, 0, 0, 1335, 552, 0,
	0, 0, 0, 0, 0, 0, 1328, 0, 1320, 1319,
	550, 0, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 0, 0, 0, 0, 553, 0, 0, 0,
	0, 1317, 1315, 1316, 559, 560, 0, 0, 0, 569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 554, 0, 0, 0, 1301, 0,
	0, 0, 0, 0, 0, 1306, 1304, 1307, 1308, 1309,
	1310, 1311, 0, 1331, 0, 0, 572, 0, 0, 0,
	1295, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 556,
	557, 0, 1303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 0, 0,
	0, 0, 558, 565, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 1299, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 561, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 549, 566, 576, 0, 1335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 0, 0, 571, 0, 0, 0, 0,
	577, 0, 0, 0, 0, 564, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570,
}
var sqlPact = [...]int{

	43282, -1000, -27, -1000, -1000, -1000, 156, -1000, -1000, -1000,
	-1000, 153, 152, 150, -1000, 149, 148, 146, 145, 136,
	135, 134, 133, 130, 129, 127, -1000, 126, -1000, -1000,
	-1000, -1000, 125, 116, 113, 110, 109, 105, 103, -1000,
	1111, 22255, 97, 84, 1383, -1000, 36248, 82, 81, 79,
	78, 1129, 75, 74, 26351, 926, 1250, 72, 66, 63,
	61, 60, 991, 35909, 4066, 2843, 1124, 1634, 35567, 21913,
	1606, 1492, 35225, -1000, -1000, 34883, 58, 55, 53, 51,
	50, -1000, -1000, 34541, 47, 46, 42, 39, 36, 35,
	34, 28, 27, 26, 25, 24, 23, 22, -1000, 21,
	19, 18, -1000, 43976, 17, 16, 14, 1115, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 929, 93, -1000, 947, 471, 1639, 8155, 1055,
	1047, 1031, 1029, 1066, 38282, 36248, 8, -54, 6, -1000,
	1968, 692, 19460, 43282, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26009, 25667,
	34199, 33857, 6034, 778, -1000, -31, 22935, 36248, -1000, 158,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14871, 14517, 565, 158, -1000, -1000, -1000, -1000, -1000, 33515,
	-1000, 33173, 32831, 1505, 32489, -1000, -1000, -1000, -1000, 32147,
	-1000, -1000, 1822, 1658, 1650, 25325, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31808, 31466,
	31124, 30782, 30440, 526, -1000, -1000, -1000, 17695, -1000, -1000,
	-1000, -1000, 5, -1000, 4, -1000, 1, -5, -6, -7,
	-1000, -17, -19, -1000, -20, -22, -1000, -23, -24, 30098,
	884, 1290, -1000, -1000, -30, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36248, -1000, 15577, -1000, 525, -1000, 1609,
	-1000, 15577, -1000, 1285, -1000, -1000, -1000, -1000, -1000, 36248,
	-1000, -1000, -1000, -1000, -1000, -1000, 2123, 1220, 524, 29756,
	-1000, 1371, -1000, 611, 808, -1000, -1000, -1000, 9214, 177,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1221,
	23288, 1176, 1984, 1766, 2122, 1486, 1716, 1715, 1713, 1711,
	1710, 2120, 1035, 2119, 1796, 1034, 2118, 1684, 1251, 677,
	2117, 1602, 1601, -1000, -1000, -1000, -1000, 949, -1000, -1000,
	-1000, 27707, -1000, -1000, 805, 927, 947, -1000, -1000, -1000,
	1382, 1917, 1917, 1917, 2014, 316, 313, -1000, 93, -1000,
	1205, -1000, 1185, -1000, -1000, -1000, -1000, -1000, 42875, -1000,
	-1000, 15577, 15577, 15577, 15577, 15577, 1200, 552, -1000, 522,
	520, 7448, -1000, -1000, 2104, -1000, -1000, -1000, 331, -1000,
	-1000, 15577, 158, -1000, -1000, -1000, -1000, 518, 2113, -1000,
	690, -1000, -1000, -1000, 617, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1619, 517, 514, 512, -1000, 509,
	-1000, -1000, 508, 506, 505, 504, 503, 502, 498, 497,
	496, 493, 492, 477, 476, 475, 474, 1099, -1000, 632,
	-1000, -1000, 632, 632, -1000, 459, 459, 461, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 459, -1000, -1000, -1000,
	594, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 473, 1226, -1000, -1000, 1226, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 774, 37604, -34, 36248, -1000,
	472, -34, -1000, -1000, 470, -1000, 10626, 10626, -1000, -1000,
	-1000, -1000, -1000, 9920, 1447, -1000, 41106, -211, 363, 580,
	-1000, 18401, 21219, -1000, -1000, 975, 1808, 814, -1000, 1051,
	1804, 558, -1000, 1134, -1000, 856, 1802, -113, 1646, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 23627, 22935, -31, -43,
	-1000, -1000, -1000, 5681, 42875, -1000, 42875, -1000, 874, 20164,
	158, -1000, -1000, -1000, -1000, 466, 1343, 619, -1000, 359,
	-1000, 29414, 619, 1341, -1000, -1000, -1000, 27707, -1000, 36248,
	-1000, 36248, -1000, 914, -1000, 37943, 119, 1792, -1000, -1000,
	119, 1733, -1000, 118, 1729, -1000, -1000, 1299, 1727, -1000,
	-43, 1721, -1000, -1000, 15577, -60, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 692, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 29072, 22595, 985, 607,
	42875, 2049, 43917, 23627, 42875, 22595, -1000, -1000, 36248, -1000,
	15577, -1000, 2048, 1355, -35, -1000, -1000, -1000, -1000, -1000,
	1386, 1459, 749, 1338, 9214, 9214, 1880, -1000, 167, 6034,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28730, -1000,
	-1000, -1000, 1178, 36248, -1000, -1000, 1618, -1000, 22595, 36248,
	-1000, 36248, -1000, 36248, -1000, 36248, -1000, 36248, -1000, -1000,
	-1000, -1000, -1000, 3610, -1000, 1617, -1000, -1000, 36248, -1000,
	1385, -1000, -1000, -1000, 28391, 28049, -1000, 979, 804, -1000,
	-1000, 120, -1000, 36248, 1959, 610, -1000, 1382, 1395, 1615,
	674, 1253, 1472, 14163, 1429, 15577, 93, -1000, -1000, 93,
	93, 8861, -1000, -1000, -1000, 36248, -1000, 43655, 43917, 6034,
	791, 15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577,
	15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577,
	15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577, 15577,
	15577, 15577, 15577, 1436, 15577, 773, 15577, 15577, 15577, 15577,
	1170, 1121, 458, 1163, -1000, 2075, 2075, 2075, 43135, 43135,
	395, 552, -1000, 15577, -1000, 140, 15577, 313, 40944, -32,
	7095, -1000, -1000, -1000, 13810, 629, 42875, 158, 6387, -1000,
	2102, 897, 1627, 1539, 465, 554, 553, 548, 499, 15577,
	15577, 13457, 13103, 12749, 16283, 12395, 15577, 7801, 15577, 15577,
	15577, 15577, 12041, 11687, -1000, 463, -1000, -1000, -1000, -1000,
	2100, -1000, -1000, 2099, -1000, 789, 765, 2098, -1000, -35,
	-1000, 37604, -1000, 36248, -34, 2047, 36248, -1000, 98, -1000,
	41816, -1000, 98, -62, -1000, 1442, 1438, 19812, 1313, 1212,
	1212, 1212, -1000, 462, 539, 580, 4956, 11333, -1000, 26690,
	1224, 204, 312, 18048, 1447, -1000, 36248, -48, 1014, -1000,
	24983, 1951, 1928, 1924, 27707, 2029, 140, 1956, 1600, 772,
	27707, 1955, 771, 2026, 140, 1599, 767, 36248, 6034, 1954,
	589, -1000, 36248, -1000, -1000, -1000, 1597, -63, -1000, -1000,
	24644, 2045, 1700, -1000, 1132, -1000, 2039, 36248, 1282, 1337,
	-1000, -1000, 797, 1686, 625, 258, 2038, 258, 20515, -1000,
	36248, -1000, 36248, -1000, -1000, 36248, -1000, 36248, -1000, 36248,
	36248, -1000, 36248, 36248, -71, 42875, 41418, 24305, 763, -1000,
	659, 24644, 180, -73, -1000, 890, -1000, -1000, -1000, -1000,
	424, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 461, 1099, 459,
	459, 459, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 594,
	-1000, -1000, 632, 632, 632, -1000, -1000, -76, -1000, 1592,
	614, -74, 704, -35, -1000, 1226, -1000, 964, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2112, -1000, 2086, -1000, -1000, 2097, -37, -1000, -37,
	-1000, 6034, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36248,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 282, -1000,
	-1000, -1000, -1000, -1000, -1000, 36248, 36248, 36248, -1000, 27707,
	621, 1616, -1000, 1960, 1395, 1615, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42875, -1000, 378, -1000, -1000, 42875,
	1059, 1470, -1000, 1470, -39, -1000, 41533, 1422, 36248, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	609, 655, 655, 837, 837, 837, 837, 2016, 786, 1105,
	489, 4533, 4533, 4533, 4533, 4533, 4533, 4533, 4533, 304,
	436, 436, 304, 304, 304, 304, 304, 4533, 4533, 4533,
	43135, 43102, 4386, 15577, 15577, 759, 1120, 458, 4386, 15577,
	4386, 4386, 4386, 4386, -1000, 1249, -1000, -1000, -1000, -1000,
	1588, 450, 16283, 16283, -1000, -1000, -1000, 7448, 16636, -1000,
	-1000, -1000, -1000, 449, 15577, -1000, 41108, -225, 310, -83,
	-1000, 15577, 538, -104, -1000, 873, -1000, 15577, -1000, -3,
	15577, 15577, 15577, 309, -1000, 307, -1000, 758, -1000, 757,
	755, 753, -1000, 447, 1203, 446, 445, 15577, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42728, 39004, 306, -1000,
	1587, -83, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 305,
	-1000, 289, -1000, 42501, -83, 287, 39254, -1000, 16283, 16283,
	16283, 7448, 444, 283, -1000, 41495, -1000, 42463, 10979, 10979,
	10979, 271, 42338, 15577, -83, 38966, 4482, 4016, -80, -81,
	-1000, -82, -1000, 2095, -90, 261, 608, 604, 260, -1000,
	-1000, 442, -91, 625, 10626, 19107, 6034, -1000, 625, 9920,
	-1000, 19812, 19812, 1281, 1419, 19812, -1000, -1000, -1000, -1000,
	26690, 540, 580, 26690, -1000, 2094, 1430, 256, -1000, -1000,
	-1000, 36248, 439, -1000, 580, 255, 961, 36248, 36248, 36248,
	-1000, -1000, 1332, 37265, 1328, 43917, 36248, -1000, 438, 435,
	1417, 1412, 36248, 36248, 36926, 36587, 36248, 962, 140, -1000,
	603, 425, 36248, 1007, 599, 36248, 140, -1000, 423, 36248,
	992, -1000, 598, 1523, 1298, -1000, 858, 1584, 36248, 254,
	-107, -40, 43917, -1000, -1000, -1000, -1000, -1000, 36248, 486,
	36248, 140, 36248, 2111, 140, 36248, 1683, 1815, 575, 36248,
	1472, 15577, 1072, -1000, 18754, 649, 36248, 973, 83, -1000,
	-1000, -1000, 583, 36248, -1000, -1000, 119, 119, -1000, 118,
	1299, -43, -1000, 15577, -1000, -1000, 36248, 23627, -109, -1000,
	-1000, 43917, -1000, 550, 806, -1000, 2092, 612, 23627, 36248,
	9214, 9214, -1000, 1460, -1000, -1000, 970, -1000, 1089, -1000,
	-1000, -1000, -1000, 9214, -1000, -49, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1230, 1036, -1000, -1000, -1000, 1059, -1000,
	15577, 2090, -1000, -1000, -1000, 8861, -1000, -1000, -1000, 36248,
	-178, 15577, 4386, 4386, 15577, 16283, 16283, -1000, 4386, -1000,
	-1000, -1000, -1000, -1000, 1578, 422, 15577, 43917, 4511, 3987,
	-115, -1000, 15577, -44, -1000, 15577, -1000, 40822, -1000, -1000,
	547, 1661, -1000, 15577, 42077, 253, 10273, -1000, 41913, -38,
	-38, -1000, 2110, 1365, 1160, 1113, 950, 2089, -1000, 20867,
	626, 1222, 40658, 43655, 43917, -1000, 15577, -1000, -1000, 1574,
	15577, -1000, 43655, 43917, 16283, 16283, 16283, 16283, 16283, 16283,
	16283, 16283, 16283, 16283, 16283, 16283, 16283, 16283, 16283, 16283,
	16283, 16283, 16283, 1421, 16283, 2073, 2073, 2073, -45, 15577,
	-1000, 1614, 1574, 15577, 15577, 43917, 252, 250, 248, -1000,
	15577, -83, 15577, 15577, 15577, -1000, -1000, -1000, 247, -1000,
	2084, -1000, -1000, -1000, -1000, 180, -1000, 1536, -1000, -87,
	-1000, 1447, -1000, 1536, -1000, -1000, 1281, -1000, 416, 15577,
	19812, -1000, 536, -1000, -116, -1000, 26690, -1000, 533, -222,
	-1000, 581, -1000, 580, 412, 36248, 26690, -1000, -1000, -1000,
	750, 748, 1670, -1000, 1327, -1000, 653, -1000, 955, 15577,
	17342, 410, 409, 1079, -1000, 1667, 1299, 1657, 1299, -1000,
	-48, 982, -1000, 21571, 15577, -1000, 745, 21571, -1000, -1000,
	15577, -1000, 744, 21571, 612, 1569, 811, -1000, 844, -1000,
	1515, -1000, 24644, 408, 36248, 407, -1000, 406, -1000, -1000,
	405, 36248, 1393, 575, 23966, -1000, 619, 973, -1000, 42875,
	-1000, 973, 8508, 1932, -117, -1000, -1000, -1000, 625, 20515,
	19812, 9920, -122, -1000, -1000, -1000, -1000, 42875, -49, 1897,
	1897, -1000, 2082, -1000, 531, 246, -1000, 27368, -1000, -49,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36248, 1207, 6034,
	36248, 36248, 1264, 40536, -1000, 1906, 6034, 2041, 4386, 3255,
	2982, 15577, 43917, 43555, -123, 15577, 15577, -1000, 244, 15577,
	530, 42875, -1000, -1000, -1000, 42875, 15577, 2108, 15577, 242,
	237, 235, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	233, -1000, -1000, 38621, 15577, 232, -1000, 231, 229, 42875,
	1614, 42875, -1000, -1000, 762, 762, 911, 911, 911, 911,
	2073, 673, 285, 275, 332, 332, 332, 643, 460, 460,
	332, 332, 332, 1565, 1416, 404, 39766, 15577, 228, -1000,
	-1000, 42875, 42875, 226, -1000, -1000, -1000, -83, 356, 40372,
	40250, -1000, 225, 220, 1532, 2009, -1000, 19812, 1532, -1000,
	36248, 42875, -1000, -211, -1000, 2080, -1000, -1000, 1430, -1000,
	5323, 26690, 36248, -124, -1000, 36248, 36248, 36248, 1656, -1000,
	1482, -1000, 40086, -125, -1000, 300, 1978, 15577, -1000, -1000,
	402, 17342, 36248, -1000, 1444, 1481, 695, 36248, -1000, 36248,
	-1000, 36248, 36248, 36248, -1000, 400, 158, -130, 36248, -1000,
	-131, 36248, -1000, -1000, 23627, 752, -1000, 1189, 1518, -1000,
	17342, 399, 36248, 24644, 2035, 17342, 1276, 1397, 575, 23966,
	-1000, 797, -1000, -1000, -50, -1000, 388, 140, 973, -1000,
	-51, -1000, 579, 1870, -1000, 1864, 529, -1000, -1000, -53,
	397, -1000, 578, 577, -1000, -57, -1000, 576, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1906, 15577, 15577, 43555, -132,
	-1000, 4386, 4386, -1000, 39964, -1000, 42875, -1000, 41913, -1000,
	-1000, -1000, -1000, 1184, -1000, 39800, -1000, -1000, -1000, -1000,
	16283, 1560, 392, 43917, 39678, -1000, -1000, 15577, -1000, -1000,
	-1000, -1000, 623, 15577, 15577, 1447, 623, -133, 580, -1000,
	-1000, -1000, 2074, -1000, -138, -1000, -1000, -1000, -1000, 36248,
	-1000, 36248, -1000, 6034, 36248, 1556, 1315, -1000, -1000, 1406,
	390, 16283, 36248, -1000, 1091, 17342, 1906, 158, 6034, 1906,
	39514, 6387, -139, -140, 1309, -1000, 1305, 15577, -1000, 43917,
	1299, 1299, -1000, 742, 736, 15577, 723, -1000, 720, -1000,
	-61, 21571, -1000, -1000, 1998, 1165, -141, 17342, -147, 205,
	140, -155, 36248, -1000, 575, 23966, -1000, 1815, 1719, 36248,
	1920, -1000, -1000, 389, 387, 386, -1000, 27029, 27029, 23627,
	23627, 1207, -1000, 36248, -1000, 4386, 4386, -1000, -1000, 198,
	1222, 1997, -1000, 221, 16283, 43917, -156, -1000, 39392, -1000,
	36248, 42875, -83, -1000, -1000, 26690, 500, -1000, -1000, 1235,
	-1000, -1000, 36248, 1326, -1000, -1000, 15577, 39766, 385, 1515,
	382, -1000, -1000, -1000, -1000, -1000, -1000, 1978, -3, -1000,
	1081, -1000, -1000, 42875, 1972, -1000, -1000, 36248, 36248, -38,
	380, 377, -1000, 1244, 36248, 1091, -162, -1000, 1515, -1000,
	1091, 373, 23966, -1000, 1393, 790, -164, 36248, -1000, -1000,
	6740, 23627, 23627, -1000, -171, -1000, -1000, -1000, -172, -1000,
	1069, 15577, 221, -174, -1000, -1000, -72, -1000, 2034, -1000,
	-1000, -1000, -1000, 1654, 39129, 1369, 36248, -1000, 36248, 1906,
	196, 36248, 656, 6034, -1000, -1000, 191, 15577, 15577, 368,
	366, 365, 1515, 1091, -1000, 1515, 17342, -1000, 1397, 909,
	-1000, 625, -1000, -179, -180, -1000, -1000, 190, 15930, 15930,
	-83, -1000, 36248, 364, 1622, -1000, 1236, 1208, 189, -182,
	-1000, -1000, 359, -1000, 15577, -1000, 2108, -185, -187, 36248,
	36248, 36248, -1000, 1515, -1000, -188, -1000, 20515, -1000, 612,
	612, -1000, -1000, -1000, 16989, 1271, 959, 41369, -1000, -1000,
	-1000, 36248, -1000, 1274, 1273, 905, -1000, -1000, -1000, -1000,
	-1000, 1369, 42875, -1000, -1000, -190, -193, -196, -1000, 1091,
	-161, -1000, -1000, 2054, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1852, -1000, 672, 1262, 1262, 1236, 355, 354, 1269,
	1515, -1000, 15224, -1000, 2051, -1000, -1000, 1437, -1000, -1000,
	1175, 1150, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	188, 6034, 185, 6034, -1000, 647, -1000, 637, 343, 1384,
	-46, 9567, 788, 374, -96, -1000, -199, -1000, 42875, -1000,
	-1000, 334, -1000, 9567, 1175, -1000, 9567, 9567, -204, -1000,
	-1000, -205, -1000, -65, 1150, -102, -1000, -1000, 1150, -1000,
}
var sqlPgo = [...]int{

	0, 2491, 2489, 1678, 1994, 2488, 2487, 2486, 2485, 2484,
	2483, 2481, 2480, 2479, 2478, 2476, 2475, 2473, 2470, 2468,
	2466, 2461, 2460, 2459, 1979, 2457, 1968, 2454, 2453, 2452,
	2446, 2445, 28, 2441, 2432, 1966, 2431, 2430, 2426, 2423,
	2420, 2416, 1964, 2415, 1946, 2410, 2408, 2406, 2400, 2392,
	1932, 2391, 80, 116, 1913, 2384, 2380, 1906, 1901, 1853,
	2379, 1833, 2378, 2376, 1814, 1792, 2372, 94, 2370, 2369,
	2368, 1787, 1759, 2357, 2355, 2345, 150, 2341, 1751, 2340,
	2338, 2337, 2336, 2335, 2329, 2326, 2324, 2322, 2321, 2319,
	2314, 2313, 2311, 2310, 2308, 2307, 2304, 2300, 159, 2299,
	2298, 1684, 1674, 2297, 2296, 40, 37, 16, 59, 30,
	152, 2621, 142, 2291, 2289, 2288, 2287, 2286, 2285, 24,
	100, 96, 2284, 326, 2283, 2282, 43, 39, 23, 18,
	2281, 92, 2279, 2277, 2278, 34, 2276, 2272, 132, 2270,
	50, 26, 2158, 155, 149, 111, 123, 2266, 2265, 2264,
	44, 119, 7, 5, 4, 3, 1, 2263, 2, 6,
	2259, 2258, 20, 77, 31, 2255, 27, 33, 2254, 2253,
	130, 2252, 62, 98, 1578, 103, 122, 629, 93, 2251,
	68, 17, 66, 2250, 2248, 160, 45, 2247, 35, 85,
	145, 113, 2244, 48, 161, 129, 79, 133, 137, 2243,
	2242, 2240, 101, 2239, 120, 97, 2237, 2236, 81, 2235,
	106, 140, 2234, 141, 110, 2232, 2231, 121, 2230, 126,
	2229, 2228, 158, 146, 114, 13, 54, 75, 14, 1605,
	1604, 134, 91, 61, 52, 2225, 794, 1277, 969, 53,
	102, 89, 56, 105, 46, 88, 148, 29, 2224, 2222,
	138, 2221, 2220, 2219, 2217, 2216, 104, 2215, 2214, 36,
	2211, 78, 38, 60, 112, 57, 189, 128, 109, 154,
	99, 2206, 74, 124, 2204, 117, 2203, 2198, 1821, 118,
	2197, 2192, 2186, 1797, 1742, 1566, 846, 2181, 2178, 1370,
	1129, 2177, 2171, 87, 2169, 115, 108, 90, 144, 139,
	58, 2167, 125, 49, 2166, 51, 22, 0, 577, 364,
	2165, 127, 63, 2162, 2161, 2160, 2159, 32, 11, 8,
	10, 15, 12, 71, 65, 2157, 2156, 131, 82, 67,
	2155, 156, 2154, 2153, 2150, 41, 2149, 21, 2145, 19,
	2144, 2140, 25, 9, 2139, 2136, 151, 2135, 86, 2133,
	1983, 2132, 153, 2130, 2129, 1677, 2126, 72, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 305, 305, 306, 306, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 43, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 49, 49, 49, 47, 47, 47, 46, 46,
	46, 45, 45, 45, 48, 48, 48, 176, 176, 175,
	175, 179, 179, 50, 50, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	274, 274, 273, 51, 51, 248, 248, 54, 54, 203,
	203, 55, 55, 55, 55, 55, 56, 56, 66, 66,
	346, 346, 346, 350, 350, 351, 351, 352, 352, 352,
	352, 352, 352, 352, 348, 348, 61, 61, 61, 61,
	62, 62, 62, 63, 63, 103, 103, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 29, 30, 30, 31,
	31, 32, 32, 32, 72, 72, 72, 74, 71, 71,
	71, 73, 73, 73, 73, 75, 75, 76, 76, 76,
	76, 76, 77, 77, 299, 297, 297, 298, 298, 148,
	148, 148, 148, 148, 149, 149, 149, 304, 304, 304,
	304, 304, 304, 303, 303, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 90, 90, 90, 98, 98, 98, 98, 98,
	98, 98, 79, 79, 84, 84, 84, 84, 84, 80,
	80, 85, 85, 86, 86, 87, 87, 87, 87, 87,
	87, 81, 81, 81, 81, 89, 89, 89, 89, 88,
	88, 94, 94, 94, 94, 94, 94, 91, 91, 91,
	91, 92, 92, 92, 95, 95, 95, 95, 82, 82,
	83, 83, 96, 96, 97, 97, 97, 97, 97, 93,
	93, 93, 347, 347, 349, 349, 59, 59, 38, 38,
	39, 39, 150, 150, 151, 151, 227, 227, 227, 227,
	152, 152, 124, 124, 124, 153, 153, 154, 154, 155,
	155, 155, 157, 157, 158, 158, 159, 159, 159, 156,
	156, 156, 226, 315, 315, 316, 316, 316, 316, 316,
	316, 317, 317, 317, 317, 317, 317, 317, 313, 313,
	314, 311, 311, 312, 312, 312, 312, 353, 353, 225,
	225, 162, 162, 318, 318, 318, 318, 319, 319, 319,
	319, 319, 322, 321, 320, 320, 320, 320, 320, 260,
	260, 260, 100, 100, 40, 40, 130, 130, 41, 41,
	37, 37, 37, 207, 207, 166, 166, 265, 265, 265,
	141, 141, 119, 119, 119, 17, 13, 13, 13, 13,
	13, 13, 23, 23, 21, 21, 208, 208, 209, 209,
	60, 60, 64, 64, 69, 69, 99, 99, 99, 99,
	99, 99, 25, 25, 25, 25, 33, 33, 33, 33,
	68, 68, 355, 355, 137, 137, 137, 137, 138, 138,
	222, 222, 223, 223, 356, 356, 224, 224, 224, 132,
	131, 133, 133, 36, 36, 36, 126, 126, 127, 127,
	128, 128, 129, 129, 357, 357, 57, 57, 57, 102,
	102, 144, 144, 219, 219, 219, 221, 221, 220, 220,
	220, 193, 193, 193, 101, 101, 171, 171, 181, 181,
	182, 182, 271, 183, 183, 67, 67, 111, 111, 109,
	109, 109, 109, 109, 109, 109, 109, 110, 110, 110,
	112, 112, 112, 112, 112, 112, 112, 115, 115, 115,
	116, 116, 116, 114, 114, 328, 328, 328, 331, 331,
	327, 329, 329, 330, 330, 354, 354, 194, 194, 194,
	161, 160, 160, 164, 164, 163, 165, 165, 264, 264,
	264, 191, 191, 190, 190, 190, 190, 212, 212, 210,
	210, 211, 211, 215, 215, 216, 216, 216, 217, 217,
	218, 218, 189, 189, 244, 244, 214, 214, 213, 113,
	113, 113, 170, 170, 170, 172, 172, 234, 234, 234,
	235, 235, 233, 233, 233, 233, 266, 266, 266, 266,
	266, 266, 266, 266, 344, 344, 344, 345, 345, 263,
	263, 267, 267, 267, 267, 267, 267, 261, 261, 261,
	261, 262, 262, 272, 272, 197, 197, 197, 197, 195,
	195, 196, 196, 268, 268, 268, 268, 192, 192, 269,
	269, 269, 228, 228, 275, 275, 275, 293, 293, 169,
	169, 169, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 277, 277, 277, 277, 279, 279, 279,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 292, 292,
	292, 292, 292, 280, 280, 287, 287, 288, 288, 289,
	290, 281, 281, 282, 282, 283, 284, 291, 291, 291,
	291, 295, 295, 285, 285, 285, 285, 285, 286, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 205, 205, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 238, 238, 238,
	238, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 323, 323, 323, 323, 323, 323, 323, 323,
	325, 325, 326, 326, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 332, 332, 333, 333, 335, 335,
	336, 336, 337, 338, 338, 338, 339, 340, 340, 334,
	334, 341, 341, 341, 342, 342, 343, 343, 343, 343,
	343, 250, 250, 251, 252, 258, 258, 258, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 139, 139, 139, 139, 139, 178,
	178, 177, 177, 247, 247, 245, 245, 249, 249, 198,
	198, 294, 294, 294, 294, 294, 294, 294, 199, 199,
	199, 206, 200, 200, 201, 201, 201, 201, 201, 241,
	242, 202, 202, 202, 243, 243, 253, 257, 257, 256,
	255, 255, 254, 254, 231, 231, 232, 232, 230, 229,
	186, 186, 185, 185, 184, 184, 358, 358, 259, 259,
	187, 187, 188, 180, 180, 270, 270, 270, 270, 173,
	173, 146, 146, 174, 174, 142, 142, 145, 145, 143,
	143, 143, 143, 167, 167, 168, 168, 140, 140, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	296, 296, 296, 246, 134, 134, 134, 135, 135, 136,
	136, 301, 301, 301, 302, 302, 302, 302, 300, 300,
	300, 300, 300, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 7, 1,
	3, 2, 4, 1, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 4, 3, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 2, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 2, 3, 7, 7, 7, 4, 5, 5,
	5, 5, 2, 0, 2, 0, 3, 2, 8, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 1, 0, 9, 9, 6,
	7, 5, 3, 5, 1, 3, 1, 1, 1, 10,
	11, 9, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 2, 4, 3, 3, 0, 6, 3,
	11, 14, 4, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 4, 4, 2, 3, 5, 5, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 1, 0, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 1, 0, 2, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 1, 3, 3, 1, 1,
	6, 6, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 382, -4, -24, -26, -29, -34,
	-35, -55, -42, -43, -44, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -36, -37, -38,
	-39, 73, -40, -41, 94, -330, 98, -45, -46, -47,
	-49, -48, 102, 109, 112, 134, 145, 231, 238, 259,
	261, 263, 270, -109, -111, 257, -62, -63, -71, -72,
	-73, -74, -103, 282, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, 285, -25, -33, -68, 324, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -328, -112, -110, 379, 258, 333, 35,
	294, 61, 105, 265, 349, 356, -115, -113, -114, -116,
	275, 341, 304, 383, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 2, 304, 344,
	87, 153, 243, -346, 2, -174, 304, 87, -143, -134,
	372, 4, -307, -309, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 175, 176,
	177, 180, 179, 184, 185, 188, 189, 192, 194, 196,
	197, 200, 198, 202, 203, 205, 204, 210, 212, 213,
	215, 218, 221, 224, 227, 228, 229, 230, 231, 232,
	234, 236, 238, 240, 241, 242, 243, 244, 246, 247,
	249, 250, 251, 252, 253, 257, 255, 256, 258, 259,
	260, 261, 263, 265, 266, 268, 283, 284, 295, 270,
	271, 272, 273, 274, 278, 276, 279, 280, 282, 285,
	287, 290, 293, 294, 296, 299, 300, 297, 292, 303,
	305, 306, 307, 308, 309, 310, 311, 312, 319, 320,
	324, 325, 326, 327, 330, 331, 332, 333, 335, 338,
	339, 340, 345, 350, 351, 352, 353, 354, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 51, 52, 53,
	56, 89, 91, 92, 108, 113, 114, 124, 125, 126,
	136, 138, 147, 148, 151, 158, 160, 161, 162, 163,
	164, 166, 173, 174, 182, 199, 209, 211, 222, 226,
	235, 237, 245, 267, 277, 288, 289, 298, 301, 314,
	315, 316, 321, 322, 337, 341, 342, 382, 382, 2,
	170, 242, -142, -134, 87, 382, 382, 382, 382, 304,
	2, 334, 344, -207, 87, 329, 382, 382, -134, 238,
	22, 2, 96, 157, 332, 331, 22, 234, 276, 306,
	308, 2, 382, 382, 382, 382, 382, 2, 344, 304,
	153, 87, 334, -134, 2, -53, 2, 379, -52, -4,
	-35, -44, -54, -50, -24, -26, -42, -58, -57, -59,
	-61, -65, -64, -67, -71, -72, -78, -101, -102, 282,
	111, -350, 2, 22, -351, -352, 73, 102, 134, 275,
	157, 96, 331, 304, 2, 170, 2, -134, 2, -346,
	2, 170, 2, -350, 2, -134, 2, -138, 2, 270,
	-134, 382, 382, 382, 382, 382, 189, 55, 267, 279,
	-76, 320, -75, 314, -299, -77, 2, -175, 200, -134,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 2, -98, 279,
	34, 55, 22, 60, 88, 135, 153, 154, 176, 68,
	69, 241, 189, 171, 319, 177, 280, 305, 320, 73,
	335, 309, 110, 4, 87, 200, 281, 314, 382, 382,
	382, -354, 2, 304, 272, 285, -110, -112, -111, -163,
	-164, 328, 165, 107, 220, -109, -111, 2, -328, -98,
	279, 2, 55, 22, -297, 2, -259, 216, -236, 93,
	-238, 370, 371, 365, 206, 355, -250, -240, -253, 108,
	267, 379, -142, -239, 385, 9, -325, -111, 29, -251,
	-252, 49, -134, 7, 8, 5, 6, -140, -277, -246,
	-286, 323, 115, 208, -323, -324, 4, -307, -301, -278,
	-288, -282, -285, 166, 58, 79, 80, 83, 81, 84,
	281, 334, 50, 28, 113, 114, 226, 235, 301, 321,
	322, 147, 209, 148, 56, 136, 182, 101, 37, 39,
	41, 42, 51, 52, 89, 91, 92, 124, 125, 126,
	158, 160, 161, 162, 163, 164, 211, 245, 288, 298,
	315, 316, 342, -308, -289, -290, -283, -284, 74, 116,
	133, 156, 149, 168, 172, 183, 186, 195, 201, 223,
	225, 264, 286, -291, -355, 2, 320, 320, 2, -355,
	2, -355, 2, -137, 2, 320, 317, -331, 246, -327,
	-134, -331, 382, 382, 384, 382, -160, -161, 2, 22,
	99, -188, 2, 379, -266, 2, 377, -268, -142, -111,
	-267, 379, 217, -3, 2, -268, 147, -142, 2, -268,
	147, -142, 2, -134, 2, -145, 147, -142, -300, 4,
	-307, -309, -308, -310, 58, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 49, 50, 54, 57, 59,
	68, 73, 78, 79, 81, 80, 82, 83, 84, 93,
	95, 97, 99, 100, 103, 105, 107, 115, 117, 129,
	131, 132, 134, 137, 139, 150, 153, 155, 165, 167,
	178, 181, 187, 190, 191, 206, 207, 208, 214, 216,
	217, 219, 220, 233, 239, 248, 262, 275, 281, 291,
	302, 304, 313, 317, 318, 323, 328, 329, 334, 336,
	343, 344, 346, 347, 348, 349, 317, 384, -174, -167,
	-134, -230, -229, 381, -236, 2, -236, 2, 132, 379,
	-185, -186, -229, -230, 2, -175, 147, -134, 2, -175,
	2, 153, -134, 147, 2, -134, 22, 132, 2, 167,
	2, 167, 2, -269, 2, -268, -176, 147, 2, -175,
	-176, 147, 2, -146, 147, 2, -145, -134, 147, 2,
	-167, 147, 2, -203, 379, -274, 2, -273, -302, 4,
	-307, -309, -308, 341, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 279, 216, 384, -175,
	-236, -248, 379, 132, -236, 216, -134, 2, 283, 2,
	379, -76, 53, 320, -223, 2, -224, -131, -132, -133,
	169, 240, 244, 354, 317, 360, 132, -297, -179, 381,
	-98, 2, -305, 2, -303, 9, -302, 5, 283, 2,
	241, 280, 55, 132, 2, 2, -347, 2, 216, 132,
	2, 132, 2, 132, 2, 132, 2, 132, 2, 2,
	241, 280, 2, 129, 2, 319, 2, 2, 132, 2,
	169, 240, 295, 2, 304, 344, 2, 132, 132, 354,
	2, -192, -268, 304, 354, 22, -163, -164, -213, -190,
	129, -210, -211, 187, 117, 214, -194, 22, 99, -194,
	-194, 44, 380, 380, -98, 283, 2, 10, 11, 57,
	33, 370, 371, 372, 373, 127, 374, 375, 368, 369,
	367, 358, 359, 362, 363, 364, 70, 361, 360, 63,
	193, 269, 118, 119, 120, 121, 254, 13, 14, 15,
	26, 219, 186, 355, 149, 286, 365, 16, 17, 18,
	168, 36, 150, -139, -147, -236, -236, -236, -236, -236,
	225, -184, -231, 377, -111, 379, 379, -111, -236, -177,
	379, 7, -111, -245, 377, -254, -236, -185, 379, 5,
	379, 5, -332, 350, 129, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 237, -295, 345, -295, -295, -279,
	379, -279, -280, 379, -279, 351, 356, 379, -222, -223,
	-222, 317, -138, 384, -331, -168, 379, -188, -180, -270,
	-236, 372, -180, -187, -259, 74, -197, 172, 201, 133,
	183, 264, 156, 7, -53, -233, 385, 379, 372, -263,
	356, -111, -267, 379, -266, -142, 379, -121, 255, -120,
	21, 23, 102, 339, 108, 292, 310, 111, 271, 255,
	108, 111, 255, 292, 310, 271, 255, 108, 385, 111,
	-305, -143, 384, -300, 372, 296, 380, -173, -142, -186,
	379, -162, 206, -130, -329, 349, -162, 379, -135, 147,
	2, -134, -329, 206, -269, -144, -142, -144, 282, -134,
	30, -123, 384, 48, 260, 108, -123, 108, -123, 384,
	108, -123, 108, 108, -177, -236, 380, 384, -346, -352,
	73, 379, 30, -247, -275, -276, -278, -287, -281, -285,
	-286, 40, 46, 45, 174, 173, 311, 199, 277, 289,
	337, 151, 38, 215, 159, 4, 158, 160, 161, 162,
	163, 164, 288, 37, 245, 125, 126, 124, 101, 92,
	91, 211, 42, 41, -289, -290, -283, -284, 89, 315,
	316, 166, 39, 52, 51, 342, 298, -306, -305, -346,
	-299, -177, 30, -223, 2, -356, 384, 185, -149, 192,
	205, 141, 217, 352, -304, 5, 4, -246, -260, 93,
	189, -286, 8, 371, -296, 7, 370, -298, -297, -298,
	77, 381, -300, -175, 22, 284, 2, -299, -349, 129,
	-346, -299, -299, -299, -299, -299, 279, -53, 129, -134,
	185, -299, 2, -299, 2, 304, 153, 304, -123, 384,
	-142, 64, 65, 354, -213, -190, -191, -190, -214, -213,
	331, -211, -210, -215, -236, 22, -218, 123, 202, -236,
	-238, -110, -110, -110, -165, -264, -236, 239, 153, -299,
	-293, -275, -292, 250, 251, 249, 253, 252, -275, -300,
	314, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, 186, 149, 286, 36, 150, -236, 317,
	-236, -236, -236, -236, 198, 206, 208, 323, 115, 330,
	99, 212, -358, 302, 32, -243, -111, 379, -258, 27,
	291, 22, -250, 267, 379, -231, -236, -232, -178, -177,
	380, 384, -178, -249, -245, -257, -256, 346, 380, -177,
	343, 22, 99, 372, 2, 7, -204, 353, 197, 90,
	142, 196, -205, 274, -333, 122, 137, 379, 380, 2,
	380, 2, 380, 2, 380, 2, -236, -236, -198, 2,
	-294, -177, 4, 353, 197, 90, 142, 196, 274, -198,
	2, -199, 2, -236, -177, -200, -237, -238, 370, 371,
	365, 379, 267, -201, 2, -236, -178, -236, 43, 181,
	318, -202, -236, 132, -177, -236, -236, -236, -177, -177,
	2, -177, 2, 379, 7, 7, 314, 314, 7, -138,
	-327, 30, -167, -170, 384, 132, 30, 4, -170, 384,
	380, 172, 172, -266, -197, 172, -195, 223, -195, -195,
	-344, 379, 378, -263, -300, 377, 386, -178, 2, -262,
	-261, 30, -134, 221, 380, -142, 384, 317, -208, 68,
	59, -226, 147, 59, -311, -134, 68, -312, 54, 329,
	239, 131, -208, 68, -208, 68, 68, -268, 33, -67,
	66, 132, 317, -268, 66, 317, 33, -67, 132, 317,
	-145, -300, 66, -272, 357, -134, 132, 380, 384, -150,
	-167, -151, -134, -227, -226, -313, -314, -311, 153, 329,
	116, 30, 108, 230, 30, 216, 206, -126, 307, 108,
	-228, 347, -219, -67, 379, 93, 30, -219, -181, -182,
	-271, -183, -142, 379, -134, -175, -176, -176, -145, -146,
	-134, -167, 380, 384, -53, -273, 317, 336, -151, -52,
	380, 384, -169, 29, 377, -204, 379, -272, 384, 132,
	360, 317, 380, 320, -224, -148, 244, 290, 256, 278,
	8, 7, 7, 384, -300, -348, -134, 279, -53, -142,
	-145, -142, -268, 349, 129, 65, -191, -214, -216, -296,
	379, 371, -217, 267, 268, 384, -119, 31, 97, 175,
	-142, 354, -236, -236, 317, -358, 302, -243, -236, 198,
	208, 323, 115, 330, 99, 212, 132, 379, -237, -237,
	-177, -240, 379, -177, 378, 388, 380, -236, 378, 378,
	384, -255, -256, 103, -236, -164, 384, -163, -236, -177,
	-177, 380, 380, 317, 317, 317, 317, 379, -338, 224,
	379, 379, -236, 30, 384, 380, 132, 380, 380, -206,
	233, 380, 10, 11, 370, 371, 372, 373, 127, 374,
	375, 368, 369, 367, 358, 359, 360, 63, 193, 269,
	13, 14, 15, 168, 150, -237, -237, -237, -177, 379,
	380, -241, -242, 132, 129, 30, -202, -202, -202, 380,
	132, -177, 384, 384, 384, 380, 380, 380, 7, 380,
	384, 380, 354, 354, 380, 379, 380, -228, -270, -172,
	2, -266, -300, -228, -259, -266, -266, -196, 336, 216,
	172, -266, -261, 380, -345, 7, -263, -262, 7, -235,
	-234, 130, 204, 380, -134, 379, -263, 380, -120, -142,
	-134, -134, 206, -226, 147, -125, 206, -275, -134, 379,
	379, 175, 175, -134, -134, 147, -134, 147, -134, -134,
	-121, 255, -67, 354, 379, -142, 255, 354, -134, -67,
	379, -134, 255, 354, -104, 146, 212, 296, 132, -142,
	380, 380, 384, -135, 153, -135, -67, -175, 5, -67,
	-142, 108, -127, 104, -357, 360, -134, -212, -210, -236,
	-193, -221, 262, 216, -173, 341, -134, -193, -171, 384,
	132, 360, -173, -123, -123, -123, -123, -236, -348, -305,
	380, -275, 377, 378, 7, 7, -107, 349, -305, -348,
	-297, -297, -131, 327, 62, 244, -297, 384, 218, 243,
	87, 304, -217, -236, -264, -142, 385, -236, -236, -237,
	-237, 132, 379, -236, -247, 26, 26, 380, -178, 384,
	-232, -236, 380, -245, 105, -236, 313, 380, 343, -164,
	-164, -164, 5, 197, 142, 196, -205, 196, -205, -205,
	7, -339, -134, 379, 347, -163, 380, -293, -275, -236,
	-241, -236, -293, -275, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, 99, 206, 212, -237, 384, -178, -242,
	-241, -236, -236, -275, 380, 380, 380, -177, -236, -236,
	-236, 380, 7, -52, -189, 137, -272, 384, -189, -196,
	379, -236, -266, 378, 380, 384, -262, 378, 384, 387,
	360, -263, 379, -167, -261, 317, 317, 108, 206, 338,
	-315, -312, -236, -166, -265, -134, -326, 379, -323, -324,
	-140, 379, 379, -118, 102, 282, -209, 108, -123, 108,
	-123, 317, -208, 68, -239, -140, -134, -177, 317, -239,
	-177, 317, -239, -107, 132, 303, 296, -152, 152, -227,
	379, -135, 379, 379, -162, 379, -134, -128, 180, -357,
	-303, -329, -193, -193, -180, 207, 67, 380, -228, -182,
	-172, -259, 380, -108, 75, -108, 7, 378, 380, -106,
	218, -105, -134, 5, -134, -31, -32, 153, 232, -300,
	-134, -142, 217, 380, -119, -300, 26, 26, -236, -247,
	380, -236, -236, 380, -236, 378, -236, 5, -236, 380,
	380, 380, 380, -340, -134, -236, 380, 380, 380, -242,
	132, 99, 212, 379, -236, 380, 380, 384, 380, 380,
	380, 380, -244, 139, 44, -266, -244, -167, -233, 7,
	-234, -300, 377, -262, -167, 380, -134, -134, -226, 108,
	-316, 68, -317, 57, 116, 73, 206, 208, 329, 239,
	54, 93, 248, 380, 380, 384, -141, -185, 57, -141,
	-236, 379, -166, -167, 206, 93, 206, 93, 86, 325,
	-134, -134, -142, -134, -134, 379, 380, -142, 380, -134,
	-306, 314, -153, -154, 229, 150, -166, 379, -167, -150,
	30, -166, 216, -129, 179, -357, -303, -126, -220, 379,
	216, -67, -193, 360, 86, 86, 378, 384, 379, 360,
	360, 384, 22, 379, -119, -236, -236, 380, 380, -164,
	-334, 229, 380, -237, 132, 379, -247, 380, -236, -335,
	348, -236, -177, -335, 380, -263, 7, 380, -226, -134,
	-300, -134, 116, 147, 208, 175, 379, -237, -142, -225,
	-353, 72, 300, -265, -119, -300, -119, 380, -177, 380,
	380, 208, 208, -236, -275, -123, -123, 317, 317, -177,
	317, 317, -239, 44, 227, 380, -166, 380, 380, -67,
	380, -142, -357, -303, -127, 100, -167, 68, -188, -111,
	379, 379, 379, -105, -106, -305, -305, -32, -167, 380,
	-164, 44, -237, -247, 380, 380, -336, -337, -134, -262,
	378, -317, -135, 206, -236, -136, 379, -152, 379, -141,
	-164, 248, -122, 57, -134, -134, -164, 379, 379, 188,
	243, -142, -225, 380, -152, -225, 379, -303, -128, 331,
	207, 380, -134, -306, -306, 380, 380, -341, 243, 268,
	-177, 380, 384, 30, 108, 380, -318, 194, -134, -167,
	-119, 380, -142, -117, 336, -300, 380, -177, -177, 379,
	379, 379, -152, -225, -152, -166, -129, 282, -228, 380,
	380, 380, -342, -343, 36, 326, 77, -236, -342, -337,
	-339, 116, -319, -322, -321, 216, 133, 228, 287, 380,
	380, -162, -236, 380, 380, -167, -167, -167, -152, 380,
	-181, -107, -107, -343, 236, 128, 267, 236, 128, -134,
	-321, 216, -322, 216, 331, 96, -318, 380, 380, 380,
	-225, -228, 26, -320, 203, 260, 48, 282, -320, -319,
	379, 379, -124, 48, 260, -152, -343, 20, 208, 93,
	-155, 229, -156, 229, 380, -300, 380, -300, 341, 341,
	-157, 379, 184, 384, -154, -153, -158, -159, -236, 93,
	195, 312, -155, 379, 384, 380, 384, 379, -158, -155,
	-159, -158, 380, 380, 384, -154, -153, -156, 384, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 675, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 355, 357, 359, 361, 363, 365,
	367, 369, 371, 373, 375, 377, 379, 381, 383, 384,
	386, 388, 390, 0, 596, 598, 600, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 713, -2, 724, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 690, 692, 694, 696,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1299, 1223, 1229,
	1230, 1254, 1255, 1256, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 151, 153, 154,
	0, 0, 0, 1225, 1299, 160, 162, 164, 166, 0,
	172, 0, 0, 0, 0, 563, 169, 171, 261, 1362,
	263, 265, 0, 0, 0, 0, 175, 176, 177, 178,
	179, 180, 182, 184, 186, 188, 190, 191, 0, 0,
	0, 0, 0, 260, 258, 213, 214, 0, 243, 244,
	245, 246, 247, 249, 217, 219, 220, 222, 224, 226,
	228, 229, 231, 233, 234, 236, 238, 239, 241, 0,
	0, 0, 267, 273, 274, 275, 277, 278, 279, 280,
	281, 282, 283, 0, 131, 0, 467, 256, 254, 0,
	127, 0, 593, 0, 269, 594, 595, 590, 591, 1389,
	619, 287, 289, 298, 300, 302, -2, -2, 1483, -2,
	319, -2, 327, 1489, 0, 330, 331, 334, -2, 209,
	356, 358, 360, 362, 364, 366, 368, 370, 372, 374,
	376, 378, 380, 382, 385, 387, 389, 391, 392, 0,
	0, 0, 396, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 395, 397, 398, 399, 0, 597, 599,
	601, 0, 553, 715, 0, 0, -2, 688, 689, -2,
	0, 719, 719, 719, 0, 0, 689, 687, 0, 290,
	0, 292, 0, 396, 295, 296, 335, 336, 1208, 1209,
	925, 0, 0, 0, 0, 0, 0, 1027, 1029, 1454,
	1483, 0, 1031, 1032, 0, 1034, 1036, 1037, 0, 1040,
	1041, 1193, 1225, 1239, 1240, 1241, 1242, 0, 0, 1245,
	0, 1247, 1248, 1249, 1095, 1051, -2, -2, 1237, 853,
	854, 855, 856, -2, 1497, 1055, 1058, 1061, 1064, 1065,
	1068, 1069, 0, 1438, 1455, 1456, 1479, 1480, 1488, 1492,
	1493, 1462, 1476, 1463, 1450, 1460, 1474, 1305, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1263, 887, 888, 893, 894, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 896, 621, 603, 612, 621, 605, 606,
	607, 608, 609, 610, 611, 614, 0, 705, 1368, 708,
	1236, 706, 691, 693, 0, 695, 0, 0, 699, 721,
	720, 759, 760, 0, 703, 704, 714, 775, 813, 790,
	781, 0, 0, 2, 71, 0, 1462, 813, 73, 0,
	1462, 813, 76, 0, 82, 0, 1462, 1228, 0, 1268,
	1269, 1270, 1271, 1272, 1497, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 0, 0, 271, 272,
	1233, 1231, 1232, 0, 155, 156, 157, 158, 0, 0,
	1226, 1202, 1200, 1201, 167, 532, 1462, -2, 555, 532,
	559, -2, 712, 1462, 635, 262, 264, 0, 174, 0,
	648, 0, 650, 0, 665, 819, 117, 1462, 194, 207,
	117, 1462, 197, 117, 1462, 200, 1221, 117, 1462, 203,
	204, 1462, 206, 257, 0, 0, -2, 250, 252, 1264,
	1265, 1266, 1267, -2, 248, 218, 221, 223, 225, 227,
	230, 232, 235, 237, 240, 242, -2, 0, 0, 0,
	466, 0, 0, 0, 592, 0, 618, 305, 0, 316,
	0, 318, 1449, -2, -2, 322, 622, 626, 627, 628,
	0, 0, 0, 0, 0, 0, 0, 332, 210, 0,
	393, 394, 402, 403, 132, 133, 353, 354, 0, 406,
	427, 439, 0, 0, 410, 412, 465, 414, 0, 0,
	416, 0, 418, 0, 420, 0, 422, 0, 424, 426,
	428, 440, 430, 714, 432, 0, 434, 438, 0, 443,
	0, 445, 446, 447, 0, 0, 453, 0, 0, 400,
	401, 117, 817, 0, 0, 0, -2, 0, 732, 757,
	0, 735, 736, 0, 0, 0, 0, 717, 718, 0,
	0, 0, 677, 678, 291, 0, 294, 0, 0, 0,
	0, 1128, 1129, 1130, 1131, 1132, 1133, 1136, 1137, 1134,
	1135, 1138, 1139, 0, 0, 0, 0, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 1142, 1143,
	0, 0, 1145, 0, 1147, 0, 0, 0, 0, 0,
	0, 1207, 0, 0, 1144, 930, 931, 932, 964, 965,
	0, 1028, 1204, 1197, 1030, 0, 1150, -2, 1151, 0,
	0, 1033, 1038, 1039, 1150, 0, 1192, -2, 0, 1244,
	0, 922, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1173, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 890, 901, 898, 897, 874,
	0, 873, 871, 0, 875, 0, 0, 0, 602, -2,
	604, 0, 616, 0, 707, 0, 0, 761, 764, 1213,
	1217, 1218, 764, 0, 1210, 0, 0, 0, 0, 810,
	810, 810, 808, 784, 0, 790, 0, -2, 814, 802,
	0, -2, 781, 0, 0, 815, 0, 83, 587, 96,
	0, 587, 587, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	804, 1224, 0, 1198, 1199, 147, 0, 0, 1219, 1203,
	473, 0, 0, 554, 0, 711, 0, 0, 0, 1462,
	562, 1257, 637, 0, 823, 0, 651, 0, 0, 820,
	0, 192, 0, 115, 116, 0, 195, 0, 198, 0,
	0, 201, 0, 0, 0, 1151, 714, 0, 0, 276,
	0, 0, 714, 0, 1153, 831, 832, 833, 834, 835,
	922, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 884, 0, 859,
	859, 859, 876, 877, 885, 886, 891, 892, 903, 904,
	906, 908, 902, 902, 902, 899, 900, 804, 134, 0,
	0, 0, 0, -2, 324, 0, 624, 0, 629, 344,
	345, 346, 631, 632, 328, 347, 348, 349, 350, 351,
	352, 0, 549, 0, 551, 1250, 0, 325, 337, 326,
	329, 0, 211, 404, 405, 407, 408, 409, 413, 0,
	462, 415, 417, 419, 421, 423, 431, 435, 714, 441,
	444, 448, 449, 450, 451, 0, 0, 0, 552, 0,
	307, 0, 457, 0, 732, 757, 681, 731, 682, 756,
	758, 733, 734, 739, 743, 744, 747, 750, 751, 741,
	925, 700, 701, 702, 725, 726, 574, 0, 0, 293,
	926, 827, 828, 878, 879, 880, 881, 882, 927, 928,
	0, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, -2, -2, -2, -2, -2, -2, -2, -2, 951,
	952, 953, 954, 955, 956, 957, 958, -2, -2, -2,
	962, 963, -2, 1146, 1148, 0, 1207, 0, -2, 0,
	-2, -2, -2, -2, 976, 0, 978, 981, 983, 985,
	0, 0, 0, 0, 1206, 995, 1184, 0, 0, 1125,
	1126, 1127, 980, 0, 0, 1205, 1196, 0, 0, 1149,
	1035, 0, 0, 0, 1157, 1191, 1187, 0, 1042, 724,
	0, 0, 0, 0, 1049, 0, 1253, 909, 910, 911,
	912, 913, 914, 923, 1105, 0, 0, 0, 1056, 1057,
	1059, 1060, 1062, 1063, 1066, 1067, 0, 0, 0, 1073,
	0, 1160, -2, -2, -2, -2, -2, -2, -2, 0,
	1075, 0, 1077, 1151, 1170, 0, 0, 998, 0, 0,
	0, 0, 1483, 0, 1080, 1151, 1178, 0, 0, 0,
	0, 0, 1151, 0, 1183, 0, 0, 0, 0, 0,
	1091, 0, 1093, 0, 0, 0, 0, 0, 0, 615,
	709, 0, 0, 823, 0, 0, 0, 1216, 823, 0,
	1212, 0, 0, 0, 0, 0, 805, 809, 806, 807,
	0, 0, 790, 802, 772, 0, 0, 0, 779, 780,
	801, 0, 800, 789, -2, 0, 0, 0, 0, 0,
	586, 98, 1462, 0, 119, 0, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 1227, 0, 137, 0, 1234, 0, 0, 0, 0,
	0, 472, 1233, 474, 476, 477, 478, 479, 1258, 0,
	1258, 0, 0, 0, 0, 0, 0, 639, 645, 0,
	738, 0, 663, 653, 0, 0, 0, 663, 667, 668,
	670, 671, 0, 0, 821, 208, 117, 117, 1222, 117,
	117, 205, 259, 0, 215, 251, 0, 0, 0, 253,
	255, 0, 824, 826, 0, 836, 0, 146, 0, 0,
	0, 0, 317, 0, 623, 630, 0, 341, 0, 343,
	550, 1252, 1251, 0, 212, 464, 284, 433, 436, 459,
	460, 461, 818, 0, 0, 458, 685, 686, 0, 745,
	0, 0, 742, 748, 749, 0, 728, 572, 573, 0,
	0, 0, -2, -2, 0, 0, 0, 996, -2, 977,
	979, 982, 984, 986, 0, 0, 0, 0, 0, 0,
	0, 997, 1150, 0, 1194, 1197, -2, 1152, 1155, 1156,
	0, 0, 1188, 0, 0, 0, 0, 723, 724, 724,
	724, 1048, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 1072, 0, 1074, 1076, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1001, 1002, 1003, 0, 1150,
	1079, 1176, 1177, 0, 0, 0, 0, 0, 0, 1085,
	0, 1182, 0, 0, 0, 1089, 1090, 1092, 0, 857,
	0, 883, 905, 907, 895, 714, 1235, 753, 1214, 804,
	763, 765, 1215, 753, 1211, 792, 0, 794, 0, 0,
	0, 796, 0, 785, 0, 787, 802, 777, 0, 0,
	770, 0, 769, 790, 798, 0, 0, 816, 97, 576,
	0, 0, 0, 100, 1462, 108, 0, 504, 0, 0,
	0, 0, 0, 589, 109, 1462, 117, 1462, 117, 110,
	84, 587, 85, 0, 0, 582, 0, 0, 575, 86,
	0, 584, 0, 0, 146, 0, 0, 148, 0, 1220,
	481, 531, 0, 0, 1258, 0, 470, 532, 556, 558,
	0, 0, 641, 645, 0, 644, 712, 663, 737, 822,
	646, 663, 0, 0, 0, 655, 652, 649, 823, 0,
	0, 0, 0, 193, 196, 199, 202, 1152, 266, 0,
	0, 1154, 0, 829, 0, 0, 126, 0, 135, 268,
	314, 315, 320, 339, 340, 342, 338, 0, 0, 0,
	0, 0, 0, 0, 727, 574, 0, 929, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1185, 0, 0,
	0, 1196, -2, 1158, 1186, 1190, 0, 1043, 0, 0,
	0, 0, 1246, 915, 916, 917, 918, 919, 920, 921,
	0, 1103, 1104, 1108, 0, 0, 1054, 0, 0, 1159,
	1169, 1171, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, -2, -2, -2, 1017, 1018, 1019,
	-2, -2, -2, 0, 0, 0, 1172, 0, 0, 1174,
	1175, 1179, 1180, 0, 1082, 1083, 1084, 1181, 0, 0,
	0, 889, 0, 0, 755, 0, 762, 0, 755, 793,
	0, 812, 795, 775, 786, 0, 783, 773, 0, 774,
	0, 802, 0, 0, 782, 0, 0, 0, 0, 118,
	502, 521, 0, 0, 565, 571, 571, 0, 1052, 1053,
	0, 0, 0, 102, 0, 0, 0, 0, 106, 0,
	112, 0, 0, 0, 91, 0, 0, 0, 0, 90,
	0, 0, 89, 124, 0, 0, 149, 486, 0, 475,
	0, 0, 0, 473, 0, 0, 0, 643, 645, 0,
	636, 637, 173, 647, 661, 662, 660, 0, 663, 669,
	666, 672, 0, 0, 128, 0, 0, 830, 837, 144,
	1351, 142, 139, 141, 285, 308, 309, 0, 313, 454,
	455, 456, 740, 746, 729, 574, 0, 0, -2, 0,
	989, -2, -2, 1121, 1152, 1195, 1189, 1243, 724, 1044,
	1046, 1047, 924, 1110, 1107, 0, 1094, 1070, 1071, 1168,
	0, 0, 0, 0, 1152, 1123, 1081, 0, 1087, 1088,
	858, 710, 1099, 0, 0, 766, 1099, 0, 790, 788,
	771, 767, 0, 778, 0, 799, 578, 580, 99, 0,
	503, 0, 506, 0, 0, 0, 0, 512, 513, 0,
	0, 0, 0, 523, 530, 0, 574, 1238, 0, 574,
	0, 0, 0, 0, 0, 114, 0, 0, 588, 0,
	117, 117, 577, 0, 0, 0, 0, 583, 0, 585,
	136, 0, 468, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 633, 645, 0, 638, 639, 0, 0,
	0, 654, 664, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 311, 0, 730, -2, -2, 990, 1122, 0,
	724, 0, 1096, -2, 0, 0, 0, 1124, 0, 697,
	0, 754, 752, 698, 811, 802, 0, 797, 101, 0,
	507, 508, 1258, 0, 511, 514, 0, 516, 1260, 481,
	0, 527, 528, 566, 567, 570, 568, 571, 724, 525,
	0, 103, 104, 113, 121, 105, 111, 0, 0, 724,
	0, 0, 803, 0, 0, 530, 0, 520, 481, 471,
	530, 0, 0, 640, 641, 0, 0, 0, 673, 674,
	0, 0, 0, 143, 0, 138, 140, 310, 0, 1045,
	1113, 0, -2, 0, 1025, 1086, 1098, 1100, 0, 776,
	768, 505, 509, 0, 0, 536, 0, 524, 0, 574,
	0, 0, 123, 0, 579, 581, 0, 0, 0, 0,
	0, 0, 481, 530, 469, 481, 0, 642, 643, 0,
	657, 823, 659, 0, 0, 145, 312, 0, 0, 0,
	1109, 1026, 0, 0, 0, 515, 541, 0, 0, 0,
	569, 1043, 532, 107, 0, 120, 0, 0, 0, 0,
	0, 0, 518, 481, 560, 0, 634, 0, 658, 146,
	146, 1106, 1111, 1114, -2, 1422, 1296, 0, 1112, 1101,
	1102, 0, 517, 537, 538, 0, 533, 534, 535, 1259,
	529, 536, 122, 93, 95, 0, 0, 0, 519, 530,
	823, 129, 130, 0, 1116, 1117, 1118, 1119, 1120, 510,
	539, 0, 540, 0, 0, 0, 541, 0, 0, 484,
	481, 656, 0, 542, 0, 545, 546, 0, 543, 526,
	0, 0, 480, 482, 483, 561, 1115, 544, 547, 548,
	0, 0, 0, 0, 487, 0, 488, 0, 0, 0,
	486, 0, 0, 0, 485, 491, 0, 494, 496, 497,
	-2, 0, 489, 0, 0, 492, 0, 0, 0, 490,
	495, 0, 493, 486, 0, 485, 501, 499, 0, 500,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 368, 3, 374, 369, 3,
	379, 380, 372, 370, 384, 371, 381, 373, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 388, 383,
	358, 360, 359, 362, 385, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 377, 3, 378, 375, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 386, 367, 387, 365,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 363, 57702, 364, 57703, 366, 57704, 376,
	57705, 382, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1091
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1097
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1106
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1280
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2114
		{
			return unimplemented(sqllex, "set from current")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = Low
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = Normal
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = High
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.str = "client_encoding"
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2490
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2501
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2512
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2516
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2520
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2528
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2546
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2691
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = DropDefault
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			return unimplemented(sqllex, "match full")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			return unimplemented(sqllex, "match partial")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			return unimplemented(sqllex, "match simple")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3015
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = NoAction
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = Restrict
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = Cascade
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = SetNull
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = SetDefault
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = true
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = false
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3208
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = Ascending
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = Descending
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3252
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3254
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = true
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = false
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3288
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3327
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3350
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3387
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.str = ""
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.str = ""
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3448
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = ReadOnly
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = ReadWrite
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.str = ""
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3580
		{
			return helpWith(sqllex, "INSERT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3639
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3679
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3816
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			return helpWith(sqllex, "SELECT")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3852
		{
			return helpWith(sqllex, "VALUES")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			return helpWith(sqllex, "TABLE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			return helpWith(sqllex, "SELECT")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			return helpWith(sqllex, "TABLE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3964
		{
			return unimplemented(sqllex, "cte")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3972
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3975
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3976
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = true
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = false
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = false
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = true
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4000
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4078
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = false
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = true
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			return helpWith(sqllex, "VALUES")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4223
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &From{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4245
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4327
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = nil
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4393
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = true
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = false
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.str = astFullJoin
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.str = astLeftJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.str = astRightJoin
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.str = astInnerJoin
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4511
		{
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4611
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4619
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4643
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = jsonbColType
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = jsonColType
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4743
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4752
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = nil
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4913
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4945
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4985
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = year
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = month
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = day
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = hour
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = minute
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = month
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = hour
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = minute
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = minute
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = nil
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = second
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5080
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5115
		{
			return unimplemented(sqllex, "at tz")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5389
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5469
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5485
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5489
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5525
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5562
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5615
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5616
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5629
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5640
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5661
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5670
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			return unimplemented(sqllex, "current role")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5698
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5724
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5729
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5739
		{
			return unimplemented(sqllex, "treat")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5776
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5781
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5785
		{
			return unimplemented(sqllex, "within group")
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5786
		{
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5811
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5821
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.str = ""
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5883
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5884
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5885
		{
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5888
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5889
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5895
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5897
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5898
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5899
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = Any
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = Some
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = All
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Plus
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Minus
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = Mult
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = Div
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = Mod
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = Bitand
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = Bitor
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = Pow
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = Bitxor
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = LT
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = GT
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = EQ
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = LE
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = GE
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = NE
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = Like
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = NotLike
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = ILike
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = NotILike
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6254
		{
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6255
		{
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6270
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6293
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6344
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6373
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6417
		{
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6450
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6453
		{
			return unimplemented(sqllex, "func const")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6459
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6462
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6464
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6468
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6472
		{
			sqlVAL.union.val = DNull
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6483
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6489
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6524
		{
			sqlVAL.str = ""
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6530
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6534
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
